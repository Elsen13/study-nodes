<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Netty</title>
    <link href="/2022/05/13/Netty/"/>
    <url>/2022/05/13/Netty/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>周总结</title>
    <link href="/2022/05/06/%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/06/%E5%91%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>总结一下每周做的事情</p><span id="more"></span><hr><blockquote><p>时间: 2022-5-6</p></blockquote><p><strong>学习</strong></p><p>上周把JUC的视频看了一下，学会了保护性暂停，消费者&#x2F;生产者模式，然后发现了一个微软的ToDo软件，做的比我自己写的软件好很多，有点不甘，后面想把自己做的软件优化一下，主要就是没有什么思路，目前就是仿造一下微软的吧，后面再去添加一些理财的功能，发现自己没有怎么管钱的事情，花钱大手大脚的。微软的ToDo特点就是细化到极致，这个对操作数据库有点难，另外我还想添加一个倒计时的功能，每个任务定一个时间，然后在规定的时间内完成，类似于番茄钟的功能，是之前看的一个学习方法中出现的，再做吧。。。</p><p>现在的目标就是赶快把JUC看完，现在有一些多线程基础的话，看起来确实飞快，很多要点也可以理解，再做做笔记什么的，节奏很适合我，主要就是不清楚自己有什么作业老是，老师发的作业总是偷偷摸摸的，生怕被看到一样，只能自己多查看学习通看看有没有发布，现在舍友推荐了一下，绑定了学习通的账号，有作业都有提醒，非常好，很方便我规划，对此向他salute。</p><p><strong>生活</strong></p><p>接着就是五一放假回家，没有做什么事情，基本上就是陪陪女朋友去玩，每天早上起来跑步，一次跑个五公里，沿着海边还算不错，空气也蛮好的，也有一些人在钓鱼，不知道他们以什么为生，但我保证肯定不是钓鱼。  </p><p>身体上现在也有在规划健身，和舍友一起去健身房了，一个月40，练了背和胸，我以为20kg很轻，结果比我想象中重了几倍，但是舍友帮我扶了一下，勉强做了5、6个吧，一共6组。这次是一次全新的开始，因为去健身房练了，平时都是在宿舍里面，设备也不是很多，练起来也没有那么爽，现在手也慢慢起茧了，等有一天，我真的变强了，一定要买能秀的衣服哈哈哈。</p><p>定一个学习列表吧，规划一下自己这一周要做的事情吧</p><ul><li><input disabled="" type="checkbox"> 把JUC从114到204</li><li><input disabled="" type="checkbox"> 坚持每天完成我的一天（微软的），养个习惯吧</li><li><input disabled="" type="checkbox"> 两天一休 一定要去健身</li></ul><p><strong>总结一下</strong>：</p><p>现在这个节奏很适合我，就是在学校安排的课程上手忙脚乱的，所以应该调整一下，偏学校的课程一点，最后祝自己变得更强！</p><blockquote><p>文档更新于: 2022-5-6 16:39</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC</title>
    <link href="/2022/04/21/JUC/"/>
    <url>/2022/04/21/JUC/</url>
    
    <content type="html"><![CDATA[<p><strong>了解多线程并发以及在Java的应用</strong></p><span id="more"></span><p>笔记作于:<a href="https://www.bilibili.com/video/BV16J411h7Rd?p=5&spm_id_from=pageDriver">黑马程序员全面深入学习Java并发编程，JUC并发编程全套教程</a></p><blockquote><p>文档更新于: 2022-5-26 23:02</p></blockquote>    <div class="markmap-container" style="height:600px">      <svg data='{"t":"root","d":0,"v":"","c":[{"t":"list_item","d":2,"p":{"lines":[0,1]},"v":"概览"},{"t":"list_item","d":2,"p":{"lines":[1,2]},"v":"进程与线程"},{"t":"list_item","d":2,"p":{"lines":[2,3]},"v":"Java线程"},{"t":"list_item","d":2,"p":{"lines":[3,4]},"v":"共享模型","c":[{"t":"list_item","d":4,"p":{"lines":[4,5]},"v":"管程"},{"t":"list_item","d":4,"p":{"lines":[5,6]},"v":"内存"},{"t":"list_item","d":4,"p":{"lines":[6,7]},"v":"不可变"}]}],"p":{}}'></svg>    </div>  <h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="用到的代码："><a href="#用到的代码：" class="headerlink" title="用到的代码："></a>用到的代码：</h3><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>lomback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://ch.qos.logback/xml/ns/logback&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://ch.qos.logback/xml/ns/logback logback.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date&#123;HH:mm:ss&#125; [%t] %logger - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;c&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;ERROR&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="本章内容"><a href="#本章内容" class="headerlink" title="本章内容"></a>本章内容</h3><ul><li>进程和线程的概念 </li><li>并行和并发的概念 </li><li>线程基本应用</li></ul><h3 id="进程与线程-1"><a href="#进程与线程-1" class="headerlink" title="进程与线程"></a>进程与线程</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><ul><li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理 IO 的 </li><li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。 </li><li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）</li></ul><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><ul><li>一个进程之内可以分为一到多个线程。 </li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行 </li><li><strong>Java 中，线程作为最小调度单位，进程作为资源分配的最小单位。 在 windows 中进程是不活动的，只是作为线程的容器</strong></li></ul><h4 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h4><ul><li><p>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集 </p></li><li><p>进程拥有共享的资源，如内存空间等，供其内部的线程共享 </p></li><li><p>进程间通信较为复杂 </p></li><li><ul><li>同一台计算机的进程通信称为 IPC（Inter-process communication） </li><li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</li></ul></li><li><p><code>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量 </code></p></li><li><p>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</p></li></ul><h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h3><p>单核 cpu 下，线程实际还是 <code>串行执行</code> 的。操作系统中有一个组件叫做任务调度器，将 cpu 的时间片（windows 下时间片最小约为 15 毫秒）分给不同的程序使用，只是由于 cpu 在线程间（时间片很短）的切换非常快，人类感觉是 <code>同时运行的</code> 。总结为一句话就是： <code>**微观串行，宏观并行**</code> ， </p><p><strong>一般会将这种</strong> <code>**线程轮流使用 CPU**</code> <strong>的做法称为并发， concurrent</strong></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/1648650642294-3244b7b5-7504-48c7-bcc4-f8a14f4a64dc.png" alt="img"></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/1648650712710-c1b91ccb-3983-4229-8249-d0a71756bb1a.png" alt="img"></p><p>多核 cpu下，每个 <code>核（core）</code> 都可以调度运行线程，这时候线程可以是并行的</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/1648650756667-a3a43425-081f-4760-a4db-be025953aa48.png" alt="img"></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/1648650811806-d990d762-4670-4f7d-8c76-f6b22f42e9a7.png" alt="img"></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>家庭主妇做饭、打扫卫生、给孩子喂奶，她一个人轮流交替做这多件事，这时就是并发 </li><li>家庭主妇雇了个保姆，她们一起这些事，这时既有并发，也有并行（这时会产生竞争，例如锅只有一口，一 个人用锅时，另一个人就得等待）</li><li>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行</li></ul><blockquote><ul><li>并发（concurrent）是同一时间应对（dealing with）多件事情的能力 </li><li>并行（parallel）是同一时间动手做（doing）多件事情的能力</li></ul><p>—— Rob Pike</p></blockquote><blockquote><p><strong>Rob Pike 资料</strong> </p><ul><li>golang 语言的创造者</li><li>[Rob Pike - 百度百科](<a href="https://baike.baidu.com/item/%E7%BD%97%E5%B8%83%C2%B7%E6%B4%BE%E5%85%8B/10983505?fromtitle=Rob">https://baike.baidu.com/item/罗布·派克/10983505?fromtitle=Rob</a> Pike&amp;fromid&#x3D;58101861&amp;fr&#x3D;aladdin)</li></ul></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h4><p>以调用方角度来讲，如果 </p><ul><li>需要等待结果返回，才能继续运行就是同步 </li><li>不需要等待结果返回，就能继续运行就是异步</li></ul><h5 id="1-设计"><a href="#1-设计" class="headerlink" title="1. 设计"></a>1. 设计</h5><p>多线程可以让方法执行变为异步的（即不要巴巴干等着）比如说读取磁盘文件时，假设读取操作花费了 5 秒钟，如 果没有线程调度机制，这 5 秒 cpu 什么都做不了，其它代码都得暂停… </p><h5 id="2-结论"><a href="#2-结论" class="headerlink" title="2. 结论"></a>2. 结论</h5><ul><li>比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程 </li><li>tomcat 的异步 servlet 也是类似的目的，让用户线程处理耗时较长的操作，避免阻塞 tomcat 的工作线程 </li><li>ui 程序中，开线程进行其他操作，避免阻塞 ui 线程</li></ul><h4 id="提高效率"><a href="#提高效率" class="headerlink" title="提高效率"></a>提高效率</h4><p>充分利用多核 cpu 的优势，提高运行效率。想象下面的场景，执行 3 个计算，最后将计算结果汇总。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">计算 1 花费 10 ms<br>计算 2 花费 11 ms<br>计算 3 花费 9 ms<br>汇总需要 1 ms<br></code></pre></td></tr></table></figure><ul><li>如果是串行执行，那么总共花费的时间是 10 + 11 + 9 + 1 &#x3D; 31ms </li><li>但如果是四核 cpu，各个核心分别使用线程 1 执行计算 1，线程 2 执行计算 2，线程 3 执行计算 3，那么 3 个 线程是并行的，花费时间只取决于最长的那个线程运行的时间，即 11ms最后加上汇总时间只会花费 12ms</li></ul><p><strong>注意</strong> </p><p>需要在多核 cpu 才能提高效率，单核仍然时是轮流执行</p><h3 id="1-设计-1"><a href="#1-设计-1" class="headerlink" title="1) 设计"></a>1) 设计</h3><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Copyright (c) 2014, Oracle America, Inc.</span><br><span class="hljs-comment"> * All rights reserved.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Redistribution and use in source and binary forms, with or without</span><br><span class="hljs-comment"> * modification, are permitted provided that the following conditions are met:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  * Redistributions of source code must retain the above copyright notice,</span><br><span class="hljs-comment"> *    this list of conditions and the following disclaimer.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  * Redistributions in binary form must reproduce the above copyright</span><br><span class="hljs-comment"> *    notice, this list of conditions and the following disclaimer in the</span><br><span class="hljs-comment"> *    documentation and/or other materials provided with the distribution.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  * Neither the name of Oracle nor the names of its contributors may be used</span><br><span class="hljs-comment"> *    to endorse or promote products derived from this software without</span><br><span class="hljs-comment"> *    specific prior written permission.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</span><br><span class="hljs-comment"> * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span><br><span class="hljs-comment"> * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE</span><br><span class="hljs-comment"> * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE</span><br><span class="hljs-comment"> * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR</span><br><span class="hljs-comment"> * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</span><br><span class="hljs-comment"> * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span><br><span class="hljs-comment"> * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN</span><br><span class="hljs-comment"> * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)</span><br><span class="hljs-comment"> * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF</span><br><span class="hljs-comment"> * THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">package</span> org.sample;<br><br><span class="hljs-keyword">import</span> org.openjdk.jmh.annotations.*;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><br><span class="hljs-meta">@Fork(1)</span><br><span class="hljs-meta">@BenchmarkMode(Mode.AverageTime)</span><br><span class="hljs-meta">@Warmup(iterations = 3)</span><br><span class="hljs-meta">@Measurement(iterations = 5)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBenchmark</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] ARRAY = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100_000_000</span>];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        Arrays.fill(ARRAY, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Benchmark</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">testMethod</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span>[] array = ARRAY;<br>        FutureTask&lt;Integer&gt; t1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">250_000_00</span>;i++) &#123;<br>                sum += array[<span class="hljs-number">0</span>+i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;);<br>        FutureTask&lt;Integer&gt; t2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">250_000_00</span>;i++) &#123;<br>                sum += array[<span class="hljs-number">250_000_00</span>+i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;);<br>        FutureTask&lt;Integer&gt; t3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">250_000_00</span>;i++) &#123;<br>                sum += array[<span class="hljs-number">500_000_00</span>+i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;);<br>        FutureTask&lt;Integer&gt; t4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">250_000_00</span>;i++) &#123;<br>                sum += array[<span class="hljs-number">750_000_00</span>+i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t3).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t4).start();<br>        <span class="hljs-keyword">return</span> t1.get() + t2.get() + t3.get()+ t4.get();<br>    &#125;<br><br>    <span class="hljs-meta">@Benchmark</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">testMethod2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span>[] array = ARRAY;<br>        FutureTask&lt;Integer&gt; t1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000_000_00</span>;i++) &#123;<br>                sum += array[i];<br>            &#125;<br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t1).start();<br>        <span class="hljs-keyword">return</span> t1.get();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.sample<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>JMH benchmark sample: Java<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjdk.jmh<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jmh-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjdk.jmh<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            JMH version to use with this project.</span><br><span class="hljs-comment">          --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jmh.version</span>&gt;</span>1.35<span class="hljs-tag">&lt;/<span class="hljs-name">jmh.version</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            Java source/target to use for compilation.</span><br><span class="hljs-comment">          --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javac.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">javac.target</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            Name of the benchmark Uber-JAR to generate.</span><br><span class="hljs-comment">          --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">uberjar.name</span>&gt;</span>benchmarks<span class="hljs-tag">&lt;/<span class="hljs-name">uberjar.name</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">compilerVersion</span>&gt;</span>$&#123;javac.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">compilerVersion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;javac.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;javac.target&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;uberjar.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>org.openjdk.jmh.Main<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ServicesResourceTransformer&quot;</span>/&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>                                    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">                                        Shading signed JARs will fail without this.</span><br><span class="hljs-comment">                                        http://stackoverflow.com/questions/999489/invalid-signature-file-when-attempting-to-run-a-jar</span><br><span class="hljs-comment">                                    --&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>*:*<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.SF<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.DSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.RSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-site-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-结论-1"><a href="#2-结论-1" class="headerlink" title="2) 结论"></a>2) 结论</h3><ol><li>单核 cpu 下，多线程不能实际提高程序运行效率，只是为了能够在不同的任务之间切换，不同线程轮流使用 cpu ，不至于一个线程总占用 cpu，别的线程没法干活 </li><li>多核 cpu 可以并行跑多个线程，但能否提高程序运行效率还是要分情况的</li></ol><ul><li><ul><li>有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任 务都能拆分（参考后文的【阿姆达尔定律】） </li><li>也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</li></ul></li></ul><ol start="3"><li>IO 操作不占用 cpu，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不用 cpu，</li></ol><p>​      但需要一 直等待 IO 结束，没能充分利用线程。所以才有后面的【非阻塞 IO】和【异步 IO】优化</p><h2 id="Java-线程"><a href="#Java-线程" class="headerlink" title="Java 线程"></a>Java 线程</h2><h3 id="本章内容-1"><a href="#本章内容-1" class="headerlink" title="本章内容"></a>本章内容</h3><ul><li>创建和运行线程 </li><li>查看线程 </li><li>线程 API </li><li>线程状态</li></ul><h3 id="创建和运行线程"><a href="#创建和运行线程" class="headerlink" title="创建和运行线程"></a>创建和运行线程</h3><h4 id="直接使用-Thread"><a href="#直接使用-Thread" class="headerlink" title="直接使用 Thread"></a>直接使用 Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 构造方法的参数是给线程指定名字，推荐</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;t1&quot;</span>) &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// run 方法内实现了要执行的任务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;;<br>t1.start();<br></code></pre></td></tr></table></figure><p>输出 <code>19:19:00 [t1] c.ThreadStarter - hello</code></p><h4 id="使用-Runnable-配合-Thread"><a href="#使用-Runnable-配合-Thread" class="headerlink" title="使用 Runnable 配合 Thread"></a>使用 Runnable 配合 Thread</h4><p>把【线程】和【任务】（要执行的代码）分开 </p><ul><li>Thread 代表线程 </li><li>Runnable 可运行的任务（线程要执行的代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task2, <span class="hljs-string">&quot;t2&quot;</span>);<br>t2.start();<br></code></pre></td></tr></table></figure><p>输出 <code>19:19:00 [t2] c.ThreadStarter - hello</code></p><p>Java 8 后可使用 lambda 表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br><span class="hljs-type">Runnable</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> () -&gt; log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task2, <span class="hljs-string">&quot;t2&quot;</span>);<br>t2.start();<br></code></pre></td></tr></table></figure><h4 id="Thread-与-Runnable-的关系"><a href="#Thread-与-Runnable-的关系" class="headerlink" title="Thread 与 Runnable 的关系 *"></a>Thread 与 Runnable 的关系 *</h4><p>分析 Thread 的源码，理清它与 Runnable 的关系 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Runnable target;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (target != <span class="hljs-literal">null</span>) &#123;<br>        target.run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小结</strong></p><ul><li>方法1 是把线程和任务合并在了一起，方法2 是把线程和任务分开了 </li><li>用 Runnable 更容易与线程池等高级 API 配合 </li><li>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</li></ul><h4 id="FutureTask-配合-Thread"><a href="#FutureTask-配合-Thread" class="headerlink" title="FutureTask 配合 Thread"></a>FutureTask 配合 Thread</h4><p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br>FutureTask&lt;Integer&gt; task3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;<br>    log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>&#125;);<br><br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task3, <span class="hljs-string">&quot;t3&quot;</span>).start();<br><br><span class="hljs-comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> task3.get();<br>log.debug(<span class="hljs-string">&quot;结果是:&#123;&#125;&quot;</span>, result);<br></code></pre></td></tr></table></figure><p><strong>输出</strong>:</p><blockquote><p>19:22:27 [t3] c.ThreadStarter - hello<br>19:22:27 [main] c.ThreadStarter - 结果是:100</p></blockquote><h3 id="观测多个线程同时运行"><a href="#观测多个线程同时运行" class="headerlink" title="观测多个线程同时运行"></a>观测多个线程同时运行</h3><p>主要是理解 </p><ul><li>交替执行 </li><li>谁先谁后，不由我们控制</li></ul><h3 id="查看进程线程的方法"><a href="#查看进程线程的方法" class="headerlink" title="查看进程线程的方法"></a>查看进程线程的方法</h3><p>windows下出现异常(例如jps看不到,jconsole也没有可用pid),尝试管理员身份运行cmd</p><p>cmd在 C:\Users{用户名}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\System Tools</p><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><ul><li>任务管理器可以查看进程和线程数，也可以用来杀死进程 </li><li><code>tasklist</code> 查看进程 </li><li><code>taskkill</code> 杀死进程</li></ul><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><ul><li><code>ps -fe</code> 查看所有进程 </li><li><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程 </li><li><code>kill</code>杀死进程 </li><li><code>top</code> 按大写 H 切换是否显示线程 </li><li><code>top -H -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</li></ul><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul><li><code>jps</code> 命令查看所有 Java 进程 </li><li><code>jstack &lt;PID&gt;</code> 查看某个 Java 进程（PID）的所有线程状态 </li><li><code>jconsole</code> 来查看某个 Java 进程中线程的运行情况（图形界面）</li></ul><h5 id="jconsole-远程监控配置"><a href="#jconsole-远程监控配置" class="headerlink" title="jconsole 远程监控配置"></a>jconsole 远程监控配置</h5><ul><li>需要以如下方式运行你的 java 类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -<br>Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -<br>Dcom.sun.management.jmxremote.authenticate=是否认证 java类<br></code></pre></td></tr></table></figure><ul><li>修改 &#x2F;etc&#x2F;hosts 文件将 127.0.0.1 映射至主机名</li></ul><p>如果要认证访问，还需要做如下步骤 </p><ul><li>复制 jmxremote.password 文件 </li><li>修改 jmxremote.password 和 jmxremote.access 文件的权限为 600 即文件所有者可读写 </li><li>连接时填入 controlRole（用户名），R&amp;D（密码）</li></ul><h3 id="线程运行原理"><a href="#线程运行原理" class="headerlink" title="线程运行原理 *"></a>线程运行原理 *</h3><h4 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h4><p><code>Java Virtual Machine Stacks (Java 虚拟机栈)</code></p><p>我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟机就会为其分配一块栈内存。</p><ul><li>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li></ul><h4 id="线程上下文切换-Thread-Context-Switch"><a href="#线程上下文切换-Thread-Context-Switch" class="headerlink" title="线程上下文切换(Thread Context Switch)"></a>线程上下文切换(Thread Context Switch)</h4><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码</p><ul><li>线程的 cpu 时间片用完</li><li>垃圾回收</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</li></ul><p>当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java 中对应的概念就是程序计数器（Program Counter Register），它的作用是记住下一条 jvm 指令的执行地址，是线程私有的</p><ul><li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</li><li>Context Switch 频繁发生会影响性能</li></ul><h3 id="常见Java线程方法"><a href="#常见Java线程方法" class="headerlink" title="常见Java线程方法"></a>常见Java线程方法</h3><table><thead><tr><th>方法名</th><th>static</th><th>功能说明</th><th>注意</th></tr></thead><tbody><tr><td>start()</td><td></td><td>启动一个新线程，在新的线程运行 run 方法中的代码</td><td>start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException</td></tr><tr><td>run()</td><td></td><td>新线程启动后会调用的方法</td><td>如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象，来覆盖默认行为</td></tr><tr><td>join()</td><td></td><td>等待线程运行结束</td><td></td></tr><tr><td>join(long)</td><td></td><td>等待线程运行结束,最多等待 n 毫秒</td><td></td></tr><tr><td>getId()</td><td></td><td>获取线程长整型的 id</td><td>id 唯一</td></tr><tr><td>getName()</td><td></td><td>获取线程名</td><td></td></tr><tr><td>setName(String)</td><td></td><td>修改线程名</td><td></td></tr><tr><td>getPriority()</td><td></td><td>获取线程优先级</td><td></td></tr><tr><td>setPriority(int)</td><td></td><td>修改线程优先级</td><td>java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率</td></tr><tr><td>getState()</td><td></td><td>获取线程状态</td><td>Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED</td></tr><tr><td>isInterrupted()</td><td></td><td>判断是否被打断</td><td>不会清除<code>打断标记</code></td></tr><tr><td>isAlive()</td><td></td><td>线程是否存活(还没有运行完毕)</td><td></td></tr><tr><td>interrupt()</td><td></td><td>打断线程</td><td>如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除<code>打断标记</code>；如果打断的正在运行的线程，则会设置<code>打断标记</code>；park 的线程被打断，也会设置<code>打断标记</code></td></tr><tr><td>interrupted()</td><td>static</td><td>判断当前线程是否被打断</td><td>会清除<code>打断标记</code></td></tr><tr><td>currentThread()</td><td>static</td><td>获取当前正在执行的线程</td><td></td></tr><tr><td>sleep(long)</td><td>static</td><td>让当前执行的线程休眠n毫秒，休眠时让出 cpu 的时间片给其它线程</td><td></td></tr><tr><td>yield()</td><td>static</td><td>提示线程调度器让出当前线程对CPU的使用</td><td>主要是为了测试和调试</td></tr></tbody></table><h3 id="start-与-run"><a href="#start-与-run" class="headerlink" title="start 与 run"></a>start 与 run</h3><h4 id="调用-run"><a href="#调用-run" class="headerlink" title="调用 run"></a>调用 run</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;t1&quot;</span>) &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>             log.debug(Thread.currentThread().getName());<br>             FileReader.read(Constants.MP4_FULL_PATH);<br>         &#125;<br>     &#125;;<br>     t1.run();<br>     log.debug(<span class="hljs-string">&quot;do other things ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">14</span> [main] c.<span class="hljs-symbol">TestStart</span> - main<br><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">14</span> [main] c.<span class="hljs-symbol">FileReader</span> - read [<span class="hljs-number">1.</span>mp4] start ...<br><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">18</span> [main] c.<span class="hljs-symbol">FileReader</span> - read [<span class="hljs-number">1.</span>mp4] end ... cost: <span class="hljs-number">4227</span> ms<br><span class="hljs-number">19</span>:<span class="hljs-number">39</span>:<span class="hljs-number">18</span> [main] c.<span class="hljs-symbol">TestStart</span> - do other things ...<br></code></pre></td></tr></table></figure><p>程序仍在 main 线程运行， <code>FileReader.read()</code> 方法调用还是同步的</p><h4 id="调用-start"><a href="#调用-start" class="headerlink" title="调用 start"></a>调用 start</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;t1&quot;</span>) &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            log.debug(Thread.currentThread().getName());<br>            FileReader.read(Constants.MP4_FULL_PATH);<br>        &#125;<br>    &#125;;<br>    t1.start();<br>    log.debug(<span class="hljs-string">&quot;do other things ...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-number">19</span>:<span class="hljs-number">41</span>:<span class="hljs-number">30</span> [main] c.<span class="hljs-symbol">TestStart</span> - do other things ...<br><span class="hljs-number">19</span>:<span class="hljs-number">41</span>:<span class="hljs-number">30</span> [t1] c.<span class="hljs-symbol">TestStart</span> - t1<br><span class="hljs-number">19</span>:<span class="hljs-number">41</span>:<span class="hljs-number">30</span> [t1] c.<span class="hljs-symbol">FileReader</span> - read [<span class="hljs-number">1.</span>mp4] start ...<br><span class="hljs-number">19</span>:<span class="hljs-number">41</span>:<span class="hljs-number">35</span> [t1] c.<span class="hljs-symbol">FileReader</span> - read [<span class="hljs-number">1.</span>mp4] end ... cost: <span class="hljs-number">4542</span> ms<br></code></pre></td></tr></table></figure><p>程序在 t1 线程运行， <code>FileReader.read()</code> 方法调用是异步的</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ul><li>直接调用 run 是在主线程中执行了 run，没有启动新的线程</li><li>使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码</li></ul><h3 id="sleep-与-yield"><a href="#sleep-与-yield" class="headerlink" title="sleep 与 yield"></a>sleep 与 yield</h3><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h4><ol><li><p>调用 sleep 会让当前线程从 <em>Running</em> 进入 <em>Timed Waiting</em> 状态（阻塞）</p></li><li><p>其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出<code> InterruptedException</code></p></li><li><p>睡眠结束后的线程未必会立刻得到执行</p></li><li><p>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</p></li></ol><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><ol><li><p>调用 yield 会让当前线程从 <em>Running</em> 进入 <em>Runnable</em> 就绪状态，然后调度执行其它线程</p></li><li><p>具体的实现依赖于操作系统的任务调度器</p></li></ol><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><ul><li><p>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</p></li><li><p>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        System.out.println(<span class="hljs-string">&quot;----&gt;1 &quot;</span> + count++);<br>    &#125;<br>&#125;;<br><span class="hljs-type">Runnable</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">// Thread.yield();</span><br>        System.out.println(<span class="hljs-string">&quot; ----&gt;2 &quot;</span> + count++);<br>    &#125;<br>&#125;;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task1, <span class="hljs-string">&quot;t1&quot;</span>);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task2, <span class="hljs-string">&quot;t2&quot;</span>);<br><span class="hljs-comment">// t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class="hljs-comment">// t2.setPriority(Thread.MAX_PRIORITY);</span><br>t1.start();<br>t2.start();<br></code></pre></td></tr></table></figure><h4 id="应用之效率"><a href="#应用之效率" class="headerlink" title="应用之效率 *"></a>应用之效率 *</h4><p>在没有利用 cpu 来计算时，不要让 while(true) 空转浪费 cpu，这时可以使用 yield 或 sleep 来让出 cpu 的使用权</p><p>给其他程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">50</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以用 wait 或 条件变量达到类似的效果</li><li>不同的是，后两种都需要加锁，并且需要相应的唤醒操作，一般适用于要进行同步的场景</li><li>sleep 适用于无需锁同步的场景</li></ul><h3 id="join-方法详解"><a href="#join-方法详解" class="headerlink" title="join 方法详解"></a>join 方法详解</h3><h4 id="为什么需要join"><a href="#为什么需要join" class="headerlink" title="为什么需要join"></a>为什么需要join</h4><p>下面的代码执行，打印 r 是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    test1();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    log.debug(<span class="hljs-string">&quot;开始&quot;</span>);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;开始&quot;</span>);<br>        sleep(<span class="hljs-number">1</span>);<br>        log.debug(<span class="hljs-string">&quot;结束&quot;</span>);<br>        r = <span class="hljs-number">10</span>;<br>    &#125;);<br>    t1.start();<br>    log.debug(<span class="hljs-string">&quot;结果为:&#123;&#125;&quot;</span>, r);<br>    log.debug(<span class="hljs-string">&quot;结束&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>分析</p><ul><li>因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出 r&#x3D;10</li><li>而主线程一开始就要打印 r 的结果，所以只能打印出 r&#x3D;0</li></ul><p>解决方法</p><ul><li>用 sleep 行不行？为什么？(不好设置sleep的时间)</li><li>用 join，加在 <code>t1.start()</code> 之后即可</li></ul><h4 id="应用之同步"><a href="#应用之同步" class="headerlink" title="应用之同步"></a>应用之同步</h4><p>以调用方角度来讲，如果</p><ul><li>需要等待结果返回，才能继续运行就是同步</li><li>不需要等待结果返回，就能继续运行就是异步</li></ul><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220422210423926.png" alt="image-20220422210423926"></p><h4 id="等待多个结果"><a href="#等待多个结果" class="headerlink" title="等待多个结果"></a>等待多个结果</h4><p>问，下面代码 cost 大约多少秒？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    test2();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        sleep(<span class="hljs-number">1</span>);<br>        r1 = <span class="hljs-number">10</span>;<br>    &#125;);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        sleep(<span class="hljs-number">2</span>);<br>        r2 = <span class="hljs-number">20</span>;<br>    &#125;);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    t1.start();<br>    t2.start();<br>    t1.join();<br>    t2.join();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    log.debug(<span class="hljs-string">&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;</span>, r1, r2, end - start);<br>&#125;<br></code></pre></td></tr></table></figure><p>分析如下</p><ul><li><p>第一个 join：等待 t1 时, t2 并没有停止, 而在运行</p></li><li><p>第二个 join：1s 后, 执行到此, t2 也运行了 1s, 因此也只需再等待 1s</p></li></ul><p>如果颠倒两个 join 呢？</p><p>最终都是输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span>:<span class="hljs-number">45</span>:<span class="hljs-number">43</span>.<span class="hljs-number">239</span><span class="hljs-meta"> [main] c.TestJoin - r1: 10 r2: 20 cost: 2005</span><br></code></pre></td></tr></table></figure><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220422210600013.png" alt="image-20220422210600013"></p><h4 id="有时效的-join"><a href="#有时效的-join" class="headerlink" title="有时效的 join"></a>有时效的 join</h4><p>等够时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    test3();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        sleep(<span class="hljs-number">1</span>);<br>        r1 = <span class="hljs-number">10</span>;<br>    &#125;);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    t1.start();<br>    <span class="hljs-comment">// 线程执行结束会导致 join 结束</span><br>    t1.join(<span class="hljs-number">1500</span>);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    log.debug(<span class="hljs-string">&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;</span>, r1, r2, end - start);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span>:<span class="hljs-number">48</span>:<span class="hljs-number">01</span>.<span class="hljs-number">320</span><span class="hljs-meta"> [main] c.TestJoin - r1: 10 r2: 0 cost: 1010</span><br></code></pre></td></tr></table></figure><p>没等够时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    test3();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        sleep(<span class="hljs-number">2</span>);<br>        r1 = <span class="hljs-number">10</span>;<br>    &#125;);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    t1.start();<br>    <span class="hljs-comment">// 线程执行结束会导致 join 结束</span><br>    t1.join(<span class="hljs-number">1500</span>);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    log.debug(<span class="hljs-string">&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;</span>, r1, r2, end - start);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span>:<span class="hljs-number">52</span>:<span class="hljs-number">15</span>.<span class="hljs-number">623</span><span class="hljs-meta"> [main] c.TestJoin - r1: 0 r2: 0 cost: 1502</span><br></code></pre></td></tr></table></figure><h3 id="interrupt-方法详解"><a href="#interrupt-方法详解" class="headerlink" title="interrupt 方法详解"></a>interrupt 方法详解</h3><h4 id="打断-sleep-wait-join-的线程"><a href="#打断-sleep-wait-join-的线程" class="headerlink" title="打断 sleep , wait , join 的线程"></a>打断 sleep , wait , join 的线程</h4><p>这几个方法都会让线程进入阻塞状态</p><p>打断 sleep 的线程, 会清空打断状态，以 sleep 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        sleep(<span class="hljs-number">1</span>);<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    t1.start();<br>    sleep(<span class="hljs-number">0.5</span>);<br>    t1.interrupt();<br>    log.debug(<span class="hljs-string">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.InterruptedException</span>: sleep interrupted<br> at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.sleep</span>(Native Method)<br> at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.sleep</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">340</span>)<br> at java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.concurrent</span><span class="hljs-selector-class">.TimeUnit</span><span class="hljs-selector-class">.sleep</span>(TimeUnit<span class="hljs-selector-class">.java</span>:<span class="hljs-number">386</span>)<br> at cn<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.n2</span><span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.Sleeper</span><span class="hljs-selector-class">.sleep</span>(Sleeper<span class="hljs-selector-class">.java</span>:<span class="hljs-number">8</span>)<br> at cn<span class="hljs-selector-class">.itcast</span><span class="hljs-selector-class">.n4</span><span class="hljs-selector-class">.TestInterrupt</span>.lambda<span class="hljs-variable">$test1</span>$<span class="hljs-number">3</span>(TestInterrupt<span class="hljs-selector-class">.java</span>:<span class="hljs-number">59</span>)<br> at java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Thread</span><span class="hljs-selector-class">.run</span>(Thread<span class="hljs-selector-class">.java</span>:<span class="hljs-number">745</span>)<br><span class="hljs-number">21</span>:<span class="hljs-number">18</span>:<span class="hljs-number">10.374</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - 打断状态: false<br></code></pre></td></tr></table></figure><h4 id="打断正常运行的线程"><a href="#打断正常运行的线程" class="headerlink" title="打断正常运行的线程"></a>打断正常运行的线程</h4><p>打断正常运行的线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> current.isInterrupted();<br>            <span class="hljs-keyword">if</span>(interrupted) &#123;<br>                log.debug(<span class="hljs-string">&quot; 打断状态: &#123;&#125;&quot;</span>, interrupted);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br>    t2.start();<br>    sleep(<span class="hljs-number">0.5</span>);<br>    t2.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">20</span>:<span class="hljs-number">57</span>:<span class="hljs-number">37</span>.<span class="hljs-number">964</span><span class="hljs-meta"> [t2] c.TestInterrupt - 打断状态: true</span><br></code></pre></td></tr></table></figure><h4 id="模式之两阶段终止"><a href="#模式之两阶段终止" class="headerlink" title="模式之两阶段终止 *"></a><a href="https://study-nodes.vercel.app/2022/04/22/JUC-%E6%A8%A1%E5%BC%8F/#%E5%88%A9%E7%94%A8isInterrupted">模式之两阶段终止 *</a></h4><h4 id="打断-park-线程"><a href="#打断-park-线程" class="headerlink" title="打断 park 线程"></a>打断 park 线程</h4><p>打断 park 线程, 不会清空打断状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        log.debug(<span class="hljs-string">&quot;park...&quot;</span>);<br>        LockSupport.park();<br>        log.debug(<span class="hljs-string">&quot;unpark...&quot;</span>);<br>        log.debug(<span class="hljs-string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    t1.start();<br>    sleep(<span class="hljs-number">0.5</span>);<br>    t1.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">21</span>:<span class="hljs-number">11</span>:<span class="hljs-number">52.795</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - park... <br><span class="hljs-number">21</span>:<span class="hljs-number">11</span>:<span class="hljs-number">53.295</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - unpark... <br><span class="hljs-number">21</span>:<span class="hljs-number">11</span>:<span class="hljs-number">53.295</span> <span class="hljs-selector-attr">[t1]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - 打断状态：true <br></code></pre></td></tr></table></figure><p>如果打断标记已经是 true, 则 park 会失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">rivate <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            log.debug(<span class="hljs-string">&quot;park...&quot;</span>);<br>            LockSupport.park();<br>            log.debug(<span class="hljs-string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());<br>        &#125;<br>    &#125;);<br>    t1.start();<br>    sleep(<span class="hljs-number">1</span>);<br>    t1.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">48.783</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - park... <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.809</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - 打断状态：true <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.812</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - park... <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.813</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - 打断状态：true <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.813</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - park... <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.813</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - 打断状态：true <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.813</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - park... <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.813</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - 打断状态：true <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.813</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - park... <br><span class="hljs-number">21</span>:<span class="hljs-number">13</span>:<span class="hljs-number">49.813</span> <span class="hljs-selector-attr">[Thread-0]</span> c<span class="hljs-selector-class">.TestInterrupt</span> - 打断状态：true <br></code></pre></td></tr></table></figure><blockquote><p>提示</p><p>可以使用 <code>Thread.interrupted()</code> 清除打断状态</p></blockquote><h3 id="不推荐的方法"><a href="#不推荐的方法" class="headerlink" title="不推荐的方法"></a>不推荐的方法</h3><p>还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁</p><table><thead><tr><th>方法名</th><th>static</th><th>功能说明</th></tr></thead><tbody><tr><td>stop()</td><td></td><td>停止线程运行</td></tr><tr><td>suspend()</td><td></td><td>挂起(暂停)线程运行</td></tr><tr><td>resume()</td><td></td><td>恢复线程运行</td></tr></tbody></table><h3 id="主线程与守护线程"><a href="#主线程与守护线程" class="headerlink" title="主线程与守护线程"></a>主线程与守护线程</h3><p>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守</p><p>护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。</p><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">log.debug(<span class="hljs-string">&quot;开始运行...&quot;</span>);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>    log.debug(<span class="hljs-string">&quot;开始运行...&quot;</span>);<br>    sleep(<span class="hljs-number">2</span>);<br>    log.debug(<span class="hljs-string">&quot;运行结束...&quot;</span>);<br>&#125;, <span class="hljs-string">&quot;daemon&quot;</span>);<br><span class="hljs-comment">// 设置该线程为守护线程</span><br>t1.setDaemon(<span class="hljs-literal">true</span>);<br>t1.start();<br>sleep(<span class="hljs-number">1</span>);<br>log.debug(<span class="hljs-string">&quot;运行结束...&quot;</span>);<br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">08</span>:<span class="hljs-number">26</span>:<span class="hljs-number">38.123</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.TestDaemon</span> - 开始运行... <br><span class="hljs-number">08</span>:<span class="hljs-number">26</span>:<span class="hljs-number">38.213</span> <span class="hljs-selector-attr">[daemon]</span> c<span class="hljs-selector-class">.TestDaemon</span> - 开始运行... <br><span class="hljs-number">08</span>:<span class="hljs-number">26</span>:<span class="hljs-number">39.215</span> <span class="hljs-selector-attr">[main]</span> c<span class="hljs-selector-class">.TestDaemon</span> - 运行结束...<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><ul><li>垃圾回收器线程就是一种守护线程</li><li>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求</li></ul></blockquote><h3 id="五种状态-操作系统层面"><a href="#五种状态-操作系统层面" class="headerlink" title="五种状态(操作系统层面)"></a>五种状态(操作系统层面)</h3><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/head/post/image-20220427145741548.png" alt="image-20220427145741548"></p><ul><li>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联</li><li>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</li><li>【运行状态】指获取了 CPU 时间片运行中的状态<ul><li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li></ul></li><li>【阻塞状态】<ul><li>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】</li><li>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li><li>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</li></ul></li><li>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</li></ul><h3 id="六种状态-Thread-State"><a href="#六种状态-Thread-State" class="headerlink" title="六种状态(Thread.State)"></a>六种状态(Thread.State)</h3><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/head/post/image-20220427150032901.png" alt="image-20220427150032901"></p><ul><li><code>NEW</code> 线程刚被创建，但是还没有调用 <code>start()</code> 方法</li><li><code>RUNNABLE</code> 当调用了 <code>start()</code> 方法之后，注意，<strong>Java API</strong> 层面的 <code>RUNNABLE</code> 状态涵盖了 <strong>操作系统</strong> 层面的【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）</li><li><code>BLOCKED</code> ， <code>WAITING</code> ， <code>TIMED_WAITING</code> 都是 <strong>Java API</strong> 层面对【阻塞状态】的细分，后面会在状态转换一节详述</li><li><code>TERMINATED</code> 当线程代码运行结束</li></ul><h3 id="章节习题"><a href="#章节习题" class="headerlink" title="章节习题"></a>章节习题</h3><p>阅读华罗庚《统筹方法》，给出烧水泡茶的多线程解决方案，提示</p><ul><li>参考图二，用两个线程（两个人协作）模拟烧水泡茶过程<ul><li>文中办法乙、丙都相当于任务串行</li><li>而图一相当于启动了 4 个线程，有点浪费</li></ul></li><li>用 sleep(n) 模拟洗茶壶、洗水壶等耗费的时间</li></ul><p>附：华罗庚《统筹方法》</p><blockquote><p>统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复杂的科研项目的组织与管理中，都可以应用。</p><p>怎样应用呢？主要是把工序安排好。</p><p>比如，想泡壶茶喝。当时的情况是：开水没有；水壶要洗，茶壶、茶杯要洗；火已生了，茶叶也有了。怎么</p><p>办？</p><p>办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开</p><p>了，泡茶喝。</p><p>办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡</p><p>茶喝。</p><p>办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡</p><p>茶喝。</p><p>哪一种办法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。</p><p>这是小事，但这是引子，可以引出生产管理等方面有用的方法来。</p><p>水壶不洗，不能烧开水，因而洗水壶是烧开水的前提。没开水、没茶叶、不洗茶壶茶杯，就不能泡茶，因而</p><p>这些又是泡茶的前提。它们的相互关系，可以用下边的箭头图来表示：</p><pre><code class=" mermaid">graph LR;A[洗水壶 1分钟]--&gt;BB[烧开水 15分钟]--&gt;CD[洗茶壶 1分钟]--&gt;CE[洗茶杯 2分钟]--&gt;CF[拿茶叶 1分钟]--&gt;CC[泡茶]</code></pre><p>从这个图上可以一眼看出，办法甲总共要16分钟（而办法乙、丙需要20分钟）。如果要缩短工时、提高工作</p><p>效率，应当主要抓烧开水这个环节，而不是抓拿茶叶等环节。同时，洗茶壶茶杯、拿茶叶总共不过4分钟，大</p><p>可利用“等水开”的时间来做。</p><p>是的，这好像是废话，卑之无甚高论。有如走路要用两条腿走，吃饭要一口一口吃，这些道理谁都懂得。但</p><p>稍有变化，临事而迷的情况，常常是存在的。在近代工业的错综复杂的工艺过程中，往往就不是像泡茶喝这</p><p>么简单了。任务多了，几百几千，甚至有好几万个任务。关系多了，错综复杂，千头万绪，往往出现“万事俱</p><p>备，只欠东风”的情况。由于一两个零件没完成，耽误了一台复杂机器的出厂时间。或往往因为抓的不是关</p><p>键，连夜三班，急急忙忙，完成这一环节之后，还得等待旁的环节才能装配。</p><p>洗茶壶，洗茶杯，拿茶叶，或先或后，关系不大，而且同是一个人的活儿，因而可以合并成为：</p><pre><code class=" mermaid">graph LR;A[洗水壶 1分钟]--&gt;BB[烧开水 15分钟]--&gt;CD[洗茶壶,洗茶杯,拿茶叶 4分钟]--&gt;CC[泡茶]</code></pre><p>看来这是“小题大做”，但在工作环节太多的时候，这样做就非常必要了。</p><p>这里讲的主要是时间方面的事，但在具体生产实践中，还有其他方面的许多事。这种方法虽然不一定能直接</p><p>解决所有问题，但是，我们利用这种方法来考虑问题，也是不无裨益的。</p></blockquote><h4 id="应用之统筹-烧水泡茶"><a href="#应用之统筹-烧水泡茶" class="headerlink" title="应用之统筹(烧水泡茶) *"></a>应用之统筹(烧水泡茶) *</h4><h3 id="章节小结"><a href="#章节小结" class="headerlink" title="章节小结"></a>章节小结</h3><h2 id="共享模型之管程"><a href="#共享模型之管程" class="headerlink" title="共享模型之管程"></a>共享模型之管程</h2><h3 id="本章内容-2"><a href="#本章内容-2" class="headerlink" title="本章内容"></a>本章内容</h3>    <div class="markmap-container" style="height:600px">      <svg data='{"t":"root","d":0,"v":"","c":[{"t":"list_item","d":2,"p":{"lines":[0,1]},"v":"共享问题"},{"t":"list_item","d":2,"p":{"lines":[1,2]},"v":"synchronized"},{"t":"list_item","d":2,"p":{"lines":[2,3]},"v":"线程安全分析"},{"t":"list_item","d":2,"p":{"lines":[3,4]},"v":"Monitor"},{"t":"list_item","d":2,"p":{"lines":[4,5]},"v":"wait/notify"},{"t":"list_item","d":2,"p":{"lines":[5,6]},"v":"线程状态转换"},{"t":"list_item","d":2,"p":{"lines":[6,7]},"v":"活跃性"},{"t":"list_item","d":2,"p":{"lines":[7,8]},"v":"Lock"}],"p":{}}'></svg>    </div>  <h3 id="共享带来的问题"><a href="#共享带来的问题" class="headerlink" title="共享带来的问题"></a>共享带来的问题</h3><h4 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h4><ul><li>老王（操作系统）有一个功能强大的算盘（CPU），现在想把它租出去，赚一点外快</li><li><img src="/JUC/image-20220526231636048.png" alt="image-20220526231636048"></li><li>小南、小女（线程）来使用这个算盘来进行一些计算，并按照时间给老王支付费用</li><li>但小南不能一天24小时使用算盘，他经常要小憩一会（sleep），又或是去吃饭上厕所（阻塞 io 操作），有时还需要一根烟，没烟时思路全无（wait）这些情况统称为（阻塞）</li><li><img src="/JUC/image-20220526231655155.png" alt="image-20220526231655155"></li><li>在这些时候，算盘没利用起来（不能收钱了），老王觉得有点不划算</li><li>另外，小女也想用用算盘，如果总是小南占着算盘，让小女觉得不公平</li><li>于是，老王灵机一动，想了个办法 [ 让他们每人用一会，轮流使用算盘 ]</li><li>这样，当小南阻塞的时候，算盘可以分给小女使用，不会浪费，反之亦然</li><li>最近执行的计算比较复杂，需要存储一些中间结果，而学生们的脑容量（工作内存）不够，所以老王申请了一个笔记本（主存），把一些中间结果先记在本上</li><li>计算流程是这样的</li><li><img src="/JUC/image-20220526231727233.png" alt="image-20220526231727233"></li><li>但是由于分时系统，有一天还是发生了事故</li><li>小南刚读取了初始值 0 做了个 +1 运算，还没来得及写回结果</li><li>老王说 [ 小南，你的时间到了，该别人了，记住结果走吧 ]，于是小南念叨着 [ 结果是1，结果是1…] 不甘心地到一边待着去了（上下文切换）</li><li>老王说 [ 小女，该你了 ]，小女看到了笔记本上还写着 0 做了一个 -1 运算，将结果 -1 写入笔记本</li><li>这时小女的时间也用完了，老王又叫醒了小南：[小南，把你上次的题目算完吧]，小南将他脑海中的结果 1 写入了笔记本</li><li><img src="/JUC/image-20220526231808475.png" alt="image-20220526231808475"></li><li>小南和小女都觉得自己没做错，但笔记本里的结果是 1 而不是 0</li></ul><h4 id="Java-的体现"><a href="#Java-的体现" class="headerlink" title="Java 的体现"></a>Java 的体现</h4><p>两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            counter++;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t1&quot;</span>);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>            counter--;<br>        &#125;<br>    &#125;, <span class="hljs-string">&quot;t2&quot;</span>);<br>    t1.start();<br>    t2.start();<br>    t1.join();<br>    t2.join();<br>    log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,counter);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理</p><p>解，必须从字节码来进行分析</p><p>例如对于<code>i++</code>而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">getstatic i <span class="hljs-comment">// 获取静态变量i的值</span><br>iconst_1 <span class="hljs-comment">// 准备常量1</span><br>iadd <span class="hljs-comment">// 自增</span><br>putstatic i <span class="hljs-comment">// 将修改后的值存入静态变量i</span><br></code></pre></td></tr></table></figure><p>而对应<code>i--</code>也是类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">getstatic i <span class="hljs-comment">// 获取静态变量i的值</span><br>iconst_1 <span class="hljs-comment">// 准备常量1</span><br>isub <span class="hljs-comment">// 自减</span><br>putstatic i <span class="hljs-comment">// 将修改后的值存入静态变量i</span><br></code></pre></td></tr></table></figure><p>而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：</p><p><img src="/JUC/image-20220526232014649.png" alt="image-20220526232014649"></p><p>如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：</p><pre><code class=" mermaid">sequenceDiagram　　static i-&gt;&gt;线程1: getstatic i 读取 0　　线程1-&gt;&gt;线程1:iconst_1 准备常数 1　　线程1-&gt;&gt;线程1:iadd 加法，线程内 i = 1　　线程1-&gt;&gt;static i: putstatic i 写入 1　　static i-&gt;&gt;线程1: putstatic i 写入 1</code></pre><h2 id="共享模型之内存"><a href="#共享模型之内存" class="headerlink" title="共享模型之内存"></a>共享模型之内存</h2><h2 id="共享模型之不可变"><a href="#共享模型之不可变" class="headerlink" title="共享模型之不可变"></a>共享模型之不可变</h2>    <style>.markmap-container{display:flex;justify-content:center;margin:0 auto;width:90%;height:500px}.markmap-container svg{width:100%;height:100%}@media(max-width:768px){.markmap-container{height:400px}}</style>    <script src="https://cdn.jsdelivr.net/npm/d3@6"></script>    <script src="https://cdn.jsdelivr.net/npm/markmap-view"></script>    <script> document.querySelectorAll('.markmap-container>svg').forEach(mindmap => markmap.Markmap.create(mindmap, null, JSON.parse(mindmap.getAttribute('data'))))</script>  ]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>原理</category>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
      <tag>并发</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <url>/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>学习计算机的组成部分与原理</p><span id="more"></span><blockquote><p>文档更新于: 2022-4-21 00:48</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计组</tag>
      
      <tag>原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p>学习到计算机与互联网之间的联系</p><span id="more"></span><p>笔记作于:<a href="https://www.bilibili.com/video/BV1c4411d7jb?spm_id_from=333.337.search-card.all.click">计算机网络微课堂</a></p><blockquote><p>文档更新于: 2022-4-21 00:48</p></blockquote>    <div class="markmap-container" style="height:600px">      <svg data='{"t":"root","d":0,"v":"","c":[{"t":"list_item","d":2,"p":{"lines":[0,1]},"v":"概述"},{"t":"list_item","d":2,"p":{"lines":[1,2]},"v":"物理层"},{"t":"list_item","d":2,"p":{"lines":[2,3]},"v":"数字链路层"},{"t":"list_item","d":2,"p":{"lines":[3,4]},"v":"网络层"},{"t":"list_item","d":2,"p":{"lines":[4,5]},"v":"运输层"},{"t":"list_item","d":2,"p":{"lines":[5,6]},"v":"应用层"},{"t":"list_item","d":2,"p":{"lines":[6,7]},"v":"网络安全"},{"t":"list_item","d":2,"p":{"lines":[7,8]},"v":"资源服务"},{"t":"list_item","d":2,"p":{"lines":[8,9]},"v":"无线网络与移动网络"}],"p":{}}'></svg>    </div>  <h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221019832.png" alt="image-20220404221019832"></p><blockquote><p>物理层考虑的是如何才能在连接各种计算机的传输媒体上传输数据比特流   </p></blockquote><h3 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h3><pre><code class=" mermaid">graph TBA((导引型))B((非导引型))C[无线电频谱管理机构]D((同轴电缆))E((双绞线))F((光纤))G((电力线))H((无线电))I((微波))J((红外线))K((可见光))L((单模))M((多模))A--&gt;F--&gt;LA--&gt;EA--&gt;GA--&gt;DF--&gt;MB--&gt;IB--&gt;HB--&gt;JB--&gt;K</code></pre><p>$$<br>D &#x3D; \frac{D_{0}}{1-U}<br>$$</p><h4 id="导引型"><a href="#导引型" class="headerlink" title="导引型"></a>导引型</h4><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221138698.png" alt="image-20220404221138698"></p><ul><li><p>同轴电缆</p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221211366.png" alt="image-20220404221211366"></p></li><li><p>双绞线</p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221236234.png" alt="image-20220404221236234"></p></li><li><p>光纤</p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221305128.png" alt="image-20220404221305128"></p><p><strong>传输的基本原理:</strong></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221349833.png" alt="image-20220404221349833"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221427543.png" alt="image-20220404221427543"></p></li><li><p>电力线</p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220404221440724.png" alt="image-20220404221440724"></p></li></ul><h4 id="非导引型"><a href="#非导引型" class="headerlink" title="非导引型"></a>非导引型</h4><ul><li>无线电波</li><li>微波</li><li>红外线</li><li>可见光</li></ul><h3 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h3><ul><li>串行传输和并行传输</li><li>同步传输和异步传输</li><li>单向通信和双向交替通信和双向同时通信</li></ul><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><p>奈氏准则</p><blockquote><p>在假定的理想条件下，为了避免码间串扰，码元传输速率是有上限的</p></blockquote><p>在带宽为$W(Hz)$的低通信道中，若不考虑噪声影响，则码元传输的最高速率是$2W(码元&#x2F;秒)$  </p><p>香农公式</p><blockquote><p>带宽受限且有高斯白噪声干扰的信道的极限信息传输速率</p><p>公式如下:</p></blockquote><p>$$<br>c &#x3D; W \times  \log_{2}(1 + \frac{S}{N})<br>$$</p><ul><li><p>c:信道的极限信息传输速率（单位：b&#x2F;s）</p></li><li><p>W:信道带宽（单位：Hz）</p></li><li><p>S:信道内所传信号的平均功率</p></li><li><p>N:信道内的高斯噪声功率</p></li><li><p>S&#x2F;N：信噪比，使用分贝（dB）作为度量单位</p><p>信噪比（dB）&#x3D; $10 \times\log_{10}( \frac{S}{N})(dB)$</p></li></ul><hr><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2>    <div class="markmap-container" style="height:600px">      <svg data='{"t":"root","d":0,"v":"","c":[{"t":"list_item","d":2,"p":{"lines":[0,1]},"v":"共同问题","c":[{"t":"list_item","d":4,"p":{"lines":[2,3]},"v":"数据链路和帧","c":[{"t":"list_item","d":6,"p":{"lines":[4,5]},"v":"信道","c":[{"t":"list_item","d":8,"p":{"lines":[5,6]},"v":"点对点信道","c":[{"t":"list_item","d":10,"p":{"lines":[6,7]},"v":"使用一对一的点对点通信方式"}]},{"t":"list_item","d":8,"p":{"lines":[8,9]},"v":"广播信道","c":[{"t":"list_item","d":10,"p":{"lines":[9,10]},"v":"使用一对多的广播通信方式"}]}]}]},{"t":"list_item","d":4,"p":{"lines":[11,12]},"v":"三个基本问题","c":[{"t":"list_item","d":6,"p":{"lines":[13,14]},"v":"数据链路和帧","c":[{"t":"list_item","d":8,"p":{"lines":[15,16]},"v":"数据链路层把网络层交下来的数据构成帧发送到链路上，以及把接收到的帧中的数据取出并上交给网络层"}]},{"t":"list_item","d":6,"p":{"lines":[17,18]},"v":"封装成帧","c":[{"t":"list_item","d":8,"p":{"lines":[19,20]},"v":"帧","c":[{"t":"list_item","d":10,"p":{"lines":[21,22]},"v":"帧头","c":[{"t":"list_item","d":12,"p":{"lines":[23,24]},"v":"目的地址占6字节"},{"t":"list_item","d":12,"p":{"lines":[24,25]},"v":"源地址占6字节"},{"t":"list_item","d":12,"p":{"lines":[25,26]},"v":"类型占2字节"}]},{"t":"list_item","d":10,"p":{"lines":[29,30]},"v":"帧尾","c":[{"t":"list_item","d":12,"p":{"lines":[31,32]},"v":"占4字节"}]}]},{"t":"list_item","d":8,"p":{"lines":[33,34]},"v":"作用","c":[{"t":"list_item","d":10,"p":{"lines":[35,36]},"v":"帧头和帧尾的作用之一就是帧定界"}]}]},{"t":"list_item","d":6,"p":{"lines":[37,38]},"v":"可靠传输"},{"t":"list_item","d":6,"p":{"lines":[39,40]},"v":"差错检测","c":[{"t":"list_item","d":8,"p":{"lines":[41,42]},"v":"定义","c":[{"t":"list_item","d":10,"p":{"lines":[42,43]},"v":"根据帧尾中的检错码检测帧中是否有误码"}]},{"t":"list_item","d":8,"p":{"lines":[44,45]},"v":"比特差错","c":[{"t":"list_item","d":10,"p":{"lines":[45,46]},"v":"1变成0，0变成1"}]},{"t":"list_item","d":8,"p":{"lines":[47,48]},"v":"奇偶检测","c":[{"t":"list_item","d":10,"p":{"lines":[48,49]},"v":"奇偶校验","c":[{"t":"list_item","d":12,"p":{"lines":[49,50]},"v":"在待发送的数据后面添加1位奇偶校验位，使整个数据中&quot;1&quot; 的个数为奇数(奇校验)或偶数(偶校验)"}]},{"t":"list_item","d":10,"p":{"lines":[51,52]},"v":"奇校验的奇性改变可检出错误，偶校验的偶性改变可检测出错误"}]},{"t":"list_item","d":8,"p":{"lines":[53,54]},"v":"循环冗余校验CRC","c":[{"t":"list_item","d":10,"p":{"lines":[54,55]},"v":"生成多项式","c":[{"t":"list_item","d":12,"p":{"lines":[55,56]},"v":"构成的比特串长度为最高位数+1"},{"t":"list_item","d":12,"p":{"lines":[56,57]},"v":"x^4+x^2+x+1的比特串为10111"}]},{"t":"list_item","d":10,"p":{"lines":[58,59]},"v":"计算步骤","c":[{"t":"list_item","d":12,"p":{"lines":[59,60]},"v":"构造被除数","c":[{"t":"list_item","d":14,"p":{"lines":[60,61]},"v":"带发送信息后面添加生成多项式最高次数个0"}]},{"t":"list_item","d":12,"p":{"lines":[62,63]},"v":"构造除数","c":[{"t":"list_item","d":14,"p":{"lines":[63,64]},"v":"生成多项式各项系数构成的比特串"}]},{"t":"list_item","d":12,"p":{"lines":[65,66]},"v":"异或"},{"t":"list_item","d":12,"p":{"lines":[66,67]},"v":"检查余数","c":[{"t":"list_item","d":14,"p":{"lines":[67,68]},"v":"余数的位数应与生成多项式最高次数相同"},{"t":"list_item","d":14,"p":{"lines":[68,69]},"v":"不够则在余数前补0来凑足位数"}]}]},{"t":"list_item","d":10,"p":{"lines":[70,71]},"v":"校验过程","c":[{"t":"list_item","d":12,"p":{"lines":[71,72]},"v":"接受到的信息就是被除数"}]}]}]}]}]},{"t":"list_item","d":2,"p":{"lines":[73,74]},"v":"点对点协议PPP","c":[{"t":"list_item","d":4,"p":{"lines":[75,76]},"v":"PPP协议的特点"},{"t":"list_item","d":4,"p":{"lines":[76,77]},"v":"PPP协议的帧格式"},{"t":"list_item","d":4,"p":{"lines":[77,78]},"v":"PPP协议的工作状态"}]},{"t":"list_item","d":2,"p":{"lines":[79,80]},"v":"使用广播信道的数据链路层","c":[{"t":"list_item","d":4,"p":{"lines":[81,82]},"v":"局域网的数据链路层"},{"t":"list_item","d":4,"p":{"lines":[82,83]},"v":"CSMA/CD协议"},{"t":"list_item","d":4,"p":{"lines":[83,84]},"v":"使用集线器的星形拓扑"},{"t":"list_item","d":4,"p":{"lines":[84,85]},"v":"以太网的信道利用率"},{"t":"list_item","d":4,"p":{"lines":[85,86]},"v":"以太网的MAC层"}]},{"t":"list_item","d":2,"p":{"lines":[87,88]},"v":"扩展的以太网","c":[{"t":"list_item","d":4,"p":{"lines":[89,90]},"v":"在物理层拓展以太网"},{"t":"list_item","d":4,"p":{"lines":[90,91]},"v":"在数据链路层拓展以太网"},{"t":"list_item","d":4,"p":{"lines":[91,92]},"v":"虚拟局域网"}]},{"t":"list_item","d":2,"p":{"lines":[93,94]},"v":"高速以太网","c":[{"t":"list_item","d":4,"p":{"lines":[95,96]},"v":"100BASE-T以太网"},{"t":"list_item","d":4,"p":{"lines":[96,97]},"v":"吉比特以太网"},{"t":"list_item","d":4,"p":{"lines":[97,98]},"v":"10吉比特以太网(10GbE)和更快的以太网"},{"t":"list_item","d":4,"p":{"lines":[98,99]},"v":"使用以太网进行宽带接入"}]}],"p":{}}'></svg>    </div>  <ul><li><strong>链路：</strong>是从一个节点到相邻节点的一段物理线路，而中间没有任何其他的交换节点</li><li><strong>数据链路：</strong>是指把实现通信协议的硬件和软件加到链路上，就构成了数据链路</li><li>数据链路层以<strong>帧</strong>为单位传输和处理数据</li></ul><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405141259770.png" alt="image-20220405141259770"></p><p>数据链路层的三个<strong>重要问题</strong>：</p><pre><code class=" mermaid">graph TBA[封装成帧]B[差错检测]C[可靠传输]</code></pre><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405141632160.png" alt="image-20220405141632160"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405142145953.png" alt="image-20220405142145953"></p><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405142608810.png" alt="image-20220405142608810"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405143150591.png" alt="image-20220405143150591"></p><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405143538755.png" alt="image-20220405143538755"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405143815777.png" alt="image-20220405143815777"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405143825954.png" alt="image-20220405143825954"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405144454075.png" alt="image-20220405144454075"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405144912708.png" alt="image-20220405144912708"></p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405145601997.png" alt="image-20220405145601997"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405145711987.png" alt="image-20220405145711987"></p><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405145736130.png" alt="image-20220405145736130"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405152459599.png" alt="image-20220405152459599"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405152705661.png" alt="image-20220405152705661"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405152959877.png" alt="image-20220405152959877"></p><p><strong>信道利用率$U &#x3D; \frac{T_{D}}{T_{D}+RTT+T_{A}}$</strong></p><h4 id="停止-等待"><a href="#停止-等待" class="headerlink" title="停止-等待"></a>停止-等待</h4><h4 id="回退N帧"><a href="#回退N帧" class="headerlink" title="回退N帧"></a>回退N帧</h4><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405160833629.png" alt="image-20220405160833629"></p><h4 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h4><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405161018641.png" alt="image-20220405161018641"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220405162435452.png" alt="image-20220405162435452"></p><h3 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h3><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406125912541.png" alt="image-20220406125912541"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406130104301.png" alt="image-20220406130104301"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406130259894.png" alt="image-20220406130259894"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406131031700.png" alt="image-20220406131031700"></p><h3 id="媒体接入控制"><a href="#媒体接入控制" class="headerlink" title="媒体接入控制"></a>媒体接入控制</h3><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406132515654.png" alt="image-20220406132515654"></p><h4 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h4><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406134539120.png" alt="image-20220406134539120"></p><h4 id="动态接入"><a href="#动态接入" class="headerlink" title="动态接入"></a>动态接入</h4><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406142211890.png" alt="image-20220406142211890"></p><p><img src="/2022/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20220406142235698.png" alt="image-20220406142235698"></p>    <style>.markmap-container{display:flex;justify-content:center;margin:0 auto;width:90%;height:500px}.markmap-container svg{width:100%;height:100%}@media(max-width:768px){.markmap-container{height:400px}}</style>    <script src="https://cdn.jsdelivr.net/npm/d3@6"></script>    <script src="https://cdn.jsdelivr.net/npm/markmap-view"></script>    <script> document.querySelectorAll('.markmap-container>svg').forEach(mindmap => markmap.Markmap.create(mindmap, null, JSON.parse(mindmap.getAttribute('data'))))</script>  ]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原理</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ使用出现的问题</title>
    <link href="/2022/04/19/RocketMQ%E4%BD%BF%E7%94%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/19/RocketMQ%E4%BD%BF%E7%94%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>记录一下在VM的docker上部署RocketMQ遇到的问题</p><span id="more"></span><blockquote><p>文档更新于: 2022-4-21 00:48</p></blockquote><p>在虚拟机部署集群的时候，出现了在Java中无法连接RocketMQ的问题  </p><p>在网上找到了一些资料，用编排部署了一次，结果连控制台都无法连接NameServer，并爆出以下错误：</p><p><img src="/2022/04/19/RocketMQ%E4%BD%BF%E7%94%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image-20220419202504198.png" alt="image-20220419202504198"></p><p>connect to <a href="xxxxx:10909">xxxxx:10909</a> failed</p><p>一想就觉得是配置有问题，但是这个镜像没有了解过，所以我打算单独进入镜像查看配置等等。</p><p>但是进去后发现只有一个jar包，检查不了配置，就不了了之了，后面再来解决，暂时跟老师一样，使用单机部署，测试。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>问题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MQ</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初次使用Hexo</title>
    <link href="/2022/04/19/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo/"/>
    <url>/2022/04/19/%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo/</url>
    
    <content type="html"><![CDATA[<p>记录自己部署Hexo的过程</p><span id="more"></span><blockquote><p>文档更新于: 2022-4-21 00:48</p></blockquote><h2 id="为什么使用Hexo？"><a href="#为什么使用Hexo？" class="headerlink" title="为什么使用Hexo？"></a>为什么使用Hexo？</h2><p>在最开始，想把学习的过程记录下来，但是孤零零的文档，看起来很单调，也不方便我在手机或者其他地方随时浏览文档，所以便想到了部署个人博客的方法，既能记录生活，也能够存放笔记什么的，在后续管理起来也方便，后续的想法就是买一个域名和服务器，自己搞一个自己的博客。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java虚拟机</title>
    <link href="/2022/04/19/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2022/04/19/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>学会JVM的原理和调优</p><span id="more"></span><blockquote><p>文档更新于: 2022-4-21 00:48</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>底层</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ</title>
    <link href="/2022/04/18/RocketMQ/"/>
    <url>/2022/04/18/RocketMQ/</url>
    
    <content type="html"><![CDATA[<p><strong>了解RocketMQ的原理和使用</strong></p><span id="more"></span><p>笔记作于:<a href="https://www.bilibili.com/video/BV1cf4y157sz?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">【尚硅谷】RocketMQ教程丨深度掌握MQ消息中间件</a></p><blockquote><p>文档更新于: 2022-4-21 10:23</p></blockquote>    <div class="markmap-container" style="height:600px">      <svg data='{"t":"root","d":0,"v":"","c":[{"t":"list_item","d":2,"p":{"lines":[0,1]},"v":"概述","c":[{"t":"list_item","d":4,"p":{"lines":[1,2]},"v":"MQ概述","c":[{"t":"list_item","d":6,"p":{"lines":[2,3]},"v":"限流削峰"},{"t":"list_item","d":6,"p":{"lines":[3,4]},"v":"异步解耦"},{"t":"list_item","d":6,"p":{"lines":[4,5]},"v":"数据收集"}]},{"t":"list_item","d":4,"p":{"lines":[5,6]},"v":"常见产品"}]},{"t":"list_item","d":2,"p":{"lines":[6,7]},"v":"安装与启动","c":[{"t":"list_item","d":4,"p":{"lines":[7,8]},"v":"基本概念"},{"t":"list_item","d":4,"p":{"lines":[8,9]},"v":"系统架构"},{"t":"list_item","d":4,"p":{"lines":[9,10]},"v":"单机与集群"},{"t":"list_item","d":4,"p":{"lines":[10,11]},"v":"控制台的使用"},{"t":"list_item","d":4,"p":{"lines":[11,12]},"v":"扩展：磁盘阵列"}]},{"t":"list_item","d":2,"p":{"lines":[12,13]},"v":"原理","c":[{"t":"list_item","d":4,"p":{"lines":[13,14]},"v":"消息的生产、存储、消费"},{"t":"list_item","d":4,"p":{"lines":[14,15]},"v":"indexFile"},{"t":"list_item","d":4,"p":{"lines":[15,16]},"v":"订阅关系的一致性"},{"t":"list_item","d":4,"p":{"lines":[16,17]},"v":"offset管理"},{"t":"list_item","d":4,"p":{"lines":[17,18]},"v":"消息的幂等、堆积、延迟"},{"t":"list_item","d":4,"p":{"lines":[18,19]},"v":"消息的清理"}]},{"t":"list_item","d":2,"p":{"lines":[20,21]},"v":"应用","c":[{"t":"list_item","d":4,"p":{"lines":[21,22]},"v":"普通消息、延时消息、事务消息"},{"t":"list_item","d":4,"p":{"lines":[22,23]},"v":"延时消息"},{"t":"list_item","d":4,"p":{"lines":[23,24]},"v":"批量消息"},{"t":"list_item","d":4,"p":{"lines":[24,25]},"v":"消息过滤"},{"t":"list_item","d":4,"p":{"lines":[25,26]},"v":"发送重试与消费重试"},{"t":"list_item","d":4,"p":{"lines":[26,27]},"v":"死信队列"}]}],"p":{}}'></svg>    </div>  <h2 id="第一章-RocketMQ概述"><a href="#第一章-RocketMQ概述" class="headerlink" title="第一章 RocketMQ概述"></a>第一章 RocketMQ概述</h2><h3 id="一、-MQ概述"><a href="#一、-MQ概述" class="headerlink" title="一、 MQ概述"></a>一、 MQ概述</h3><h4 id="1、MQ简介"><a href="#1、MQ简介" class="headerlink" title="1、MQ简介"></a>1、MQ简介</h4><p>MQ，Message Queue，是一种提供消息队列服务的中间件，也称为消息中间件，是一套提供了消息生产、存储、消费全过程API的软件系统。消息即数据。一般消息的体量不会很大。</p><h4 id="2、MQ用途"><a href="#2、MQ用途" class="headerlink" title="2、MQ用途"></a>2、MQ用途</h4><p>从网上可以查看到很多的关于MQ用途的叙述，但总结起来其实就以下三点。</p><ul><li><p><strong>限流削峰</strong></p><ul><li>MQ可以将系统的超量请求暂存其中，以便系统后期可以慢慢进行处理，从而避免了请求的丢失或系统被压垮。</li></ul><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img1.png" alt="img1"></p></li><li><p><strong>异步解耦</strong></p><ul><li>上游系统对下游系统的调用若为同步调用，则会大大降低系统的吞吐量与并发度，且系统耦合度太高。而异步调用则会解决这些问题。所以两层之间若要实现由同步到异步的转化，一般性做法就是，在这两层间添加一个MQ层。</li></ul><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img2.png" alt="img2"></p></li><li><p><strong>数据收集</strong></p><ul><li>分布式系统会产生海量级数据流，如：业务日志、监控数据、用户行为等。针对这些数据流进行实时或批量采集汇总，然后对这些数据流进行大数据分析，这是当前互联网平台的必备技术。通过MQ完成此类数据收集是最好的选择。</li></ul></li></ul><h4 id="3、常见MQ产品"><a href="#3、常见MQ产品" class="headerlink" title="3、常见MQ产品"></a>3、常见MQ产品</h4><ul><li>ActiveMQ<ul><li>ActiveMQ是使用Java语言开发一款MQ产品。早期很多公司与项目中都在使用。但现在的社区活跃度已经很低。现在的项目中已经很少使用了。</li></ul></li><li>RabbitMQ<ul><li>RabbitMQ是使用ErLang语言开发的一款MQ产品。其吞吐量较Kafka与RocketMQ要低，且由于其不是Java语言开发，所以公司内部对其实现定制化开发难度较大。</li></ul></li><li>Kafka<ul><li>Kafka是使用Scala&#x2F;Java语言开发的一款MQ产品。其最大的特点就是高吞吐率，常用于大数据领域的实时计算、日志采集等场景。其没有遵循任何常见的MQ协议，而是使用自研协议。对于Spring CloudNetçix，其仅支持RabbitMQ与Kafka。</li></ul></li><li>RocketMQ<ul><li>RocketMQ是使用Java语言开发的一款MQ产品。经过数年阿里双 11 的考验，性能与稳定性非常高。其没有遵循任何常见的MQ协议，而是使用自研协议。对于Spring Cloud Alibaba，其支持RabbitMQ、Kafka，但提倡使用RocketMQ。</li></ul></li></ul><p><strong>对比</strong></p><table><thead><tr><th align="center"><strong>关键词</strong></th><th align="center"><strong>ACTIVEMQ</strong></th><th align="center"><strong>RABBITMQ</strong></th><th align="center"><strong>KAFKA</strong></th><th align="center"><strong>ROCKETMQ</strong></th></tr></thead><tbody><tr><td align="center">开发语言</td><td align="center">Java</td><td align="center">ErLang</td><td align="center">Java</td><td align="center">Java</td></tr><tr><td align="center">单机吞吐量</td><td align="center">万级</td><td align="center">万级</td><td align="center">十万级</td><td align="center">十万级</td></tr><tr><td align="center">Topic</td><td align="center">-</td><td align="center">-</td><td align="center">百级Topic时会影响系统吞吐量</td><td align="center">千级Topic时会影响系统吞吐</td></tr><tr><td align="center">社区活跃度</td><td align="center">低</td><td align="center">高</td><td align="center">高</td><td align="center">高</td></tr></tbody></table><h4 id="4、MQ常见协议"><a href="#4、MQ常见协议" class="headerlink" title="4、MQ常见协议"></a>4、MQ常见协议</h4><h5 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h5><blockquote><p>JMS，Java Messaging Service（Java消息服务）。是Java平台上有关MOM（Message OrientedMiddleware，面向消息的中间件 PO&#x2F;OO&#x2F;AO）的技术规范，它便于消息系统中的Java应用程序进行消息交换，并且通过提供标准的产生、发送、接收消息的接口，简化企业应用的开发。ActiveMQ是该协议的典型实现。</p></blockquote><h5 id="STOMP"><a href="#STOMP" class="headerlink" title="STOMP"></a>STOMP</h5><blockquote><p>STOMP，Streaming Text Orientated Message Protocol（面向流文本的消息协议），是一种MOM设计的简单文本协议。STOMP提供一个可互操作的连接格式，允许客户端与任意STOMP消息代理（Broker）进行交互。ActiveMQ是该协议的典型实现，RabbitMQ通过插件可以支持该协议。</p></blockquote><h5 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h5><blockquote><p>AMQP，Advanced Message Queuing Protocol（高级消息队列协议），一个提供统一消息服务的应用层标准，是应用层协议的一个开放标准，是一种MOM设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端&#x2F;中间件不同产品，不同开发语言等条件的限制。 RabbitMQ是该协议的典型实现。</p></blockquote><h5 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h5><blockquote><p>MQTT，Message Queuing Telemetry Transport（消息队列遥测传输），是IBM开发的一个即时通讯协议，是一种二进制协议，主要用于服务器和低功耗IoT（物联网）设备间的通信。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和致动器的通信协议。 RabbitMQ通过插件可以支持该协议。</p></blockquote><h3 id="二、-RocketMQ概述"><a href="#二、-RocketMQ概述" class="headerlink" title="二、 RocketMQ概述"></a>二、 RocketMQ概述</h3><h4 id="1、-RocketMQ简介"><a href="#1、-RocketMQ简介" class="headerlink" title="1、 RocketMQ简介"></a>1、 RocketMQ简介</h4><blockquote><p>RocketMQ是一个统一消息引擎、轻量级数据处理平台。RocketMQ是一款阿里巴巴开源的消息中间件。 2016 年 11 月 28 日，阿里巴巴向 Apache 软件基金会捐赠RocketMQ，成为 Apache 孵化项目。 2017 年 9 月 25 日，Apache 宣布 RocketMQ孵化成为 Apache 顶级项目（TLP ），成为国内首个互联网中间件在 Apache 上的顶级项目。</p></blockquote><p>官网地址：<a href="http://rocketmq.apache.org/">http://rocketmq.apache.org</a></p><h4 id="2、-RocketMQ发展历程"><a href="#2、-RocketMQ发展历程" class="headerlink" title="2、 RocketMQ发展历程"></a>2、 RocketMQ发展历程</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img3.png" alt="img3"></p><ul><li>2007 年，阿里开始五彩石项目，Notify作为项目中交易核心消息流转系统，应运而生。Notify系统是RocketMQ的雏形。</li><li>2010 年，B2B大规模使用ActiveMQ作为阿里的消息内核。阿里急需一个具有海量堆积能力的消息系统。</li><li>2011 年初，Kafka开源。淘宝中间件团队在对Kafka进行了深入研究后，开发了一款新的MQ，MetaQ。</li><li>2012 年，MetaQ发展到了v3.0版本，在它基础上进行了进一步的抽象，形成了RocketMQ，然后就将其进行了开源。</li><li>2015 年，阿里在RocketMQ的基础上，又推出了一款专门针对阿里云上用户的消息系统Aliware MQ。</li><li>2016 年双十一，RocketMQ承载了万亿级消息的流转，跨越了一个新的里程碑。 11 月 28 日，阿里巴巴向 Apache 软件基金会捐赠 RocketMQ，成为 Apache 孵化项目。</li><li>2017 年 9 月 25 日，Apache 宣布 RocketMQ孵化成为 Apache 顶级项目（TLP ），成为国内首个互联网中间件在 Apache 上的顶级项目。</li></ul><h2 id="第二章-RocketMQ的安装与启动"><a href="#第二章-RocketMQ的安装与启动" class="headerlink" title="第二章 RocketMQ的安装与启动"></a>第二章 RocketMQ的安装与启动</h2><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><h4 id="1-消息-Message"><a href="#1-消息-Message" class="headerlink" title="1 消息 (Message)"></a>1 消息 (Message)</h4><blockquote><p>消息是指，消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。</p></blockquote><h4 id="2-主题-Topic"><a href="#2-主题-Topic" class="headerlink" title="2 主题 (Topic)"></a>2 主题 (Topic)</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img4.png" alt="img4"></p><p>Topic表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。 topic:message 1:n message:topic 1:1    </p><p>一个生产者可以同时发送多种Topic的消息；而一个消费者只对某种特定的Topic感兴趣，即只可以订阅 和消费一种Topic的消息。</p><p> producer:topic 1:n  consumer:topic 1:1</p><h4 id="3-标签-Tag"><a href="#3-标签-Tag" class="headerlink" title="3  标签 (Tag)"></a>3  标签 (Tag)</h4><blockquote><p>为消息设置的标签，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。</p></blockquote><p>Topic是消息的一级分类，Tag是消息的二级分类。</p><ul><li>Topic：货物<ul><li>tag&#x3D;上海</li><li>tag&#x3D;江苏</li><li>tag&#x3D;浙江</li></ul></li></ul><p><strong>——消费者——</strong></p><ul><li>topic&#x3D;货物 tag&#x3D;上海</li><li>topic&#x3D;货物 tag&#x3D;上海|浙江</li><li>topic&#x3D;货物 tag&#x3D;*</li></ul><h4 id="4-队列-Queue"><a href="#4-队列-Queue" class="headerlink" title="4 队列 (Queue)"></a>4 队列 (Queue)</h4><p>存储消息的物理实体。一个Topic中可以包含多个Queue，每个Queue中存放的就是该Topic的消息。一个Topic的Queue也被称为一个Topic中消息的分区（Partition）。</p><p>一个Topic的Queue中的消息只能被一个消费者组中的一个消费者消费。一个Queue中的消息不允许同一个消费者组中的多个消费者同时消费。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img5.png" alt="img5"></p><p>在学习参考其它相关资料时，还会看到一个概念：分片（Sharding）。分片不同于分区。在RocketMQ中，分片指的是存放相应Topic的Broker。每个分片中会创建出相应数量的分区，即Queue，每个Queue的大小都是相同的。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img6.png" alt="img6"></p><h4 id="5-消息标识-MessageId-x2F-Key"><a href="#5-消息标识-MessageId-x2F-Key" class="headerlink" title="5 消息标识(MessageId&#x2F;Key)"></a>5 消息标识(MessageId&#x2F;Key)</h4><p>RocketMQ中每个消息拥有唯一的MessageId，且可以携带具有业务标识的Key，以方便对消息的查询。不过需要注意的是，MessageId有两个：在生产者send()消息时会自动生成一个MessageId（msgId)，当消息到达Broker后，Broker也会自动生成一个MessageId(offsetMsgId)。msgId、offsetMsgId与key都称为消息标识。</p><ul><li>msgId：由producer端生成，其生成规则为：producerIp + 进程pid + MessageClientIDSetter类的ClassLoader的hashCode +当前时间 + AutomicInteger自增计数器</li><li>offsetMsgId：由broker端生成，其生成规则为：brokerIp + 物理分区的offset（Queue中的偏移量）</li><li>key：由用户指定的业务相关的唯一标识</li></ul><h3 id="二、系统架构"><a href="#二、系统架构" class="headerlink" title="二、系统架构"></a>二、系统架构</h3><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img7.png" alt="img7"></p><p>RocketMQ架构上主要分为四部分构成：</p><h4 id="1-Producer"><a href="#1-Producer" class="headerlink" title="1 Producer"></a>1 Producer</h4><p>消息生产者，负责生产消息。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消息投 递，投递的过程支持快速失败并且低延迟。</p><blockquote><p>例如，业务系统产生的日志写入到MQ的过程，就是消息生产的过程</p><p>再如，电商平台中用户提交的秒杀请求写入到MQ的过程，就是消息生产的过程</p></blockquote><p>RocketMQ中的消息生产者都是以生产者组（Producer Group）的形式出现的。生产者组是同一类生产者的集合，这类Producer发送相同Topic类型的消息。一个生产者组可以同时发送多个主题的消息。</p><h4 id="2-Consumer"><a href="#2-Consumer" class="headerlink" title="2 Consumer"></a>2 Consumer</h4><p>消息消费者，负责消费消息。一个消息消费者会从Broker服务器中获取到消息，并对消息进行相关业务处理。</p><blockquote><p>例如，QoS系统从MQ中读取日志，并对日志进行解析处理的过程就是消息消费的过程。</p><p>再如，电商平台的业务系统从MQ中读取到秒杀请求，并对请求进行处理的过程就是消息消费的过程。</p></blockquote><p>RocketMQ中的消息消费者都是以消费者组（Consumer Group）的形式出现的。消费者组是同一类消费者的集合，这类Consumer消费的是同一个Topic类型的消息。消费者组使得在消息消费方面，实现负载均衡（将一个Topic中的不同的Queue平均分配给同一个Consumer Group的不同的Consumer，注意，并不是将消息负载均衡）和容错（一个Consmer挂了，该Consumer Group中的其它Consumer可以接着消费原Consumer消费的Queue）的目标变得非常容易。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img8.png" alt="img8"></p><p>消费者组中Consumer的数量应该小于等于订阅Topic的Queue数量。如果超出Queue数量，则多出的Consumer将不能消费消息。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img9.png" alt="img9"></p><p>不过，一个Topic类型的消息可以被多个消费者组同时消费。</p><blockquote><p><strong>注意</strong></p><ol><li>消费者组只能消费一个Topic的消息，不能同时消费多个Topic消息</li><li>一个消费者组中的消费者必须订阅完全相同的Topic</li></ol></blockquote><h4 id="3-Name-Server"><a href="#3-Name-Server" class="headerlink" title="3 Name Server"></a>3 Name Server</h4><h5 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h5><p>NameServer是一个Broker与Topic路由的注册中心，支持Broker的动态注册与发现。</p><p>RocketMQ的思想来自于Kafka，而Kafka是依赖了Zookeeper的。所以，在RocketMQ的早期版本，即在MetaQ v1.0与v2.0版本中，也是依赖于Zookeeper的。从MetaQ v3.0，即RocketMQ开始去掉了Zookeeper依赖，使用了自己的NameServer。</p><h5 id="主要包括两个功能"><a href="#主要包括两个功能" class="headerlink" title="主要包括两个功能:"></a>主要包括两个功能:</h5><ul><li><code>Broker管理：</code>接受Broker集群的注册信息并且保存下来作为路由信息的基本数据；提供心跳检测机制，检查Broker是否还存活。</li><li><code>路由信息管理：</code>每个NameServer中都保存着Broker集群的整个路由信息和用于客户端查询的队列信息。Producer和Conumser通过NameServer可以获取整个Broker集群的路由信息，从而进行消息的投递和消费。</li></ul><h5 id="路由注册"><a href="#路由注册" class="headerlink" title="路由注册"></a>路由注册</h5><p>NameServer通常也是以集群的方式部署，不过，NameServer是无状态的，即NameServer集群中的各个节点间是无差异的，各节点间相互不进行信息通讯。那各节点中的数据是如何进行数据同步的呢？在Broker节点启动时，轮询NameServer列表，与每个NameServer节点建立长连接，发起注册请求。在NameServer内部维护着一个Broker列表，用来动态存储Broker的信息。</p><blockquote><p><strong>注意</strong></p><p>这是与其它像zk、Eureka、Nacos等注册中心不同的地方。<br>这种NameServer的无状态方式，有什么优缺点：<br>优点：NameServer集群搭建简单，扩容简单。<br>缺点：对于Broker，必须明确指出所有NameServer地址。否则未指出的将不会去注册。也正因为如此，NameServer并不能随便扩容。因为，若Broker不重新配置，新增的NameServer对于Broker来说是不可见的，其不会向这个NameServer进行注册。</p></blockquote><p>Broker节点为了证明自己是活着的，为了维护与NameServer间的长连接，会将最新的信息以心跳包的方式上报给NameServer，每 30 秒发送一次心跳。心跳包中包含 BrokerId、Broker地址(IP+Port)、Broker名称、Broker所属集群名称等等。NameServer在接收到心跳包后，会更新心跳时间戳，记录这个Broker的最新存活时间。</p><h5 id="路由剔除"><a href="#路由剔除" class="headerlink" title="路由剔除"></a>路由剔除</h5><p>由于Broker关机、宕机或网络抖动等原因，NameServer没有收到Broker的心跳，NameServer可能会将其从Broker列表中剔除。</p><p>NameServer中有一个定时任务，每隔 10 秒就会扫描一次Broker表，查看每一个Broker的最新心跳时间戳距离当前时间是否超过 120 秒，如果超过，则会判定Broker失效，然后将其从Broker列表中剔除。</p><blockquote><p><strong>扩展</strong></p><p>对于RocketMQ日常运维工作，例如Broker升级，需要停掉Broker的工作。OP需要怎么做？<br>OP需要将Broker的读写权限禁掉。一旦client(Consumer或Producer)向broker发送请求，都会收到broker的NO_PERMISSION响应，然后client会进行对其它Broker的重试。<br>当OP观察到这个Broker没有流量后，再关闭它，实现Broker从NameServer的移除。<br><strong>OP</strong>：运维工程师<br><strong>SRE</strong>：Site Reliability Engineer，现场可靠性工程师</p></blockquote><h5 id="路由发现"><a href="#路由发现" class="headerlink" title="路由发现"></a>路由发现</h5><p>RocketMQ的路由发现采用的是Pull模型。当Topic路由信息出现变化时，NameServer不会主动推送给客户端，而是客户端定时拉取主题最新的路由。默认客户端每 30 秒会拉取一次最新的路由。</p><blockquote><p><strong>扩展</strong></p><ol><li>Push模型：推送模型。其实时性较好，是一个“发布-订阅”模型，需要维护一个长连接。而长连接的维护是需要资源成本的。该模型适合于的场景：<ul><li>实时性要求较高</li><li>Client数量不多，Server数据变化较频繁</li></ul></li><li>Pull模型：拉取模型。存在的问题是，实时性较差。</li><li>Long Polling模型：<strong>长轮询模型</strong>。其是对Push与Pull模型的整合，充分利用了这两种模型的优势，屏蔽了它们的劣势。</li></ol></blockquote><h5 id="客户端NameServer选择策略"><a href="#客户端NameServer选择策略" class="headerlink" title="客户端NameServer选择策略"></a>客户端NameServer选择策略</h5><blockquote><p>这里的客户端指的是Producer与Consumer</p></blockquote><p>客户端在配置时必须要写上NameServer集群的地址，那么客户端到底连接的是哪个NameServer节点呢？客户端首先会生产一个随机数，然后再与NameServer节点数量取模，此时得到的就是所要连接的节点索引，然后就会进行连接。如果连接失败，则会采用round-robin策略，逐个尝试着去连接其它节点。</p><p>首先采用的是<code>随机策略</code>进行的选择，失败后采用的是<code>轮询策略</code>。</p><blockquote><p><strong>扩展</strong></p><p>Zookeeper Client是如何选择Zookeeper Server的？<br>简单来说就是，经过两次Shuffie，然后选择第一台Zookeeper Server。<br>详细说就是，将配置文件中的zk server地址进行第一次<strong>shuffie</strong>，然后随机选择一个。这个选择出的一般都是一个hostname。然后获取到该hostname对应的所有ip，再对这些ip进行第二次shuffie，从shufæe过的结果中取第一个server地址进行连接。</p></blockquote><h4 id="4-Broker"><a href="#4-Broker" class="headerlink" title="4 Broker"></a>4 Broker</h4><h5 id="功能介绍-1"><a href="#功能介绍-1" class="headerlink" title="功能介绍"></a>功能介绍</h5><p>Broker充当着消息中转角色，负责存储消息、转发消息。Broker在RocketMQ系统中负责接收并存储从生产者发送来的消息，同时为消费者的拉取请求作准备。Broker同时也存储着消息相关的元数据，包括消费者组消费进度偏移offset、主题、队列等。</p><blockquote><p>Kafka 0.8版本之后，offset是存放在Broker中的，之前版本是存放在Zookeeper中的。</p></blockquote><h5 id="模块构成"><a href="#模块构成" class="headerlink" title="模块构成"></a>模块构成</h5><p>下图为Broker Server的功能模块示意图。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img10.png" alt="img10"></p><p><code>Remoting Module</code>：整个Broker的实体，负责处理来自clients端的请求。而这个Broker实体则由以下模块构成。</p><p><code>Client Manager：</code>客户端管理器。负责接收、解析客户端(Producer&#x2F;Consumer)请求，管理客户端。例如，维护Consumer的Topic订阅信息</p><p><code>Store Service：</code>存储服务。提供方便简单的API接口，处理消息存储到物理硬盘和消息查询功能。</p><p><code>HA Service：</code>高可用服务，提供Master Broker 和 Slave Broker之间的数据同步功能。</p><p><code>Index Service：</code>索引服务。根据特定的Message key，对投递到Broker的消息进行索引服务，同时也提供根据Message Key对消息进行快速查询的功能。</p><h5 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img11.png" alt="img11"></p><p>为了增强Broker性能与吞吐量，Broker一般都是以集群形式出现的。各集群节点中可能存放着相同Topic的不同Queue。不过，这里有个问题，如果某Broker节点宕机，如何保证数据不丢失呢？其解决方案是，将每个Broker集群节点进行横向扩展，即将Broker节点再建为一个HA集群，解决单点问题。</p><p>Broker节点集群是一个主从集群，即集群中具有Master与Slave两种角色。Master负责处理读写操作请求，Slave负责对Master中的数据进行备份。当Master挂掉了，Slave则会自动切换为Master去工作。所以这个Broker集群是主备集群。一个Master可以包含多个Slave，但一个Slave只能隶属于一个Master。Master与Slave 的对应关系是通过指定相同的BrokerName、不同的BrokerId 来确定的。BrokerId为 0 表示Master，非 0 表示Slave。每个Broker与NameServer集群中的所有节点建立长连接，定时注册Topic信息到所有NameServer。</p><h4 id="5-工作流程"><a href="#5-工作流程" class="headerlink" title="5 工作流程"></a>5 工作流程</h4><h5 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h5><ol><li>启动NameServer，NameServer启动后开始监听端口，等待Broker、Producer、Consumer连接。</li><li>启动Broker时，Broker会与所有的NameServer建立并保持长连接，然后每 30 秒向NameServer定时发送心跳包。</li><li>发送消息前，可以先创建Topic，创建Topic时需要指定该Topic要存储在哪些Broker上，当然，在创建Topic时也会将Topic与Broker的关系写入到NameServer中。不过，这步是可选的，也可以在发送消息时自动创建Topic。</li><li>Producer发送消息，启动时先跟NameServer集群中的其中一台建立长连接，并从NameServer中获取路由信息，即当前发送的Topic消息的Queue与Broker的地址（IP+Port）的映射关系。然后根据算法策略从队选择一个Queue，与队列所在的Broker建立长连接从而向Broker发消息。当然，在获取到路由信息后，Producer会首先将路由信息缓存到本地，再每 30 秒从NameServer更新一次路由信息。</li><li>Consumer跟Producer类似，跟其中一台NameServer建立长连接，获取其所订阅Topic的路由信息，然后根据算法策略从路由信息中获取到其所要消费的Queue，然后直接跟Broker建立长连接，开始消费其中的消息。Consumer在获取到路由信息后，同样也会每 30 秒从NameServer更新一次路由信息。不过不同于Producer的是，Consumer还会向Broker发送心跳，以确保Broker的存活状态。</li></ol><h5 id="Topic的创建模式"><a href="#Topic的创建模式" class="headerlink" title="Topic的创建模式"></a>Topic的创建模式</h5><p>手动创建Topic时，有两种模式：</p><ul><li>集群模式：该模式下创建的Topic在该集群中，所有Broker中的Queue数量是相同的。</li><li>Broker模式：该模式下创建的Topic在该集群中，每个Broker中的Queue数量可以不同。</li></ul><p>自动创建Topic时，默认采用的是<code>Broker</code>模式，会为每个Broker默认创建 4 个Queue。</p><h5 id="读-x2F-写队列"><a href="#读-x2F-写队列" class="headerlink" title="读&#x2F;写队列"></a>读&#x2F;写队列</h5><p>从物理上来讲，读&#x2F;写队列是同一个队列。所以，不存在读&#x2F;写队列数据同步问题。读&#x2F;写队列是逻辑上进行区分的概念。一般情况下，读&#x2F;写队列数量是相同的。</p><p>例如，创建Topic时设置的写队列数量为 8 ，读队列数量为 4 ，此时系统会创建 8 个Queue，分别是0 1 2 3 4 5 6 7。Producer会将消息写入到这 8 个队列，但Consumer只会消费0 1 2 3这 4 个队列中的消息，4 5 6 7 中的消息是不会被消费到的。</p><p>再如，创建Topic时设置的写队列数量为 4 ，读队列数量为 8 ，此时系统会创建 8 个Queue，分别是0 1 2 3 4 5 6 7。Producer会将消息写入到0 1 2 3 这 4 个队列，但Consumer只会消费0 1 2 3 4 5 6 7这 8 个队列中的消息，但是4 5 6 7中是没有消息的。此时假设Consumer Group中包含两个Consumer，Consumer1消费0 1 2 3，而Consumer2消费4 5 6 7。但实际情况是，Consumer2是没有消息可消费的。</p><blockquote><p>也就是说，当读&#x2F;写队列数量设置不同时，总是有问题的。那么，为什么要这样设计呢？</p><p>其这样设计的目的是为了，方便Topic的Queue的缩容。</p><p>例如，原来创建的Topic中包含 16 个Queue，如何能够使其Queue缩容为 8 个，还不会丢失消息？可以动态修改写队列数量为 8 ，读队列数量不变。此时新的消息只能写入到前 8 个队列，而消费都消费的却是16 个队列中的数据。当发现后 8 个Queue中的消息消费完毕后，就可以再将读队列数量动态设置为 8 。整个缩容过程，没有丢失任何消息。</p></blockquote><p>perm用于设置对当前创建Topic的操作权限： <strong>2 表示只写， 4 表示只读， 6 表示读写</strong>。</p><h3 id="三、单机安装与启动"><a href="#三、单机安装与启动" class="headerlink" title="三、单机安装与启动"></a>三、单机安装与启动</h3><h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><h5 id="软硬件需求"><a href="#软硬件需求" class="headerlink" title="软硬件需求"></a>软硬件需求</h5><p><strong>系统要求是64位的，JDK要求是1.8及其以上版本的</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">yum list java*<br>yum -y install java-1.8.0-openjdk*<br>java -version<br></code></pre></td></tr></table></figure><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img12.png" alt="img12"></p><p>下载RocketMQ安装包</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img13.png" alt="img13"></p><p>将下载的安装包上传到Linux。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img14.png" alt="img14"></p><p>解压。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img15.png" alt="软硬件需求04"></p><h4 id="2、修改初始内存"><a href="#2、修改初始内存" class="headerlink" title="2、修改初始内存"></a>2、修改初始内存</h4><p>修改runserver.sh</p><p>使用vim命令打开bin&#x2F;runserver.sh文件。现将这些值修改为如下：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img17.png" alt="img17"></p><p>修改runbroker.sh</p><p>使用vim命令打开bin&#x2F;runbroker.sh文件。现将这些值修改为如下：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img18.png" alt="img18"></p><h4 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h4><p>启动NameServer</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup sh bin/mqnamesrv &amp;<br>tail -f ~/logs/rocketmqlogs/namesrv.log<br></code></pre></td></tr></table></figure><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img19.png" alt="img19"></p><p><code>如果出现mq启动报错ERROR: Please set the JAVA_HOME variable in your environment, We need java(x64)! !!</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/local/jdk1.8.0_191/bin/javac /usr/bin/javac<br>ln -s  /usr/local/jdk1.8.0_191/bin/jar /usr/bin/jar<br>ln -s /usr/local/jdk1.8.0_191/bin/java /bin/java<br></code></pre></td></tr></table></figure><p>启动broker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup sh bin/mqbroker -n localhost:9876 &amp;<br>tail -f ~/logs/rocketmqlogs/broker.log<br></code></pre></td></tr></table></figure><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img20.png" alt="img20"></p><h4 id="4、-发送-x2F-接收消息测试"><a href="#4、-发送-x2F-接收消息测试" class="headerlink" title="4、 发送&#x2F;接收消息测试"></a>4、 发送&#x2F;接收消息测试</h4><h5 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">export NAMESRV_ADDR=localhost:9876<br>sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer<br><br></code></pre></td></tr></table></figure><h5 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer<br><br></code></pre></td></tr></table></figure><h4 id="5、-关闭Server"><a href="#5、-关闭Server" class="headerlink" title="5、 关闭Server"></a>5、 关闭Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh bin/mqshutdown broker<br>sh bin/mqshutdown namesrv<br><br></code></pre></td></tr></table></figure><h3 id="四、控制台的安装与启动"><a href="#四、控制台的安装与启动" class="headerlink" title="四、控制台的安装与启动"></a>四、控制台的安装与启动</h3><p>RocketMQ有一个可视化的dashboard，通过该控制台可以直观的查看到很多数据。</p><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h4><p>下载地址：<a href="https://github.com/apache/rocketmq-externals/releases">https://github.com/apache/rocketmq-externals/releases</a></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img21.png" alt="img21"></p><h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2 修改配置"></a>2 修改配置</h4><p>修改其src&#x2F;main&#x2F;resources中的application.properties配置文件。</p><ol><li>原来的端口号为 8080 ，修改为一个不常用的</li><li>指定RocketMQ的name server地址</li></ol><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img22.png" alt="img22"></p><h4 id="3-添加依赖"><a href="#3-添加依赖" class="headerlink" title="3 添加依赖"></a>3 添加依赖</h4><p>在解压目录rocketmq-console的pom.xml中添加如下JAXB依赖。</p><blockquote><p>JAXB，Java Architechture for Xml Binding，用于XML绑定的Java技术，是一个业界标准，是一项可以根据XML Schema生成Java类的技术。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.activation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>activation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="4-打包"><a href="#4-打包" class="headerlink" title="4 打包"></a>4 打包</h4><p>在rocketmq-console目录下运行maven的打包命令。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img23.png" alt="img23"></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img24.png" alt="img24"></p><h4 id="5-启动"><a href="#5-启动" class="headerlink" title="5 启动"></a>5 启动</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img25.png" alt="img25"></p><h4 id="6-访问"><a href="#6-访问" class="headerlink" title="6 访问"></a>6 访问</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img26.png" alt="img26"></p><h3 id="五、集群搭建理论"><a href="#五、集群搭建理论" class="headerlink" title="五、集群搭建理论"></a>五、集群搭建理论</h3><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img27.png" alt="img27"></p><h4 id="1-数据复制与刷盘策略"><a href="#1-数据复制与刷盘策略" class="headerlink" title="1 数据复制与刷盘策略"></a>1 数据复制与刷盘策略</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img28.png" alt="集群搭建理论"></p><h5 id="复制策略"><a href="#复制策略" class="headerlink" title="复制策略"></a>复制策略</h5><p>复制策略是Broker的Master与Slave间的数据同步方式。分为同步复制与异步复制：</p><ul><li>同步复制：消息写入master后，master会等待slave同步数据成功后才向producer返回成功ACK</li><li>异步复制：消息写入master后，master立即向producer返回成功ACK，无需等待slave同步数据成功</li></ul><blockquote><p>异步复制策略会降低系统的写入延迟，RT变小，提高了系统的吞吐量</p></blockquote><h5 id="刷盘策略"><a href="#刷盘策略" class="headerlink" title="刷盘策略"></a>刷盘策略</h5><p>刷盘策略指的是broker中消息的落盘方式，即消息发送到broker内存后消息持久化到磁盘的方式。分为同步刷盘与异步刷盘.</p><ul><li>同步刷盘：当消息持久化到broker的磁盘后才算是消息写入成功。</li><li>异步刷盘：当消息写入到broker的内存后即表示消息写入成功，无需等待消息持久化到磁盘。</li></ul><blockquote><ol><li>异步刷盘策略会降低系统的写入延迟，RT变小，提高了系统的吞吐量</li><li>消息写入到Broker的内存，一般是写入到了PageCache</li><li>对于异步 刷盘策略，消息会写入到PageCache后立即返回成功ACK。但并不会立即做落盘操作，而是当PageCache到达一定量时会自动进行落盘。</li></ol></blockquote><h4 id="2-Broker集群模式"><a href="#2-Broker集群模式" class="headerlink" title="2 Broker集群模式"></a>2 Broker集群模式</h4><p>根据Broker集群中各个节点间关系的不同，Broker集群可以分为以下几类：</p><h5 id="单Master"><a href="#单Master" class="headerlink" title="单Master"></a>单Master</h5><p>只有一个broker（其本质上就不能称为集群）。这种方式也只能是在测试时使用，生产环境下不能使用，因为存在单点问题。</p><h5 id="多Master"><a href="#多Master" class="headerlink" title="多Master"></a>多Master</h5><p>broker集群仅由多个master构成，不存在Slave。同一Topic的各个Queue会平均分布在各个master节点上。</p><ul><li>优点：配置简单，单个Master宕机或重启维护对应用无影响，在磁盘配置为RAID10时，即使机器宕机不可恢复情况下，由于RAID10磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢），性能最高；</li><li>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅（不可消费），消息实时性会受到影响。</li></ul><blockquote><p>以上优点的前提是，这些Master都配置了RAID磁盘阵列。如果没有配置，一旦出现某Master宕机，则会发生大量消息丢失的情况。</p></blockquote><h5 id="多Master多Slave模式-异步复制"><a href="#多Master多Slave模式-异步复制" class="headerlink" title="多Master多Slave模式-异步复制"></a>多Master多Slave模式-异步复制</h5><p>broker集群由多个master构成，每个master又配置了多个slave（在配置了RAID磁盘阵列的情况下，一个master一般配置一个slave即可）。master与slave的关系是主备关系，即master负责处理消息的读写请求，而slave仅负责消息的备份与master宕机后的角色切换。</p><p>异步复制即前面所讲的<code>复制策略</code>中的<code>异步复制策略</code>，即消息写入master成功后，master立即向producer返回成功ACK，无需等待slave同步数据成功。</p><p>该模式的最大特点之一是，当master宕机后slave能够<code>自动切换</code>为master。不过由于slave从master的同步具有短暂的延迟（毫秒级），所以当master宕机后，这种异步复制方式可能会存在少量消息的丢失问题。</p><blockquote><p>Slave从Master同步的延迟越短，其可能丢失的消息就越少</p><p>对于Master的RAID磁盘阵列，若使用的也是异步复制策略，同样也存在延迟问题，同样也可能会丢失消息。但RAID阵列的秘诀是微秒级的（因为是由硬盘支持的），所以其丢失的数据量会更少。</p></blockquote><h5 id="多Master多Slave模式-同步双写"><a href="#多Master多Slave模式-同步双写" class="headerlink" title="多Master多Slave模式-同步双写"></a>多Master多Slave模式-同步双写</h5><p>该模式是<code>多Master多Slave模式</code>的<code>同步复制</code>实现。所谓<code>同步双写</code>，指的是消息写入master成功后，master会等待slave同步数据成功后才向producer返回成功ACK，即master与slave都要写入成功后才会返回成功ACK，也即<code>双写</code>。该模式与<code>异步复制模式相比</code>，优点是消息的安全性更高，不存在消息丢失的情况。但单个消息的RT略高，从而导致性能要略低（大约低10%）。</p><p>该模式存在一个大的问题：对于目前的版本，Master宕机后，Slave<code>不会自动切换</code>到Master。</p><h5 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h5><p>一般会为Master配置RAID10磁盘阵列，然后再为其配置一个Slave。即利用了RAID10磁盘阵列的高效、安全性，又解决了可能会影响订阅的问题。</p><blockquote><ol><li>RAID磁盘阵列的效率要高于Master-Slave集群。因为RAID是硬件支持的。也正因为如此，所以RAID阵列的搭建成本较高。</li><li>多Master+RAID阵列，与多Master多Slave集群的区别是什么？</li><li>多Master+RAID阵列，其仅仅可以保证数据不丢失，即不影响消息写入，但其可能会影响到消息的订阅。但其执行效率要远高于<code>多Master多Slave集群</code></li><li>多Master多Slave集群，其不仅可以保证数据不丢失，也不会影响消息写入。其运行效率要低于<code>多Master+RAID阵列</code></li></ol></blockquote><h3 id="六、磁盘阵列RAID"><a href="#六、磁盘阵列RAID" class="headerlink" title="六、磁盘阵列RAID"></a>六、磁盘阵列RAID</h3><h4 id="1-RAID历史"><a href="#1-RAID历史" class="headerlink" title="1 RAID历史"></a>1 RAID历史</h4><p>1988 年美国加州大学伯克利分校的 D. A. Patterson 教授等首次在论文 “A Case of Redundant Array of Inexpensive Disks” 中提出了 RAID 概念 ，即<code>廉价冗余磁盘阵列</code>（ Redundant Array of Inexpensive Disks ）。由于当时大容量磁盘比较昂贵， RAID 的基本思想是将多个容量较小、相对廉价的磁盘进行有机组合，从而以较低的成本获得与昂贵大容量磁盘相当的容量、性能、可靠性。随着磁盘成本和价格的不断降低， “廉价” 已经毫无意义。因此， RAID 咨询委员会（ RAID Advisory Board, RAB ）决定用“ 独立 ” 替代 “ 廉价 ” ，于时 RAID 变成了<code>独立磁盘冗余阵列</code>（ Redundant Array of Independent Disks ）。但这仅仅是名称的变化，实质内容没有改变。</p><h4 id="2-RAID等级"><a href="#2-RAID等级" class="headerlink" title="2 RAID等级"></a>2 RAID等级</h4><p>RAID 这种设计思想很快被业界接纳， RAID 技术作为高性能、高可靠的存储技术，得到了非常广泛的应用。 RAID 主要利用镜像、数据条带和数据校验三种技术来获取高性能、可靠性、容错能力和扩展性，根据对这三种技术的使用策略和组合架构，可以把 RAID 分为不同的等级，以满足不同数据应用的需求。</p><p>D. A. Patterson 等的论文中定义了 RAID0 ~ RAID6 原始 RAID 等级。随后存储厂商又不断推出 RAID7、 RAID10、RAID01 、 RAID50 、 RAID53 、 RAID100 等 RAID 等级，但这些并无统一的标准。目前业界与学术界公认的标准是 RAID0 ~ RAID6 ，而在实际应用领域中使用最多的 RAID 等级是 RAID0 、RAID1 、 RAID3 、 RAID5 、 RAID6 和 RAID10。</p><p>RAID 每一个等级代表一种实现方法和技术，等级之间并无高低之分。在实际应用中，应当根据用户的数据应用特点，综合考虑可用性、性能和成本来选择合适的 RAID 等级，以及具体的实现方式。</p><h4 id="3-关键技术"><a href="#3-关键技术" class="headerlink" title="3 关键技术"></a>3 关键技术</h4><ul><li><h5 id="镜像技术"><a href="#镜像技术" class="headerlink" title="镜像技术"></a>镜像技术</h5><p>镜像技术是一种冗余技术，为磁盘提供数据备份功能，防止磁盘发生故障而造成数据丢失。对于 RAID而言，采用镜像技术最典型地的用法就是，同时在磁盘阵列中产生两个完全相同的数据副本，并且分布在两个不同的磁盘上。镜像提供了完全的数据冗余能力，当一个数据副本失效不可用时，外部系统仍可正常访问另一副本，不会对应用系统运行和性能产生影响。而且，镜像不需要额外的计算和校验，故障修复非常快，直接复制即可。镜像技术可以从多个副本进行并发读取数据，提供更高的读 I&#x2F;O 性能，但不能并行写数据，写多个副本通常会导致一定的 I&#x2F;O 性能下降。</p><p>镜像技术提供了非常高的数据安全性，其代价也是非常昂贵的，需要至少双倍的存储空间。高成本限制了镜像的广泛应用，主要应用于至关重要的数据保护，这种场合下的数据丢失可能会造成非常巨大的损失。</p></li><li><h5 id="数据条带技术"><a href="#数据条带技术" class="headerlink" title="数据条带技术"></a>数据条带技术</h5><p>数据条带化技术是一种自动将 I&#x2F;O操作负载均衡到多个物理磁盘上的技术。更具体地说就是，将一块连续的数据分成很多小部分并把它们分别存储到不同磁盘上。这就能使多个进程可以并发访问数据的多个不同部分，从而获得最大程度上的 <strong>I&#x2F;O 并行能力</strong>，极大地提升性能。</p></li><li><h5 id="数据校验技术"><a href="#数据校验技术" class="headerlink" title="数据校验技术"></a>数据校验技术</h5><p>数据校验技术是指， RAID 要在写入数据的同时进行校验计算，并将得到的校验数据存储在 RAID 成员磁盘中。校验数据可以集中保存在某个磁盘或分散存储在多个不同磁盘中。当其中一部分数据出错时，就可以对剩余数据和校验数据进行反校验计算重建丢失的数据。</p><p>数据校验技术相对于镜像技术的优势在于节省大量开销，但由于每次数据读写都要进行大量的校验运算，对计算机的运算速度要求很高，且必须使用硬件 RAID 控制器。在数据重建恢复方面，检验技术比镜像技术复杂得多且慢得多。</p></li></ul><h4 id="4-RAID分类"><a href="#4-RAID分类" class="headerlink" title="4 RAID分类"></a>4 RAID分类</h4><p>从实现角度看， RAID 主要分为软 RAID、硬 RAID 以及混合 RAID 三种。</p><ul><li><h5 id="软-RAID"><a href="#软-RAID" class="headerlink" title="软 RAID"></a>软 RAID</h5><p>​所有功能均有操作系统和 CPU 来完成，没有独立的 RAID 控制处理芯片和 I&#x2F;O 处理芯片，效率自然最低。</p></li><li><h5 id="硬-RAID"><a href="#硬-RAID" class="headerlink" title="硬 RAID"></a>硬 RAID</h5><p>​配备了专门的 RAID 控制处理芯片和 I&#x2F;O 处理芯片以及阵列缓冲，不占用 CPU 资源。效率很高，但成本也很高。</p></li><li><h5 id="混合-RAID"><a href="#混合-RAID" class="headerlink" title="混合 RAID"></a>混合 RAID</h5><p>具备 RAID 控制处理芯片，但没有专门的I&#x2F;O 处理芯片，需要 CPU 和驱动程序来完成。性能和成本在软RAID 和硬 RAID 之间。</p></li></ul><h4 id="5-常见RAID等级详解"><a href="#5-常见RAID等级详解" class="headerlink" title="5 常见RAID等级详解"></a>5 常见RAID等级详解</h4><ul><li><h5 id="JBOD"><a href="#JBOD" class="headerlink" title="JBOD"></a>JBOD</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img29.png" alt="JBOD"></p><p>JBOD ，Just a Bunch of Disks，磁盘簇。表示一个没有控制软件提供协调控制的磁盘集合，这是 RAID区别与 JBOD 的主要因素。 JBOD 将多个物理磁盘串联起来，提供一个巨大的逻辑磁盘。</p><p>JBOD 的数据存放机制是由第一块磁盘开始按顺序往后存储，当前磁盘存储空间用完后，再依次往后面的磁盘存储数据。 JBOD 存储性能完全等同于单块磁盘，而且也不提供数据安全保护。</p><blockquote><p>其只是简单提供一种扩展存储空间的机制，JBOD可用存储容量等于所有成员磁盘的存储空间之和</p></blockquote><p>JBOD 常指磁盘柜，而不论其是否提供 RAID 功能。不过，JBOD并非官方术语，官方称为Spanning。</p></li><li><h5 id="RAID0"><a href="#RAID0" class="headerlink" title="RAID0"></a>RAID0</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img30.png" alt="RAID0"></p><p>RAID0 是一种简单的、无数据校验的<code>数据条带化技术</code>。实际上不是一种真正的 RAID ，因为它并不提供任何形式的冗余策略。 RAID0 将所在磁盘条带化后组成大容量的存储空间，将数据分散存储在所有磁盘中，以独立访问方式实现多块磁盘的并读访问。</p><p>理论上讲，一个由 n 块磁盘组成的 RAID0 ，它的读写性能是单个磁盘性能的 n 倍，但由于总线带宽等多种因素的限制，实际的性能提升低于理论值。由于可以并发执行 I&#x2F;O 操作，总线带宽得到充分利用。再加上不需要进行数据校验，<code>RAID0 的性能在所有 RAID 等级中是最高的</code>。</p><p>RAID0 具有低成本、高读写性能、 100% 的高存储空间利用率等优点，但是它不提供数据冗余保护，一旦数据损坏，将无法恢复。</p><p>应用场景：对数据的顺序读写要求不高，对数据的安全性和可靠性要求不高，但对系统性能要求很高的场景。</p><blockquote><p>RAID0与JBOD相同点：</p><ol><li>存储容量：都是成员磁盘容量总和</li><li>磁盘利用率，都是100%，即都没有做任何的数据冗余备份</li></ol><p>RAID0与JBOD不同点：</p><ol><li>JBOD：数据是顺序存放的，一个磁盘存满后才会开始存放到下一个磁盘</li><li>RAID：各个磁盘中的数据写入是并行的，是通过数据条带技术写入的。其读写性能是JBOD的n倍</li></ol></blockquote></li><li><h5 id="RAID1"><a href="#RAID1" class="headerlink" title="RAID1"></a>RAID1</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img31.png" alt="RAID1"></p><p>RAID1 就是一种<code>镜像技术</code>，它将数据完全一致地分别写到工作磁盘和镜像磁盘，它的磁盘空间利用率为 50% 。 RAID1 在数据写入时，响应时间会有所影响，但是读数据的时候没有影响。 RAID1 提供了最佳的数据保护，一旦工作磁盘发生故障，系统将自动切换到镜像磁盘，不会影响使用。</p><p>RAID1是为了增强数据安全性使两块磁盘数据呈现完全镜像，从而达到安全性好、技术简单、管理方便。 RAID1 拥有完全容错的能力，但实现成本高。</p><p><strong>应用场景</strong>：对顺序读写性能要求较高，或对数据安全性要求较高的场景。</p></li><li><h5 id="RAID10"><a href="#RAID10" class="headerlink" title="RAID10"></a>RAID10</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img32.png" alt="RAID10"></p><p>RAID10是一个RAID1与RAID0的组合体，所以它继承了RAID0的快速和RAID1的安全。简单来说就是，先做条带，再做镜像。发即将进来的数据先分散到不同的磁盘，再将磁盘中的数据做镜像。</p></li><li><h5 id="RAID01"><a href="#RAID01" class="headerlink" title="RAID01"></a>RAID01</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img33.png" alt="RAID01"></p><p>RAID01是一个RAID0与RAID1的组合体，所以它继承了RAID0的快速和RAID1的安全。简单来说就是，先做镜像再做条带。即将进来的数据先做镜像，再将镜像数据写入到与之前数据不同的磁盘，即再做条带。</p></li></ul><blockquote><p>RAID10要比RAID01的容错率再高，所以生产环境下一般是不使用RAID01的。</p></blockquote><h4 id="序号-主机名-x2F-IP-IP-功能-BROKER角色"><a href="#序号-主机名-x2F-IP-IP-功能-BROKER角色" class="headerlink" title="序号 主机名&#x2F;IP IP 功能 BROKER角色"></a>序号 主机名&#x2F;IP IP 功能 BROKER角色</h4><p><strong>使用Dorker搭建</strong></p><h3 id="七、集群搭建实践"><a href="#七、集群搭建实践" class="headerlink" title="七、集群搭建实践"></a>七、集群搭建实践</h3><h4 id="1-集群架构"><a href="#1-集群架构" class="headerlink" title="1 集群架构"></a>1 集群架构</h4><p><strong>使用Dorker命令启动4个容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it -p 9876:9876 -v /myData/rocketmq/master1/logs:/root/logs -v /myData/rocketmq/master1/store:/root/store -v /myData/rocketmq/master1/conf:/root/conf --name rocketmq-master-1 myrocketmq:1.3 bash<br><br>docker run -it -p 9877:9876 -v /myData/rocketmq/master2/logs:/root/logs -v /myData/rocketmq/master2/store:/root/store -v /myData/rocketmq/master2/conf:/root/conf --name rocketmq-master-2 myrocketmq:1.3 bash<br><br>docker run -it -p 9878:9876 -v /myData/rocketmq/slave1/logs:/root/logs -v /myData/rocketmq/slave1/store:/root/store -v /myData/rocketmq/slave1/conf:/root/conf --name rocketmq-slave-1 myrocketmq:1.3 bash<br><br>docker run -it -p 9879:9876 -v /myData/rocketmq/slave2/logs:/root/logs -v /myData/rocketmq/slave2/store:/root/store -v /myData/rocketmq/slave2/conf:/root/conf --name rocketmq-slave-2 myrocketmq:1.3 bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">逐一启动，也可以使用容器编排</span><br></code></pre></td></tr></table></figure><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2 修改配置文件"></a>2 修改配置文件</h4><h5 id="broker-a-properties"><a href="#broker-a-properties" class="headerlink" title="broker-a.properties"></a>broker-a.properties</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 指定整个broker集群的名称，或者说是RocketMQ集群的名称</span><br><span class="hljs-attr">brokerClusterName</span>=<span class="hljs-string">DefaultCluster</span><br><span class="hljs-comment"># 指定master-slave集群的名称。一个RocketMQ集群可以包含多个master-slave集群</span><br><span class="hljs-attr">brokerName</span>=<span class="hljs-string">broker-a</span><br><span class="hljs-comment"># master的brokerId为 0</span><br><span class="hljs-attr">brokerId</span>= <span class="hljs-string">0</span><br><span class="hljs-comment"># 指定删除消息存储过期文件的时间为凌晨 4 点</span><br><span class="hljs-attr">deleteWhen</span>= <span class="hljs-string">04</span><br><span class="hljs-comment"># 指定未发生更新的消息存储文件的保留时长为 48 小时， 48 小时后过期，将会被删除</span><br><span class="hljs-attr">fileReservedTime</span>= <span class="hljs-string">48</span><br><span class="hljs-comment"># 指定当前broker为异步复制master</span><br><span class="hljs-attr">brokerRole</span>=<span class="hljs-string">ASYNC_MASTER</span><br><span class="hljs-comment"># 指定刷盘策略为异步刷盘</span><br><span class="hljs-attr">flushDiskType</span>=<span class="hljs-string">ASYNC_FLUSH</span><br><span class="hljs-comment"># 指定Name Server的地址</span><br><span class="hljs-attr">namesrvAddr</span>=<span class="hljs-string">172.17.0.2:9876;172.17.0.3:9876;172.17.0.4:9876;172.17.0.5:9876</span><br><br></code></pre></td></tr></table></figure><h5 id="borker-a-s-properties"><a href="#borker-a-s-properties" class="headerlink" title="borker-a-s.properties"></a>borker-a-s.properties</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">brokerClusterName</span>=<span class="hljs-string">DefaultCluster</span><br><span class="hljs-attr">brokerName</span>=<span class="hljs-string">broker-a</span><br><span class="hljs-attr">brokerId</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">deleteWhen</span>=<span class="hljs-string">04</span><br><span class="hljs-attr">fileReservedTime</span>=<span class="hljs-string">48</span><br><span class="hljs-attr">brokerRole</span>=<span class="hljs-string">SLAVE</span><br><span class="hljs-attr">flushDiskType</span>=<span class="hljs-string">ASYNC_FLUSH</span><br><span class="hljs-attr">namesrvAddr</span>=<span class="hljs-string">172.17.0.2:9876;172.17.0.3:9876;172.17.0.4:9876;172.17.0.5:9876</span><br></code></pre></td></tr></table></figure><h5 id="配置文件还可以修改"><a href="#配置文件还可以修改" class="headerlink" title="配置文件还可以修改"></a>配置文件还可以修改</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#指定整个broker集群的名称，或者说是RocketMQ集群的名称</span><br><span class="hljs-attr">brokerClusterName</span>=<span class="hljs-string">rocket-MS</span><br><span class="hljs-comment">#指定master-slave集群的名称。一个RocketMQ集群可以包含多个master-slave集群</span><br><span class="hljs-attr">brokerName</span>=<span class="hljs-string">broker-a</span><br><span class="hljs-comment">#0 表示 Master，&gt;0 表示 Slave</span><br><span class="hljs-attr">brokerId</span>=<span class="hljs-string">0</span><br><span class="hljs-comment">#nameServer地址，分号分割</span><br><span class="hljs-attr">namesrvAddr</span>=<span class="hljs-string">nameserver1:9876;nameserver2:9876</span><br><span class="hljs-comment">#默认为新建Topic所创建的队列数</span><br><span class="hljs-attr">defaultTopicQueueNums</span>=<span class="hljs-string">4</span><br><span class="hljs-comment">#是否允许 Broker 自动创建Topic，建议生产环境中关闭</span><br><span class="hljs-attr">autoCreateTopicEnable</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#是否允许 Broker 自动创建订阅组，建议生产环境中关闭</span><br><span class="hljs-attr">autoCreateSubscriptionGroup</span>=<span class="hljs-string">true</span><br><span class="hljs-comment">#Broker对外提供服务的端口，即Broker与producer与consumer通信的端口</span><br><span class="hljs-attr">listenPort</span>=<span class="hljs-string">10911</span><br><span class="hljs-comment">#HA高可用监听端口，即Master与Slave间通信的端口，默认值为listenPort+1</span><br><span class="hljs-attr">haListenPort</span>=<span class="hljs-string">10912</span><br><span class="hljs-comment">#指定删除消息存储过期文件的时间为凌晨 4 点</span><br><span class="hljs-attr">deleteWhen</span>=<span class="hljs-string">04</span><br><span class="hljs-comment">#指定未发生更新的消息存储文件的保留时长为 48 小时， 48 小时后过期，将会被删除</span><br><span class="hljs-attr">fileReservedTime</span>=<span class="hljs-string">48</span><br><span class="hljs-comment">#指定commitLog目录中每个文件的大小，默认1G</span><br><span class="hljs-attr">mapedFileSizeCommitLog</span>=<span class="hljs-string">1073741824</span><br><span class="hljs-comment">#指定ConsumeQueue的每个Topic的每个Queue文件中可以存放的消息数量，默认30w条</span><br><span class="hljs-attr">mapedFileSizeConsumeQueue</span>=<span class="hljs-string">300000</span><br><span class="hljs-comment">#在清除过期文件时，如果该文件被其他线程所占用（引用数大于 0 ，比如读取消息），此时会阻止此次删除任务，同时在第一次试图删除该文件时记录当前时间戳。该属性则表示从第一次拒绝删除后开始计时，该文件最多可以保留的时长。在此时间内若引用数仍不为 0 ，则删除仍会被拒绝。不过时间到后，文件将被强制删除</span><br><span class="hljs-attr">destroyMapedFileIntervalForcibly</span>=<span class="hljs-string">120000</span><br><span class="hljs-comment">#指定commitlog、consumequeue所在磁盘分区的最大使用率，超过该值，则需立即清除过期文件</span><br><span class="hljs-attr">diskMaxUsedSpaceRatio</span>=<span class="hljs-string">88</span><br><span class="hljs-comment">#指定store目录的路径，默认在当前用户主目录中</span><br><span class="hljs-attr">storePathRootDir</span>=<span class="hljs-string">/usr/local/rocketmq-all-4.5.0/store</span><br><span class="hljs-comment">#commitLog目录路径</span><br><span class="hljs-attr">storePathCommitLog</span>=<span class="hljs-string">/usr/local/rocketmq-all-4.5.0/store/commitlog</span><br><span class="hljs-comment">#consumeueue目录路径</span><br><span class="hljs-attr">storePathConsumeQueue</span>=<span class="hljs-string">/usr/local/rocketmq-all-4.5.0/store/consumequeue</span><br><span class="hljs-comment">#index目录路径</span><br><span class="hljs-attr">storePathIndex</span>=<span class="hljs-string">/usr/local/rocketmq-all-4.5.0/store/index</span><br><span class="hljs-comment">#checkpoint文件路径</span><br><span class="hljs-attr">storeCheckpoint</span>=<span class="hljs-string">/usr/local/rocketmq-all-4.5.0/store/checkpoint</span><br><span class="hljs-comment">#abort文件路径</span><br><span class="hljs-attr">abortFile</span>=<span class="hljs-string">/usr/local/rocketmq-all-4.5.0/store/abort</span><br><span class="hljs-comment">#指定消息的最大大小</span><br><span class="hljs-attr">maxMessageSize</span>= <span class="hljs-string">65536</span><br><span class="hljs-comment">#Broker的角色</span><br><span class="hljs-comment"># - ASYNC_MASTER 异步复制Master</span><br><span class="hljs-comment"># - SYNC_MASTER 同步双写Master</span><br><span class="hljs-comment"># - SLAVE</span><br><span class="hljs-attr">brokerRole</span>=<span class="hljs-string">SYNC_MASTER</span><br><span class="hljs-comment">#刷盘策略</span><br><span class="hljs-comment"># - ASYNC_FLUSH 异步刷盘</span><br><span class="hljs-comment"># - SYNC_FLUSH 同步刷盘</span><br><span class="hljs-attr">flushDiskType</span>=<span class="hljs-string">SYNC_FLUSH</span><br><span class="hljs-comment">#发消息线程池数量</span><br><span class="hljs-attr">sendMessageThreadPoolNums</span>=<span class="hljs-string">128</span><br><span class="hljs-comment">#拉消息线程池数量</span><br><span class="hljs-attr">pullMessageThreadPoolNums</span>=<span class="hljs-string">128</span><br><span class="hljs-comment">#强制指定本机IP，需要根据每台机器进行修改。官方介绍可为空，系统默认自动识别，但多网卡时IP地址可能读取错误</span><br><span class="hljs-attr">brokerIP1</span>=<span class="hljs-string">192.168.3.105</span><br><br></code></pre></td></tr></table></figure><h4 id="3-启动容器"><a href="#3-启动容器" class="headerlink" title="3 启动容器"></a>3 启动容器</h4><h5 id="启动NameServer集群和Broker集群"><a href="#启动NameServer集群和Broker集群" class="headerlink" title="启动NameServer集群和Broker集群"></a>启动NameServer集群和Broker集群</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup sh /opt/apps/rocketmq-4.9.3/bin/mqnamesrv &amp;<br>nohup sh /opt/apps/rocketmq-4.9.3/bin/mqbroker -c /root/conf/broker.properties &amp;<br><br>tail -f ~/logs/rocketmqlogs/namesrv.log<br>tail -f ~/logs/rocketmqlogs/broker.log<br><br></code></pre></td></tr></table></figure><h3 id="八、mqadmin命令"><a href="#八、mqadmin命令" class="headerlink" title="八、mqadmin命令"></a>八、mqadmin命令</h3><p>在mq解压目录的bin目录下有一个mqadmin命令，该命令是一个运维指令，用于对mq的主题，集群，broker 等信息进行管理。</p><h4 id="1-修改bin-x2F-tools-sh"><a href="#1-修改bin-x2F-tools-sh" class="headerlink" title="1 修改bin&#x2F;tools.sh"></a>1 修改bin&#x2F;tools.sh</h4><p>在运行mqadmin命令之前，先要修改mq解压目录下bin&#x2F;tools.sh配置的JDK的ext目录位置。本机的ext目录在<code>/usr/java/jdk1.8.0_161/jre/lib/ext</code>。</p><p>使用vim命令打开tools.sh文件，并在JAVA_OPT配置的-Djava.ext.dirs这一行的后面添加ext的路径。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img34.png" alt="tools.sh"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -server -Xms1g -Xmx1g -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=128m&quot;</span><br>JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -Djava.ext.dirs=<span class="hljs-variable">$&#123;BASE_DIR&#125;</span>/lib:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre/lib/ext:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/lib/ext:/usr/java/jdk1.8.0_161/jre/lib/ext&quot;</span><br>JAVA_OPT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;JAVA_OPT&#125;</span> -cp <span class="hljs-variable">$&#123;CLASSPATH&#125;</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="2-运行mqadmin"><a href="#2-运行mqadmin" class="headerlink" title="2 运行mqadmin"></a>2 运行mqadmin</h4><p>直接运行该命令，可以看到其可以添加的commands。通过这些commands可以完成很多的功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@mqOS rocketmq-all-4.8.0-bin-release]# ./bin/mqadmin<br>The most commonly used mqadmin commands are:<br>updateTopic Update or create topic<br>deleteTopic Delete topic from broker and NameServer.<br>updateSubGroup Update or create subscription group<br>deleteSubGroup Delete subscription group from broker.<br>updateBrokerConfig Update broker&#x27;s config<br>updateTopicPerm Update topic perm<br>topicRoute Examine topic route info<br>topicStatus Examine topic Status info<br>topicClusterList get cluster info for topic<br>brokerStatus Fetch broker runtime status data<br>queryMsgById Query Message by Id<br>queryMsgByKey Query Message by Key<br>queryMsgByUniqueKey Query Message by Unique key<br>queryMsgByOffset Query Message by offset<br>QueryMsgTraceById query a message trace<br>printMsg Print Message Detail<br>printMsgByQueue Print Message Detail<br>sendMsgStatus send msg to broker.<br>brokerConsumeStats Fetch broker consume stats data<br>producerConnection Query producer&#x27;s socket connection and clientversion<br>consumerConnection Query consumer&#x27;s socket connection, client version and subscription<br>consumerProgress Query consumers&#x27;s progress, speed<br>consumerStatus Query consumer&#x27;s internal data structure<br>cloneGroupOffset clone offset from other group.<br>clusterList List all of clusters<br>topicList Fetch all topic list from name server<br>updateKvConfig Create or update KV config.<br>deleteKvConfig Delete KV config.<br>wipeWritePerm Wipe write perm of broker in all name server<br>resetOffsetByTime Reset consumer offset by timestamp(without client restart).<br>updateOrderConf Create or update or delete order conf<br>cleanExpiredCQ Clean expired ConsumeQueue on broker.<br>cleanUnusedTopic Clean unused topic on broker.<br>startMonitoring Start Monitoring<br>statsAll Topic and Consumer tps stats<br>allocateMQ Allocate MQ<br>checkMsgSendRT check message send response time<br>clusterRT List All clusters Message Send RT<br>getNamesrvConfig Get configs of name server.<br>updateNamesrvConfig Update configs of name server.<br>getBrokerConfig Get broker config by cluster or special broker!<br>queryCq Query cq command.<br>sendMessage Send a message<br>consumeMessage Consume message<br>updateAclConfig Update acl config yaml file in broker<br>deleteAccessConfig Delete Acl Config Account in broker<br>clusterAclConfigVersion List all of acl config version information in cluster<br>updateGlobalWhiteAddr Update global white address for acl Config File in broker<br>getAccessConfigSubCommand List all of acl config information in cluster<br><br></code></pre></td></tr></table></figure><h4 id="3-该命令的官方详解"><a href="#3-该命令的官方详解" class="headerlink" title="3 该命令的官方详解"></a>3 该命令的官方详解</h4><p><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/operation.md">https://github.com/apache/rocketmq/blob/master/docs/cn/operation.md</a></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img35.png" alt="命令详解"></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img36.png" alt="命令详解"></p><h2 id="第三章-RocketMQ工作原理"><a href="#第三章-RocketMQ工作原理" class="headerlink" title="第三章 RocketMQ工作原理"></a>第三章 RocketMQ工作原理</h2><h3 id="一、-消息的生产"><a href="#一、-消息的生产" class="headerlink" title="一、 消息的生产"></a>一、 消息的生产</h3><h4 id="1-消息的生产过程"><a href="#1-消息的生产过程" class="headerlink" title="1 消息的生产过程"></a>1 消息的生产过程</h4><p>Producer可以将消息写入到某Broker中的某Queue中，其经历了如下过程：</p><ul><li>Producer发送消息之前，会先向NameServer发出获取消息Topic的路由信息的请求</li><li>NameServer返回该Topic的路由表及Broker列表</li><li>Producer根据代码中指定的Queue选择策略，从Queue列表中选出一个队列，用于后续存储消息</li><li>Produer对消息做一些特殊处理，例如，消息本身超过4M，则会对其进行压缩</li><li>Producer向选择出的Queue所在的Broker发出RPC请求，将消息发送到选择出的Queue</li></ul><blockquote><p>路由表：实际是一个Map，key为Topic名称，value是一个QueueData实例列表。QueueData并不是一个Queue对应一个QueueData，而是一个Broker中该Topic的所有Queue对应一个QueueData。即，只要涉及到该Topic的Broker，一个Broker对应一个QueueData。QueueData中包含brokerName。简单来说，路由表的key为Topic名称，value则为所有涉及该Topic的BrokerName列表。</p></blockquote><blockquote><p>Broker列表：其实际也是一个Map。key为brokerName，value为BrokerData。一个Broker对应一个BrokerData实例，对吗？不对。一套brokerName名称相同的Master-Slave小集群对应一个BrokerData。BrokerData中包含brokerName及一个map。该map的key为brokerId，value为该broker对应的地址。brokerId为 0 表示该broker为Master，非 0 表示Slave。</p></blockquote><h4 id="2-Queue选择算法"><a href="#2-Queue选择算法" class="headerlink" title="2 Queue选择算法"></a>2 Queue选择算法</h4><p>对于无序消息，其Queue选择算法，也称为消息投递算法，常见的有两种：</p><h5 id="轮询算法"><a href="#轮询算法" class="headerlink" title="轮询算法"></a>轮询算法</h5><p>默认选择算法。该算法保证了每个Queue中可以均匀的获取到消息。</p><blockquote><p>该算法存在一个问题：由于某些原因，在某些Broker上的Queue可能投递延迟较严重。从而导致Producer的缓存队列中出现较大的消息积压，影响消息的投递性能。</p></blockquote><h5 id="最小投递延迟算法"><a href="#最小投递延迟算法" class="headerlink" title="最小投递延迟算法"></a>最小投递延迟算法</h5><p>该算法会统计每次消息投递的时间延迟，然后根据统计出的结果将消息投递到时间延迟最小的Queue。如果延迟相同，则采用轮询算法投递。该算法可以有效提升消息的投递性能。</p><blockquote><p>该算法也存在一个问题：消息在Queue上的分配不均匀。投递延迟小的Queue其可能会存在大量的消息。而对该Queue的消费者压力会增大，降低消息的消费能力，可能会导致MQ中消息的堆积。</p></blockquote><h3 id="二、-消息的存储"><a href="#二、-消息的存储" class="headerlink" title="二、 消息的存储"></a>二、 消息的存储</h3><p>RocketMQ中的消息存储在本地文件系统中，这些相关文件默认在当前用户主目录下的store目录中。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img37.png" alt="img37"></p><ul><li>abort：该文件在Broker启动后会自动创建，正常关闭Broker，该文件会自动消失。若在没有启动Broker的情况下，发现这个文件是存在的，则说明之前Broker的关闭是非正常关闭。</li><li>checkpoint：其中存储着commitlog、consumequeue、index文件的最后刷盘时间戳</li><li>commitlog：其中存放着commitlog文件，而消息是写在commitlog文件中的</li><li>conæg：存放着Broker运行期间的一些配置数据</li><li>consumequeue：其中存放着consumequeue文件，队列就存放在这个目录中</li><li>index：其中存放着消息索引文件indexFile</li><li>lock：运行期间使用到的全局资源锁</li></ul><h4 id="1-commitlog文件"><a href="#1-commitlog文件" class="headerlink" title="1 commitlog文件"></a>1 commitlog文件</h4><blockquote><p>说明：在很多资料中commitlog目录中的文件简单就称为commitlog文件。但在源码中，该文件被命名为mappedFile。</p></blockquote><h5 id="目录与文件"><a href="#目录与文件" class="headerlink" title="目录与文件"></a>目录与文件</h5><p>commitlog目录中存放着很多的mappedFile文件，当前Broker中的所有消息都是落盘到这些mappedFile文件中的。mappedFile文件大小为1G（小于等于1G），文件名由 20 位十进制数构成，表示当前文件的第一条消息的起始位移偏移量。</p><blockquote><p>第一个文件名一定是 20 位 0 构成的。因为第一个文件的第一条消息的偏移量commitlog offset为 0</p><p>当第一个文件放满时，则会自动生成第二个文件继续存放消息。假设第一个文件大小是 1073741820 字节（1G &#x3D; 1073741824字节），则第二个文件名就是 00000000001073741820 。</p><p>以此类推，第n个文件名应该是前n-1个文件大小之和。</p><p>一个Broker中所有mappedFile文件的commitlog offset是连续的</p></blockquote><p>需要注意的是，一个Broker中仅包含一个commitlog目录，所有的mappedFile文件都是存放在该目录中的。即无论当前Broker中存放着多少Topic的消息，这些消息都是被顺序写入到了mappedFile文件中的。也就是说，这些消息在Broker中存放时并没有被按照Topic进行分类存放。</p><blockquote><p>mappedFile文件是顺序读写的文件，所有其访问效率很高</p><p>无论是SSD磁盘还是SATA磁盘，通常情况下，顺序存取效率都会高于随机存取。</p></blockquote><h5 id="消息单元"><a href="#消息单元" class="headerlink" title="消息单元"></a>消息单元</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img38.png" alt="消息单元"></p><p>mappedFile文件内容由一个个的<code>消息单元</code>构成。每个消息单元中包含消息总长度MsgLen、消息的物理位置physicalOffset、消息体内容Body、消息体长度BodyLength、消息主题Topic、Topic长度 TopicLength、消息生产者BornHost、消息发送时间戳BornTimestamp、消息所在的队列QueueId、消息在Queue中存储的偏移量QueueOffset等近 20 余项消息相关属性。</p><blockquote><p>需要注意到，消息单元中是包含Queue相关属 性的。所以，我们在后续的学习中，就需要十分留意commitlog与queue间的关系是什么？</p><p>一个mappedFile文件中第m+1个消息单元的commitlog offset偏移量</p><p>L(m+1) &#x3D; L(m) + MsgLen(m) (m &gt;&#x3D; 0)</p></blockquote><h4 id="2-consumequeue"><a href="#2-consumequeue" class="headerlink" title="2 consumequeue"></a>2 consumequeue</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img39.png" alt="输入图片说明"></p><h5 id="目录与文件-1"><a href="#目录与文件-1" class="headerlink" title="目录与文件"></a>目录与文件</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img40.png" alt="输入图片说明"></p><p>为了提高效率，会为每个Topic在~&#x2F;store&#x2F;consumequeue中创建一个目录，目录名为Topic名称。在该Topic目录下，会再为每个该Topic的Queue建立一个目录，目录名为queueId。每个目录中存放着若干consumequeue文件，consumequeue文件是commitlog的索引文件，可以根据consumequeue定位到具体的消息。</p><p>consumequeue文件名也由 20 位数字构成，表示当前文件的第一个索引条目的起始位移偏移量。与mappedFile文件名不同的是，其后续文件名是固定的。因为consumequeue文件大小是固定不变的。</p><h5 id="索引条目"><a href="#索引条目" class="headerlink" title="索引条目"></a>索引条目</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img41.png" alt="输入图片说明"></p><p>每个consumequeue文件可以包含30w个索引条目，每个索引条目包含了三个消息重要属性：消息在mappedFile文件中的偏移量CommitLog Offset、消息长度、消息Tag的hashcode值。这三个属性占 20个字节，所以每个文件的大小是固定的30w * 20字节。</p><blockquote><p>一个consumequeue文件中所有消息的Topic一定是相同的。但每条消息的Tag可能是不同的。</p></blockquote><h4 id="3-对文件的读写"><a href="#3-对文件的读写" class="headerlink" title="3 对文件的读写"></a>3 对文件的读写</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img42.png" alt="输入图片说明"></p><h5 id="消息写入"><a href="#消息写入" class="headerlink" title="消息写入"></a>消息写入</h5><p>一条消息进入到Broker后经历了以下几个过程才最终被持久化。</p><ul><li>Broker根据queueId，获取到该消息对应索引条目要在consumequeue目录中的写入偏移量，即QueueOffset</li><li>将queueId、queueOffset等数据，与消息一起封装为消息单元</li><li>将消息单元写入到commitlog</li><li>同时，形成消息索引条目</li><li>将消息索引条目分发到相应的consumequeue</li></ul><h5 id="消息拉取"><a href="#消息拉取" class="headerlink" title="消息拉取"></a>消息拉取</h5><ul><li><p>当Consumer来拉取消息时会经历以下几个步骤：</p><ul><li><p>Consumer获取到其要消费消息所在Queue的消费偏移量offset，计算出其要消费消息的消息offset</p><blockquote><p>消费offset即消费进度，consumer对某个Queue的消费offset，即消费到了该Queue的第几条消息<br>消息offset &#x3D; 消费offset + 1</p></blockquote></li></ul></li><li><p>Consumer向Broker发送拉取请求，其中会包含其要拉取消息的Queue、消息offset及消息Tag。</p></li><li><p>Broker计算在该consumequeue中的queueOffset。</p><blockquote><p>queueOffset &#x3D; 消息offset * 20字节</p></blockquote></li><li><p>从该queueOffset处开始向后查找第一个指定Tag的索引条目。</p></li><li><p>解析该索引条目的前 8 个字节，即可定位到该消息在commitlog中的commitlog offset</p></li><li><p>从对应commitlog offset中读取消息单元，并发送给Consumer</p></li></ul><h5 id="性能提升"><a href="#性能提升" class="headerlink" title="性能提升"></a>性能提升</h5><p>RocketMQ中，无论是消息本身还是消息索引，都是存储在磁盘上的。其不会影响消息的消费吗？当然不会。其实RocketMQ的性能在目前的MQ产品中性能是非常高的。因为系统通过一系列相关机制大大提升了性能。</p><p>首先，RocketMQ对文件的读写操作是通过<code>mmap零拷贝</code>进行的，将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率。</p><p>其次，consumequeue中的数据是顺序存放的，还引入了<code>PageCache的预读取机制</code>，使得对consumequeue文件的读取几乎接近于内存读取，即使在有消息堆积情况下也不会影响性能。</p><blockquote><p>PageCache机制，页缓存机制，是OS对文件的缓存机制，用于加速对文件的读写操作。一般来说，程序对文件进行顺序读写的速度几乎接近于内存读写速度，主要原因是由于OS使用PageCache机制对读写访问操作进行性能优化，将一部分的内存用作PageCache。</p><p>1)写操作：OS会先将数据写入到PageCache中，随后会以异步方式由pdæush（page dirty æush)内核线程将Cache中的数据刷盘到物理磁盘<br>2)读操作：若用户要读取数据，其首先会从PageCache中读取，若没有命中，则OS在从物理磁盘上加载该数据到PageCache的同时，也会顺序 对其相邻数据块中的数据进行预读取。</p></blockquote><p>RocketMQ中可能会影响性能的是对commitlog文件的读取。因为对commitlog文件来说，读取消息时会产生大量的随机访问，而随机访问会严重影响性能。不过，如果选择合适的系统IO调度算法，比如设置调度算法为Deadline（采用SSD固态硬盘的话），随机读的性能也会有所提升。</p><h4 id="4-与Kafka的对比"><a href="#4-与Kafka的对比" class="headerlink" title="4 与Kafka的对比"></a>4 与Kafka的对比</h4><p>RocketMQ的很多思想来源于Kafka，其中commitlog与consumequeue就是。</p><p>RocketMQ中的commitlog目录与consumequeue的结合就类似于Kafka中的partition分区目录。mappedFile文件就类似于Kafka中的segment段。</p><blockquote><p>Kafka中的Topic的消息被分割为一个或多个partition。partition是一个物理概念，对应到系统上就是topic目录下的一个或多个目录。每个partition中包含的文件称为segment，是具体存放消息的文件。</p><p>Kafka中消息存放的目录结构是：topic目录下有partition目录，partition目录下有segment文件</p><p>Kafka中没有二级分类标签Tag这个概念</p><p>Kafka中无需索引文件。因为生产者是将消息直接写在了partition中的，消费者也是直接从partition中读取数据的</p></blockquote><h3 id="三、-indexFile"><a href="#三、-indexFile" class="headerlink" title="三、 indexFile"></a>三、 indexFile</h3><h4 id="1-索引条目结构"><a href="#1-索引条目结构" class="headerlink" title="1 索引条目结构"></a>1 索引条目结构</h4><p>每个Broker中会包含一组indexFile，每个indexFile都是以一个<code>时间戳</code>命名的（这个indexFile被创建时的时间戳）。每个indexFile文件由三部分构成：indexHeader，slots槽位，indexes索引数据。每个 indexFile文件中包含500w个slot槽。而每个slot槽又可能会挂载很多的index索引单元。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img43.png" alt="输入图片说明"></p><p>indexHeader固定 40 个字节，其中存放着如下数据：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img44.png" alt="输入图片说明"></p><ul><li>beginTimestamp：该indexFile中第一条消息的存储时间</li><li>endTimestamp：该indexFile中最后一条消息存储时间</li><li>beginPhyoffset：该indexFile中第一条消息在commitlog中的偏移量commitlog offset</li><li>endPhyoffset：该indexFile中最后一条消息在commitlog中的偏移量commitlog offset</li><li>hashSlotCount：已经填充有index的slot数量（并不是每个slot槽下都挂载有index索引单元，这里统计的是所有挂载了index索引单元的slot槽的数量）</li><li>indexCount：该indexFile中包含的索引单元个数（统计出当前indexFile中所有slot槽下挂载的所有index索引单元的数量之和）</li></ul><p>indexFile中最复杂的是Slots与Indexes间的关系。在实际存储时，Indexes是在Slots后面的，但为了便于理解，将它们的关系展示为如下形式：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img45.png" alt="输入图片说明"></p><p><code>key的hash值 % 500w</code>的结果即为slot槽位，然后将该slot值修改为该index索引单元的indexNo，根据这个indexNo可以计算出该index单元在indexFile中的位置。不过，该取模结果的重复率是很高的，为了解决该问题，在每个index索引单元中增加了preIndexNo，用于指定该slot中当前index索引单元的前一个index索引单元。而slot中始终存放的是其下最新的index索引单元的indexNo，这样的话，只要找到了slot就可以找到其最新的index索引单元，而通过这个index索引单元就可以找到其之前的所有index索引单元。</p><blockquote><p>indexNo是一个在indexFile中的流水号，从 0 开始依次递增。即在一个indexFile中所有indexNo是以此递增的。indexNo在index索引单元中是没有体现的，其是通过indexes中依次数出来的。</p></blockquote><p>index索引单元默写 20 个字节，其中存放着以下四个属性：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img59.png" alt="输入图片说明"></p><ul><li>keyHash：消息中指定的业务key的hash值</li><li>phyOffset：当前key对应的消息在commitlog中的偏移量commitlog offset</li><li>timeDiff：当前key对应消息的存储时间与当前indexFile创建时间的时间差</li><li>preIndexNo：当前slot下当前index索引单元的前一个index索引单元的indexNo</li></ul><h4 id="2-indexFile的创建"><a href="#2-indexFile的创建" class="headerlink" title="2 indexFile的创建"></a>2 indexFile的创建</h4><p>indexFile的文件名为当前文件被创建时的时间戳。这个时间戳有什么用处呢？</p><p>根据业务key进行查询时，查询条件除了key之外，还需要指定一个要查询的时间戳，表示要查询不大于该时间戳的最新的消息，即查询指定时间戳之前存储的最新消息。这个时间戳文件名可以简化查询，提高查询效率。具体后面会详细讲解。</p><p>indexFile文件是何时创建的？其创建的条件（时机）有两个：</p><ul><li>当第一条带key的消息发送来后，系统发现没有indexFile，此时会创建第一个indexFile文件</li><li>当一个indexFile中挂载的index索引单元数量超出2000w个时，会创建新的indexFile。当带key的消息发送到来后，系统会找到最新的indexFile，并从其indexHeader的最后 4 字节中读取到indexCount。若indexCount &gt;&#x3D; 2000w时，会创建新的indexFile。</li></ul><blockquote><p>由于可以推算出，一个indexFile的最大大小是：(40 + 500w * 4 + 2000w * 20)字节</p></blockquote><h4 id="3-查询流程"><a href="#3-查询流程" class="headerlink" title="3 查询流程"></a>3 查询流程</h4><p>当消费者通过业务key来查询相应的消息时，其需要经过一个相对较复杂的查询流程。不过，在分析查询流程之前，首先要清楚几个定位计算式子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">计算指定消息key的slot槽位序号： <br>slot槽位序号 = key的hash % 500w  (式子1)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">计算槽位序号为n的slot在indexFile中的起始位置： <br>slot(n)位置 = 40 + (n - 1) * 4 (式子2)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">计算indexNo为m的index在indexFile中的位置： <br>index(m)位置 = 40 + 500w * 4 + (m - 1) * 20 (式子3)<br></code></pre></td></tr></table></figure><blockquote><p>40 为indexFile中indexHeader的字节数<br>500w * 4 是所有slots所占的字节数</p></blockquote><p><strong>具体查询流程</strong></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img16.png" alt="img16"></p><h3 id="四、-消息的消费"><a href="#四、-消息的消费" class="headerlink" title="四、 消息的消费"></a>四、 消息的消费</h3><p>消费者从Broker中获取消息的方式有两种：pull拉取方式和push推动方式。消费者组对于消息消费的模式又分为两种：集群消费Clustering和广播消费Broadcasting。</p><h4 id="1-获取消息类型"><a href="#1-获取消息类型" class="headerlink" title="1 获取消息类型"></a>1 获取消息类型</h4><h5 id="拉取式消费"><a href="#拉取式消费" class="headerlink" title="拉取式消费"></a>拉取式消费</h5><p>Consumer主动从Broker中拉取消息，主动权由Consumer控制。一旦获取了批量消息，就会启动消费过程。不过，该方式的实时性较弱，即Broker中有了新的消息时消费者并不能及时发现并消费。</p><blockquote><p>由于拉取时间间隔是由用户指定的，所以在设置该间隔时需要注意平稳：间隔太短，空请求比例会增加；间隔太长，消息的实时性太差</p></blockquote><h5 id="推送式消费"><a href="#推送式消费" class="headerlink" title="推送式消费"></a>推送式消费</h5><p>该模式下Broker收到数据后会主动推送给Consumer。该获取方式一般实时性较高。</p><p>该获取方式是典型的<code>发布-订阅</code>模式，即Consumer向其关联的Queue注册了监听器，一旦发现有新的消息到来就会触发回调的执行，回调方法是Consumer去Queue中拉取消息。而这些都是基于Consumer与Broker间的长连接的。长连接的维护是需要消耗系统资源的。</p><h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><ul><li>pull：需要应用去实现对关联Queue的遍历，实时性差；但便于应用控制消息的拉取</li><li>push：封装了对关联Queue的遍历，实时性强，但会占用较多的系统资源</li></ul><h4 id="2-消费模式"><a href="#2-消费模式" class="headerlink" title="2 消费模式"></a>2 消费模式</h4><h5 id="广播消费"><a href="#广播消费" class="headerlink" title="广播消费"></a>广播消费</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img46.png" alt="输入图片说明"></p><p>广播消费模式下，相同Consumer Group的每个Consumer实例都接收同一个Topic的全量消息。即每条消息都会被发送到Consumer Group中的每个Consumer。</p><h5 id="集群消费"><a href="#集群消费" class="headerlink" title="集群消费"></a>集群消费</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img47.png" alt="输入图片说明"></p><p>集群消费模式下，相同Consumer Group的每个Consumer实例<code>平均分摊</code>同一个Topic的消息。即每条消息只会被发送到Consumer Group中的<code>某个</code>Consumer。</p><h5 id="消息进度保存"><a href="#消息进度保存" class="headerlink" title="消息进度保存"></a>消息进度保存</h5><ul><li>广播模式：消费进度保存在consumer端。因为广播模式下consumer group中每个consumer都会消费所有消息，但它们的消费进度是不同。所以consumer各自保存各自的消费进度。</li><li>集群模式：消费进度保存在broker中。consumer group中的所有consumer共同消费同一个Topic中的消息，同一条消息只会被消费一次。消费进度会参与到了消费的负载均衡中，故消费进度是需要共享的。下图是broker中存放的各个Topic的各个Queue的消费进度。</li></ul><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img48.png" alt="输入图片说明"></p><h4 id="3-Rebalance机制"><a href="#3-Rebalance机制" class="headerlink" title="3 Rebalance机制"></a>3 Rebalance机制</h4><p>Rebalance机制讨论的前提是：集群消费。</p><h5 id="什么是Rebalance"><a href="#什么是Rebalance" class="headerlink" title="什么是Rebalance"></a>什么是Rebalance</h5><p>Rebalance即再均衡，指的是，将一个Topic下的多个Queue在同一个Consumer Group中的多个Consumer间进行重新分配的过程。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img49.png" alt="输入图片说明"></p><p>Rebalance机制的本意是为了提升消息的并行消费能力。例如，一个Topic下 5 个队列，在只有 1 个消费者的情况下，这个消费者将负责消费这 5 个队列的消息。如果此时我们增加一个消费者，那么就可以给其中一个消费者分配 2 个队列，给另一个分配 3 个队列，从而提升消息的并行消费能力。</p><h5 id="Rebalance限制"><a href="#Rebalance限制" class="headerlink" title="Rebalance限制"></a>Rebalance限制</h5><p>由于一个队列最多分配给一个消费者，因此当某个消费者组下的消费者实例数量大于队列的数量时，多余的消费者实例将分配不到任何队列。</p><h5 id="Rebalance危害"><a href="#Rebalance危害" class="headerlink" title="Rebalance危害"></a>Rebalance危害</h5><p>Rebalance的在提升消费能力的同时，也带来一些问题：</p><p><code>消费暂停：</code>在只有一个Consumer时，其负责消费所有队列；在新增了一个Consumer后会触发Rebalance的发生。此时原Consumer就需要暂停部分队列的消费，等到这些队列分配给新的Consumer后，这些暂停消费的队列才能继续被消费。</p><p><code>消费重复：</code>Consumer 在消费新分配给自己的队列时，必须接着之前Consumer 提交的消费进度的offset继续消费。然而默认情况下，offset是异步提交的，这个异步性导致提交到Broker的offset与Consumer实际消费的消息并不一致。这个不一致的差值就是可能会重复消费的消息。</p><blockquote><p>同步提交：consumer提交了其消费完毕的一批消息的offset给broker后，需要等待broker的成功ACK。当收到ACK后，consumer才会继续获取并消费下一批消息。在等待ACK期间，consumer是阻塞的。</p><p>异步提交：consumer提交了其消费完毕的一批消息的offset给broker后，不需要等待broker的成功ACK。consumer可以直接获取并消费下一批消息。</p><p>对于一次性读取消息的数量，需要根据具体业务场景选择一个相对均衡的是很有必要的。因为数量过大，系统性能提升了，但产生重复消费的消息数量可能会增加；数量过小，系统性能会下降，但被重复消费的消息数量可能会减少。</p></blockquote><p><code>消费突刺：</code>由于Rebalance可能导致重复消费，如果需要重复消费的消息过多，或者因为Rebalance暂停时间过长从而导致积压了部分消息。那么有可能会导致在Rebalance结束之后瞬间需要消费很多消息。</p><h5 id="Rebalance产生的原因"><a href="#Rebalance产生的原因" class="headerlink" title="Rebalance产生的原因"></a>Rebalance产生的原因</h5><p>导致Rebalance产生的原因，无非就两个：消费者所订阅Topic的Queue数量发生变化，或消费者组中消费者的数量发生变化。</p><blockquote><p>1 ）Queue数量发生变化的场景：<br>Broker扩容或缩容<br>Broker升级运维<br>Broker与NameServer间的网络异常<br>Queue扩容或缩容<br>2 ）消费者数量发生变化的场景：<br>Consumer Group扩容或缩容<br>Consumer升级运维<br>Consumer与NameServer间网络异常</p></blockquote><h5 id="Rebalance过程"><a href="#Rebalance过程" class="headerlink" title="Rebalance过程"></a>Rebalance过程</h5><p>在Broker中维护着多个Map集合，这些集合中动态存放着当前Topic中Queue的信息、Consumer Group中Consumer实例的信息。一旦发现消费者所订阅的Queue数量发生变化，或消费者组中消费者的数量发生变化，立即向Consumer Group中的每个实例发出Rebalance通知。</p><blockquote><p>TopicConågManager：key是topic名称，value是TopicConåg。TopicConåg中维护着该Topic中所有Queue的数据。</p><p>ConsumerManager：key是Consumser Group Id，value是ConsumerGroupInfo。<br>ConsumerGroupInfo中维护着该Group中所有Consumer实例数据。</p><p>ConsumerOffsetManager：key为<code>Topic与订阅该Topic的Group的组合,即topic@group</code>，value是一个内层Map。内层Map的key为QueueId，内层Map的value为该Queue的消费进度offset。</p></blockquote><p>Consumer实例在接收到通知后会采用Queue分配算法自己获取到相应的Queue，即由Consumer实例自主进行Rebalance。</p><h5 id="与Kafka对比"><a href="#与Kafka对比" class="headerlink" title="与Kafka对比"></a>与Kafka对比</h5><p>在Kafka中，一旦发现出现了Rebalance条件，Broker会调用Group Coordinator来完成Rebalance。Coordinator是Broker中的一个进程。Coordinator会在Consumer Group中选出一个Group Leader。由这个Leader根据自己本身组情况完成Partition分区的再分配。这个再分配结果会上报给Coordinator，并由Coordinator同步给Group中的所有Consumer实例。</p><p>Kafka中的Rebalance是由Consumer Leader完成的。而RocketMQ中的Rebalance是由每个Consumer自身完成的，Group中不存在Leader。</p><h4 id="4-Queue分配算法"><a href="#4-Queue分配算法" class="headerlink" title="4 Queue分配算法"></a>4 Queue分配算法</h4><p>一个Topic中的Queue只能由Consumer Group中的一个Consumer进行消费，而一个Consumer可以同时消费多个Queue中的消息。那么Queue与Consumer间的配对关系是如何确定的，即Queue要分配给哪个Consumer进行消费，也是有算法策略的。常见的有四种策略。这些策略是通过在创建Consumer时的构造器传进去的。</p><h5 id="平均分配策略"><a href="#平均分配策略" class="headerlink" title="平均分配策略"></a>平均分配策略</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img50.png"></p><p>该算法是要根据<code>avg = QueueCount / ConsumerCount</code>的计算结果进行分配的。如果能够整除，则按顺序将avg个Queue逐个分配Consumer；如果不能整除，则将多余出的Queue按照Consumer顺序逐个分配。</p><blockquote><p>该算法即，先计算好每个Consumer应该分得几 个Queue，然后再依次将这些数量的Queue逐个分配个Consumer。</p></blockquote><h5 id="环形平均策略"><a href="#环形平均策略" class="headerlink" title="环形平均策略"></a>环形平均策略</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img50.png"></p><p>环形平均算法是指，根据消费者的顺序，依次在由queue队列组成的环形图中逐个分配。</p><blockquote><p>该算法不用事先计算每个Consumer需要分配几 个Queue，直接一个一个分即可。</p></blockquote><h5 id="一致性hash策略"><a href="#一致性hash策略" class="headerlink" title="一致性hash策略"></a>一致性hash策略</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img52.png"></p><p>该算法会将consumer的hash值作为Node节点存放到hash环上，然后将queue的hash值也放到hash环上，通过顺时针方向，距离queue最近的那个consumer就是该queue要分配的consumer。</p><blockquote><p>该算法存在的问题：分配不均。</p></blockquote><h5 id="同机房策略"><a href="#同机房策略" class="headerlink" title="同机房策略"></a>同机房策略</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img53.png"></p><p>该算法会根据queue的部署机房位置和consumer的位置，过滤出当前consumer相同机房的queue。然后按照平均分配策略或环形平均策略对同机房queue进行分配。如果没有同机房queue，则按照平均分配策略或环形平均策略对所有queue进行分配。</p><h5 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h5><p>一致性hash算法存在的问题：</p><p>两种平均分配策略的分配效率较高，一致性hash策略的较低。因为一致性hash算法较复杂。另外，一致性hash策略分配的结果也很大可能上存在不平均的情况。</p><p>一致性hash算法存在的意义：</p><p>其可以有效减少由于消费者组扩容或缩容所带来的大量的Rebalance。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img50.jpg"></p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/ing51.jpg"></p><p>一致性hash算法的<strong>应用场景</strong>：</p><p>Consumer数量变化较频繁的场景。</p><h4 id="5-至少一次原则"><a href="#5-至少一次原则" class="headerlink" title="5 至少一次原则"></a>5 至少一次原则</h4><p>RocketMQ有一个原则：每条消息必须要被<code>成功消费</code>一次。</p><p>那么什么是成功消费呢？Consumer在消费完消息后会向其<code>消费进度记录器</code>提交其消费消息的offset，offset被成功记录到记录器中，那么这条消费就被成功消费了。</p><blockquote><p>什么是消费进度记录器？<br>对于广播消费模式来说，Consumer本身就是消费进度记录器。<br>对于集群消费模式来说，Broker是消费进度记录器。</p></blockquote><h3 id="五、-订阅关系的一致性"><a href="#五、-订阅关系的一致性" class="headerlink" title="五、 订阅关系的一致性"></a>五、 订阅关系的一致性</h3><p>订阅关系的一致性指的是，同一个消费者组（Group ID相同）下所有Consumer实例所订阅的Topic与Tag及对消息的处理逻辑必须完全一致。否则，消息消费的逻辑就会混乱，甚至导致消息丢失。</p><h4 id="1-正确订阅关系"><a href="#1-正确订阅关系" class="headerlink" title="1 正确订阅关系"></a>1 正确订阅关系</h4><p>多个消费者组订阅了多个Topic，并且每个消费者组里的多个消费者实例的订阅关系保持了一致。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img54.png"></p><h4 id="2-错误订阅关系"><a href="#2-错误订阅关系" class="headerlink" title="2 错误订阅关系"></a>2 错误订阅关系</h4><p>一个消费者组订阅了多个Topic，但是该消费者组里的多个Consumer实例的订阅关系并没有保持一致。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img55.png"></p><h5 id="订阅了不同的Topic"><a href="#订阅了不同的Topic" class="headerlink" title="订阅了不同的Topic"></a>订阅了不同的Topic</h5><p>该例中的错误在于，同一个消费者组中的两个Consumer实例订阅了不同的Topic。</p><p>Consumer实例1-1：（订阅了topic为jodie_test_A，tag为所有的消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(PropertyKeyConst.GROUP_ID, <span class="hljs-string">&quot;GID_jodie_test_1&quot;</span>);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> ONSFactory.createConsumer(properties);<br>consumer.subscribe(<span class="hljs-string">&quot;jodie_test_A&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br>        System.out.println(message.getMsgID());<br>        <span class="hljs-keyword">return</span> Action.CommitMessage;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>Consumer实例1-2：（订阅了topic为jodie_test_B，tag为所有的消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(PropertyKeyConst.GROUP_ID, <span class="hljs-string">&quot;GID_jodie_test_1&quot;</span>);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> ONSFactory.createConsumer(properties);<br>consumer.subscribe(<span class="hljs-string">&quot;jodie_test_B&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br>        System.out.println(message.getMsgID());<br>        <span class="hljs-keyword">return</span> Action.CommitMessage;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="订阅了不同Tag"><a href="#订阅了不同Tag" class="headerlink" title="订阅了不同Tag"></a>订阅了不同Tag</h5><p>该例中的错误在于，同一个消费者组中的两个Consumer订阅了相同Topic的不同Tag。</p><p>Consumer实例2-1：（订阅了topic为jodie_test_A，tag为TagA的消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(PropertyKeyConst.GROUP_ID, <span class="hljs-string">&quot;GID_jodie_test_2&quot;</span>);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> ONSFactory.createConsumer(properties);<br>consumer.subscribe(<span class="hljs-string">&quot;jodie_test_A&quot;</span>, <span class="hljs-string">&quot;TagA&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br>        System.out.println(message.getMsgID());<br>        <span class="hljs-keyword">return</span> Action.CommitMessage;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>Consumer实例2-2：（订阅了topic为jodie_test_A，tag为所有的消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(PropertyKeyConst.GROUP_ID, <span class="hljs-string">&quot;GID_jodie_test_2&quot;</span>);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> ONSFactory.createConsumer(properties);<br>consumer.subscribe(<span class="hljs-string">&quot;jodie_test_A&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br>        System.out.println(message.getMsgID());<br>        <span class="hljs-keyword">return</span> Action.CommitMessage;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="订阅了不同数量的Topic"><a href="#订阅了不同数量的Topic" class="headerlink" title="订阅了不同数量的Topic"></a>订阅了不同数量的Topic</h5><p>该例中的错误在于，同一个消费者组中的两个Consumer订阅了不同数量的Topic。</p><p>Consumer实例3-1：（该Consumer订阅了两个Topic）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(PropertyKeyConst.GROUP_ID, <span class="hljs-string">&quot;GID_jodie_test_3&quot;</span>);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> ONSFactory.createConsumer(properties);<br>consumer.subscribe(<span class="hljs-string">&quot;jodie_test_A&quot;</span>, <span class="hljs-string">&quot;TagA&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br>        System.out.println(message.getMsgID());<br>        <span class="hljs-keyword">return</span> Action.CommitMessage;<br>    &#125;<br>&#125;);<br>consumer.subscribe(<span class="hljs-string">&quot;jodie_test_B&quot;</span>, <span class="hljs-string">&quot;TagB&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br>        System.out.println(message.getMsgID());<br>        <span class="hljs-keyword">return</span> Action.CommitMessage;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>Consumer实例3-2：（该Consumer订阅了一个Topic）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(PropertyKeyConst.GROUP_ID, <span class="hljs-string">&quot;GID_jodie_test_3&quot;</span>);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> ONSFactory.createConsumer(properties);<br>consumer.subscribe(<span class="hljs-string">&quot;jodie_test_A&quot;</span>, <span class="hljs-string">&quot;TagB&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>() &#123;<br>    <span class="hljs-keyword">public</span> Action <span class="hljs-title function_">consume</span><span class="hljs-params">(Message message, ConsumeContext context)</span> &#123;<br>        System.out.println(message.getMsgID());<br>        <span class="hljs-keyword">return</span> Action.CommitMessage;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="六、-offset管理"><a href="#六、-offset管理" class="headerlink" title="六、 offset管理"></a>六、 offset管理</h3><blockquote><p>这里的offset指的是Consumer的消费进度offset。</p></blockquote><p>消费进度offset是用来记录每个Queue的不同消费组的消费进度的。根据消费进度记录器的不同，可以分为两种模式：本地模式和远程模式。</p><h4 id="1-offset本地管理模式"><a href="#1-offset本地管理模式" class="headerlink" title="1 offset本地管理模式"></a>1 offset本地管理模式</h4><p>当消费模式为<code>广播消费</code>时，offset使用本地模式存储。因为每条消息会被所有的消费者消费，每个消费者管理自己的消费进度，各个消费者之间不存在消费进度的交集。</p><p>Consumer在广播消费模式下offset相关数据以json的形式持久化到Consumer本地磁盘文件中，默认文件路径为当前用户主目录下的<code>.rocketmq_offsets/$&#123;clientId&#125;/$&#123;group&#125;/Offsets.json</code>。其中${clientId}为当前消费者id，默认为ip@DEFAULT；${group}为消费者组名称。</p><h4 id="2-offset远程管理模式"><a href="#2-offset远程管理模式" class="headerlink" title="2 offset远程管理模式"></a>2 offset远程管理模式</h4><p>当消费模式为<code>集群消费</code>时，offset使用远程模式管理。因为所有Cosnumer实例对消息采用的是均衡消费，所有Consumer共享Queue的消费进度。</p><p>Consumer在集群消费模式下offset相关数据以json的形式持久化到Broker磁盘文件中，文件路径为当前用户主目录下的<code>store/config/consumerOffset.json</code>。</p><p>Broker启动时会加载这个文件，并写入到一个双层Map（ConsumerOffsetManager）。外层map的key为topic@group，value为内层map。内层map的key为queueId，value为offset。当发生Rebalance时，新的Consumer会从该Map中获取到相应的数据来继续消费。</p><p>集群模式下offset采用远程管理模式，主要是为了保证Rebalance机制。</p><h4 id="3-offset用途"><a href="#3-offset用途" class="headerlink" title="3 offset用途"></a>3 offset用途</h4><p>消费者是如何从最开始持续消费消息的？消费者要消费的第一条消息的起始位置是用户自己通过consumer.setConsumeFromWhere()方法指定的。</p><p>在Consumer启动后，其要消费的第一条消息的起始位置常用的有三种，这三种位置可以通过枚举类型常量设置。这个枚举类型为ConsumeFromWhere。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img56.png" alt="输入图片说明"></p><blockquote><p>CONSUME_FROM_LAST_OFFSET：从queue的当前最后一条消息开始消费<br>CONSUME_FROM_FIRST_OFFSET：从queue的第一条消息开始消费<br>CONSUME_FROM_TIMESTAMP：从指定的具 体时间戳位置的消息开始消费。这个具体时间戳是通过另外一个语句指定的 。<br>consumer.setConsumeTimestamp(“20210701080000”) yyyyMMddHHmmss</p></blockquote><p>当消费完一批消息后，Consumer会提交其消费进度offset给Broker，Broker在收到消费进度后会将其更新到那个双层Map（ConsumerOffsetManager）及consumerOffset.json文件中，然后向该Consumer进行ACK，而ACK内容中包含三项数据：当前消费队列的最小offset（minOffset）、最大offset（maxOffset）、及下次消费的起始offset（nextBeginOffset）。</p><h4 id="4-重试队列"><a href="#4-重试队列" class="headerlink" title="4 重试队列"></a>4 重试队列</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img57.png" alt="输入图片说明"></p><p>当rocketMQ对消息的消费出现异常时，会将发生异常的消息的offset提交到Broker中的重试队列。系统在发生消息消费异常时会为当前的topic@group创建一个重试队列，该队列以%RETRY%开头，到达重试时间后进行消费重试。</p><h4 id="5-offset的同步提交与异步提交"><a href="#5-offset的同步提交与异步提交" class="headerlink" title="5 offset的同步提交与异步提交"></a>5 offset的同步提交与异步提交</h4><p>集群消费模式下，Consumer消费完消息后会向Broker提交消费进度offset，其提交方式分为两种：</p><p><code>同步提交</code>：消费者在消费完一批消息后会向broker提交这些消息的offset，然后等待broker的成功响应。若在等待超时之前收到了成功响应，则继续读取下一批消息进行消费（从ACK中获取nextBeginOffset）。若没有收到响应，则会重新提交，直到获取到响应。而在这个等待过程中，消费者是阻塞的。其严重影响了消费者的吞吐量。</p><p><code>异步提交</code>：消费者在消费完一批消息后向broker提交offset，但无需等待Broker的成功响应，可以继续读取并消费下一批消息。这种方式增加了消费者的吞吐量。但需要注意，broker在收到提交的offset后，还是会向消费者进行响应的。可能还没有收到ACK，此时Consumer会从Broker中直接获取nextBeginOffset。</p><h3 id="七、-消息幂等"><a href="#七、-消息幂等" class="headerlink" title="七、 消息幂等"></a>七、 消息幂等</h3><h4 id="1-什么是消费幂等"><a href="#1-什么是消费幂等" class="headerlink" title="1 什么是消费幂等"></a>1 什么是消费幂等</h4><p>当出现消费者对某条消息重复消费的情况时，重复消费的结果与消费一次的结果是相同的，并且多次消费并未对业务系统产生任何负面影响，那么这个消费过程就是消费幂等的。</p><blockquote><p>幂等：若某操作执行多次与执行一次对系统产生的影响是相同的，则称该操作是幂等的。</p></blockquote><p>在互联网应用中，尤其在网络不稳定的情况下，消息很有可能会出现重复发送或重复消费。如果重复的消息可能会影响业务处理，那么就应该对消息做幂等处理。</p><h4 id="2-消息重复的场景分析"><a href="#2-消息重复的场景分析" class="headerlink" title="2 消息重复的场景分析"></a>2 消息重复的场景分析</h4><p>什么情况下可能会出现消息被重复消费呢？最常见的有以下三种情况：</p><h5 id="发送时消息重复"><a href="#发送时消息重复" class="headerlink" title="发送时消息重复"></a>发送时消息重复</h5><p>当一条消息已被成功发送到Broker并完成持久化，此时出现了网络闪断，从而导致Broker对Producer应答失败。 如果此时Producer意识到消息发送失败并尝试再次发送消息，此时Broker中就可能会出现两条内容相同并且Message ID也相同的消息，那么后续Consumer就一定会消费两次该消息。</p><h5 id="消费时消息重复"><a href="#消费时消息重复" class="headerlink" title="消费时消息重复"></a>消费时消息重复</h5><p>消息已投递到Consumer并完成业务处理，当Consumer给Broker反馈应答时网络闪断，Broker没有接收到消费成功响应。为了保证消息<code>至少被消费一次</code>的原则，Broker将在网络恢复后再次尝试投递之前已被处理过的消息。此时消费者就会收到与之前处理过的内容相同、Message ID也相同的消息。</p><h5 id="Rebalance时消息重复"><a href="#Rebalance时消息重复" class="headerlink" title="Rebalance时消息重复"></a>Rebalance时消息重复</h5><p>当Consumer Group中的Consumer数量发生变化时，或其订阅的Topic的Queue数量发生变化时，会触发Rebalance，此时Consumer可能会收到曾经被消费过的消息。</p><h4 id="3-通用解决方案"><a href="#3-通用解决方案" class="headerlink" title="3 通用解决方案"></a>3 通用解决方案</h4><h5 id="两要素"><a href="#两要素" class="headerlink" title="两要素"></a>两要素</h5><p>幂等解决方案的设计中涉及到两项要素：幂等令牌，与唯一性处理。只要充分利用好这两要素，就可以设计出好的幂等解决方案。</p><ul><li>幂等令牌：是生产者和消费者两者中的既定协议，通常指具备唯一业务标识的字符串。例如，订单号、流水号。一般由Producer随着消息一同发送来的。</li><li>唯一性处理：服务端通过采用一定的算法策略，保证同一个业务逻辑不会被重复执行成功多次。例如，对同一笔订单的多次支付操作，只会成功一次。</li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>对于常见的系统，幂等性操作的通用性解决方案是：</p><ul><li><ol><li>首先通过缓存去重。在缓存中如果已经存在了某幂等令牌，则说明本次操作是重复性操作；若缓存没有命中，则进入下一步。</li></ol></li><li><ol><li>在唯一性处理之前，先在数据库中查询幂等令牌作为索引的数据是否存在。若存在，则说明本次操作为重复性操作；若不存在，则进入下一步。</li></ol></li><li><ol><li>在同一事务中完成三项操作：唯一性处理后，将幂等令牌写入到缓存，并将幂等令牌作为唯一索引的数据写入到DB中。</li></ol></li></ul><blockquote><p>第 1 步已经判断过是否是重复性操作了，为什么第 2 步还要再次判断？能够进入第 2 步，说明已经不是重复操作了，第 2 次判断是否重复？</p><p>当然不重复。一般缓存中的数据是具有有效期的。缓存中数据的有效期一旦过期，就是发生缓存穿透，使请求直接就到达了DBMS。</p></blockquote><h5 id="解决方案举例"><a href="#解决方案举例" class="headerlink" title="解决方案举例"></a>解决方案举例</h5><h5 id="以支付场景为例："><a href="#以支付场景为例：" class="headerlink" title="以支付场景为例："></a>以支付场景为例：</h5><ul><li><ol><li>当支付请求到达后，首先在Redis缓存中却获取key为支付流水号的缓存value。若value不空，则说明本次支付是重复操作，业务系统直接返回调用侧重复支付标识；若value为空，则进入下一步操作</li></ol></li><li><ol><li>到DBMS中根据支付流水号查询是否存在相应实例。若存在，则说明本次支付是重复操作，业务系统直接返回调用侧重复支付标识；若不存在，则说明本次操作是首次操作，进入下一步完成唯一性处理</li></ol></li><li><ol><li>在分布式事务中完成三项操作：</li></ol><ul><li>完成支付任务</li><li>将当前支付流水号作为key，任意字符串作为value，通过set(key, value, expireTime)将数据写入到Redis缓存</li><li>将当前支付流水号作为主键，与其它相关数据共同写入到DBMS</li></ul></li></ul><h4 id="4-消费幂等的实现"><a href="#4-消费幂等的实现" class="headerlink" title="4 消费幂等的实现"></a>4 消费幂等的实现</h4><p>消费幂等的解决方案很简单：为消息指定不会重复的唯一标识。因为Message ID有可能出现重复的情况，所以真正安全的幂等处理，不建议以Message ID作为处理依据。最好的方式是以业务唯一标识作为幂等处理的关键依据，而业务的唯一标识可以通过消息Key设置。</p><p>以支付场景为例，可以将消息的Key设置为订单号，作为幂等处理的依据。具体代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>message.setKey(<span class="hljs-string">&quot;ORDERID_100&quot;</span>);<br><span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(message);Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><p>消费者收到消息时可以根据消息的Key即订单号来实现消费幂等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt;msgs,ConsumeConcurrentlyContext context)</span> &#123;<br>        <span class="hljs-keyword">for</span>(MessageExt msg:msgs)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> msg.getKeys();<br>            <span class="hljs-comment">// 根据业务唯一标识Key做幂等处理</span><br>            <span class="hljs-comment">// ......</span><br>            &#125;<br>        <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>    &#125;<br>&#125;);Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><blockquote><p>RocketMQ能够保证消息不丢失，但不能保证消息不重复。</p></blockquote><h3 id="八、-消息堆积与消费延迟"><a href="#八、-消息堆积与消费延迟" class="headerlink" title="八、 消息堆积与消费延迟"></a>八、 消息堆积与消费延迟</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h4><p>消息处理流程中，如果Consumer的消费速度跟不上Producer的发送速度，MQ中未处理的消息会越来越多（进的多出的少），这部分消息就被称为<code>堆积消息</code>。消息出现堆积进而会造成消息的<code>消费延迟</code>。<br>以下场景需要重点关注消息堆积和消费延迟问题：</p><ul><li>业务系统上下游能力不匹配造成的持续堆积，且无法自行恢复。</li><li>业务系统对消息的消费实时性要求较高，即使是短暂的堆积造成的消费延迟也无法接受。</li></ul><h4 id="2-产生原因分析"><a href="#2-产生原因分析" class="headerlink" title="2 产生原因分析"></a>2 产生原因分析</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/img58.png" alt="输入图片说明"></p><p>Consumer使用长轮询Pull模式消费消息时，分为以下两个阶段：</p><h5 id="消息拉取-1"><a href="#消息拉取-1" class="headerlink" title="消息拉取"></a>消息拉取</h5><p>Consumer通过长轮询Pull模式批量拉取的方式从服务端获取消息，将拉取到的消息缓存到本地缓冲队列中。对于拉取式消费，在内网环境下会有很高的吞吐量，所以这一阶段一般不会成为消息堆积的瓶颈。</p><blockquote><p>一个单线程单分区的低规格主机(Consumer，4C8G)，其可达到几万的TPS。如果是多个分区多个线程，则可以轻松达到几十万的TPS。</p></blockquote><h5 id="消息消费"><a href="#消息消费" class="headerlink" title="消息消费"></a>消息消费</h5><p>Consumer将本地缓存的消息提交到消费线程中，使用业务消费逻辑对消息进行处理，处理完毕后获取到一个结果。这是真正的消息消费过程。此时Consumer的消费能力就完全依赖于消息的<code>消费耗时</code>和<code>消费并发度</code>了。如果由于业务处理逻辑复杂等原因，导致处理单条消息的耗时较长，则整体的消息吞吐量肯定不会高，此时就会导致Consumer本地缓冲队列达到上限，停止从服务端拉取消息。</p><h5 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h5><p>消息堆积的主要瓶颈在于客户端的消费能力，而消费能力由<code>消费耗时</code>和<code>消费并发度</code>决定。注意，消费耗时的优先级要高于消费并发度。即在保证了消费耗时的合理性前提下，再考虑消费并发度问题。</p><h4 id="3-消费耗时"><a href="#3-消费耗时" class="headerlink" title="3 消费耗时"></a>3 消费耗时</h4><p>影响消息处理时长的主要因素是代码逻辑。而代码逻辑中可能会影响处理时长代码主要有两种类型：<code>CPU内部计算型代码</code>和<code>外部I/O操作型代码</code>。</p><p>通常情况下代码中如果没有复杂的递归和循环的话，内部计算耗时相对外部I&#x2F;O操作来说几乎可以忽略。所以外部IO型代码是影响消息处理时长的主要症结所在。</p><blockquote><p>外部IO操作型代码举例：</p><p>1)读写外部数据库，例如对远程MySQL的访问<br>2)读写外部缓存系统，例如对远程Redis的访问<br>3)下游系统调用，例如Dubbo的RPC远程调用，Spring Cloud的对下游系统的Http接口调用</p><p>关于下游系统调用逻辑需要进行提前梳理，掌握每个调用操作预期的耗时，这样做是为了能够判断消费逻辑中IO操作的耗时是否合理。通常消息堆积是由于下游系统出现了<code>服务异常</code>或<code>达到了DBMS容量限制</code>，导致消费耗时增加。</p><p>服务异常，并不仅仅是系统中出现的类似 500 这样的代码错误，而可能是更加隐蔽的问题。例如，网络带宽问题。</p><p>达到了DBMS容量限制，其也会引发消息的消费耗时增加。</p></blockquote><h4 id="4-消费并发度"><a href="#4-消费并发度" class="headerlink" title="4 消费并发度"></a>4 消费并发度</h4><p>一般情况下，消费者端的消费并发度由单节点线程数和节点数量共同决定，其值为单节点线程数*节点数量。不过，通常需要优先调整单节点的线程数，若单机硬件资源达到了上限，则需要通过横向扩展来提高消费并发度。</p><blockquote><p>单节点线程数，即单个Consumer所包含的线程数量</p><p>节点数量，即Consumer Group所包含的Consumer数量</p><p>对于普通消息、延时消息及事务消息，并发度计算都是单节点线程数*节点数量。但对于顺序消息则是不同的。顺序消息的消费并发度等于Topic的Queue分区数量。</p><p>1 ）全局顺序消息：该类型消息的Topic只有一个Queue分区。其可以保证该Topic的所有消息被顺序消费。为了保证这个全局顺序性，Consumer Group中在同一时刻只能有一个Consumer的一个线程进行消费。所以其并发度为 1 。</p><p>2 ）分区顺序消息：该类型消息的Topic有多个Queue分区。其仅可以保证该Topic的每个Queue分区中的消息被顺序消费，不能保证整个Topic中消息的顺序消费。为了保证这个分区顺序性，每个Queue分区中的消息在Consumer Group中的同一时刻只能有一个Consumer的一个线程进行消费。即，在同一时刻最多会出现多个Queue分蘖有多个Consumer的多个线程并行消费。所以其并发度为Topic的分区数量。</p></blockquote><h4 id="5-单机线程数计算"><a href="#5-单机线程数计算" class="headerlink" title="5 单机线程数计算"></a>5 单机线程数计算</h4><p>对于一台主机中线程池中线程数的设置需要谨慎，不能盲目直接调大线程数，设置过大的线程数反而会带来大量的线程切换的开销。理想环境下单节点的最优线程数计算模型为：。<br>$$<br>C \times\frac{(T_1 + T_2)}{T_1}<br>$$</p><ul><li>$C$：CPU内核数</li><li>$T_1$：CPU内部逻辑计算耗时</li><li>$T_2$：外部IO操作耗时</li></ul><blockquote><p>最优线程数 &#x3D; $C \times\frac{(T_1 + T_2)}{T_1}$ &#x3D; $C \times \frac{T1}{T1} + C \times \frac{T2}{T1}$ &#x3D;$ C + C \times \frac{T2}{T1}$</p></blockquote><blockquote><p>注意，该计算出的数值是理想状态下的理论数据，在生产环境中，不建议直接使用。而是根据当前环境，先设置一个比该值小的数值然后观察其压测效果，然后再根据效果逐步调大线程数，直至找到在该环境中性能最佳时的值。</p></blockquote><h4 id="6-如何避免"><a href="#6-如何避免" class="headerlink" title="6 如何避免"></a>6 如何避免</h4><p>为了避免在业务使用时出现非预期的消息堆积和消费延迟问题，需要在前期设计阶段对整个业务逻辑进行完善的排查和梳理。其中最重要的就是<code>梳理消息的消费耗时</code>和<code>设置消息消费的并发度</code>。</p><h5 id="梳理消息的消费耗时"><a href="#梳理消息的消费耗时" class="headerlink" title="梳理消息的消费耗时"></a>梳理消息的消费耗时</h5><p>通过压测获取消息的消费耗时，并对耗时较高的操作的代码逻辑进行分析。梳理消息的消费耗时需要关注以下信息：</p><ul><li>消息消费逻辑的计算复杂度是否过高，代码是否存在无限循环和递归等缺陷。</li><li>消息消费逻辑中的I&#x2F;O操作是否是必须的，能否用本地缓存等方案规避。</li><li>消费逻辑中的复杂耗时的操作是否可以做异步化处理。如果可以，是否会造成逻辑错乱。</li></ul><h5 id="设置消费并发度"><a href="#设置消费并发度" class="headerlink" title="设置消费并发度"></a>设置消费并发度</h5><p>对于消息消费并发度的计算，可以通过以下两步实施：</p><ul><li>逐步调大单个Consumer节点的线程数，并观测节点的系统指标，得到单个节点最优的消费线程数和消息吞吐量。</li><li>根据上下游链路的流量峰值计算出需要设置的节点数</li></ul><blockquote><p>节点数 &#x3D; 流量峰值 &#x2F; 单个节点消息吞吐量</p></blockquote><h3 id="九、消息的清理"><a href="#九、消息的清理" class="headerlink" title="九、消息的清理"></a>九、消息的清理</h3><p>消息被消费过后会被清理掉吗？不会的。</p><p>消息是被顺序存储在commitlog文件的，且消息大小不定长，所以消息的清理是不可能以消息为单位进行清理的，而是以commitlog文件为单位进行清理的。否则会急剧下降清理效率，并实现逻辑复杂。</p><p>commitlog文件存在一个过期时间，默认为 72 小时，即三天。除了用户手动清理外，在以下情况下也会被自动清理，无论文件中的消息是否被消费过：</p><ul><li>文件过期，且到达清理时间点（默认为凌晨 4 点）后，自动清理过期文件</li><li>文件过期，且磁盘空间占用率已达过期清理警戒线（默认75%）后，无论是否达到清理时间点，都会自动清理过期文件</li><li>磁盘占用率达到清理警戒线（默认85%）后，开始按照设定好的规则清理文件，无论是否过期。默认会从最老的文件开始清理</li><li>磁盘占用率达到系统危险警戒线（默认90%）后，Broker将拒绝消息写入</li></ul><blockquote><p>需要注意以下几点：<br>1 ）对于RocketMQ系统来说，删除一个1G大小的文件，是一个压力巨大的IO操作。在删除过程中，系统性能会骤然下降。所以，其默认清理时间点为凌晨 4 点，访问量最小的时间。也正因如果，我们要保障磁盘空间的空闲率，不要使系统出现在其它时间点删除commitlog文件的情况。<br>2 ）官方建议RocketMQ服务的Linux文件系统采用ext4。因为对于文件删除操作，ext4要比ext3性能更好</p></blockquote><h2 id="第四章-RocketMQ应用"><a href="#第四章-RocketMQ应用" class="headerlink" title="第四章 RocketMQ应用"></a>第四章 RocketMQ应用</h2><h3 id="一、普通消息"><a href="#一、普通消息" class="headerlink" title="一、普通消息"></a>一、普通消息</h3><h4 id="1-消息发送的分类"><a href="#1-消息发送的分类" class="headerlink" title="1 消息发送的分类"></a>1 消息发送的分类</h4><p>Producer对于消息的发送方式也有多种选择，不同的方式会产生不同的系统效果。</p><h5 id="同步发送消息"><a href="#同步发送消息" class="headerlink" title="同步发送消息"></a>同步发送消息</h5><p>同步发送消息是指，Producer发出一条消息后，会在收到MQ返回的ACK之后才发下一条消息。该方式的消息可靠性最高，但消息发送效率太低。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220420100547032.png" alt="image-20220420100547032"></p><h5 id="异步发送消息"><a href="#异步发送消息" class="headerlink" title="异步发送消息"></a>异步发送消息</h5><p>异步发送消息是指，Producer发出消息后无需等待MQ返回ACK，直接发送下一条消息。该方式的消息可靠性可以得到保障，消息发送效率也可以。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220420100459194.png" alt="image-20220420100459194"></p><h5 id="单向发送消息"><a href="#单向发送消息" class="headerlink" title="单向发送消息"></a>单向发送消息</h5><p>单向发送消息是指，Producer仅负责发送消息，不等待、不处理MQ的ACK。该发送方式时MQ也不返回ACK。该方式的消息发送效率最高，但消息可靠性较差。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220420100722114.png" alt="image-20220420100722114"></p><h4 id="2-代码举例"><a href="#2-代码举例" class="headerlink" title="2 代码举例"></a>2 代码举例</h4><h5 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h5><p>创建一个Maven的Java工程rocketmq-test。</p><p>导入rocketmq的client依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="定义同步消息发送生产者"><a href="#定义同步消息发送生产者" class="headerlink" title="定义同步消息发送生产者"></a>定义同步消息发送生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 创建一个producer，参数为Producer Group名称</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        <span class="hljs-comment">// 指定nameServer地址</span><br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        <span class="hljs-comment">// 设置当发送失败时重试发送的次数，默认为 2 次</span><br>        producer.setRetryTimesWhenSendFailed( <span class="hljs-number">3</span> );<br>        <span class="hljs-comment">// 设置发送超时时限为5s，默认3s</span><br>        producer.setSendMsgTimeout( <span class="hljs-number">5000</span> );<br>        <span class="hljs-comment">// 开启生产者</span><br>        producer.start();<br>        <span class="hljs-comment">// 生产并发送 100 条消息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">100</span> ; i++) &#123;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;someTopic&quot;</span>, <span class="hljs-string">&quot;someTag&quot;</span>, body);<br>            <span class="hljs-comment">// 为消息指定key</span><br>            msg.setKeys(<span class="hljs-string">&quot;key-&quot;</span> + i);<br>            <span class="hljs-comment">// 发送消息</span><br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg);<br>            System.out.println(sendResult);<br>        &#125;<br>        <span class="hljs-comment">// 关闭producer</span><br>        producer.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 消息发送的状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SendStatus</span> &#123;<br>    SEND_OK, <span class="hljs-comment">// 发送成功</span><br>    FLUSH_DISK_TIMEOUT,  <span class="hljs-comment">// 刷盘超时。当Broker设置的刷盘策略为同步刷盘时才可能出现这种异常状态。异步刷盘不会出现</span><br>    FLUSH_SLAVE_TIMEOUT, <span class="hljs-comment">// Slave同步超时。当Broker集群设置的Master-Slave的复制方式为同步复制时才可能出现这种异常状态。异步复制不会出现</span><br>    SLAVE_NOT_AVAILABLE, <span class="hljs-comment">// 没有可用的Slave。当Broker集群设置为Master-Slave的复制方式为同步复制时才可能出现这种异常状态。异步复制不会出现</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="定义异步消息发送生产者"><a href="#定义异步消息发送生产者" class="headerlink" title="定义异步消息发送生产者"></a>定义异步消息发送生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AsyncProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        <span class="hljs-comment">// 指定异步发送失败后不进行重试发送</span><br>        producer.setRetryTimesWhenSendAsyncFailed( <span class="hljs-number">0</span> );<br>        <span class="hljs-comment">// 指定新创建的Topic的Queue数量为 2 ，默认为 4</span><br>        producer.setDefaultTopicQueueNums( <span class="hljs-number">2</span> );<br><br>        producer.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">100</span> ; i++) &#123;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopicA&quot;</span>, <span class="hljs-string">&quot;myTag&quot;</span>, body);<br>            <span class="hljs-comment">// 异步发送。指定回调</span><br>            producer.send(msg, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendCallback</span>() &#123;<br>                    <span class="hljs-comment">// 当producer接收到MQ发送来的ACK后就会触发该回调方法的执行</span><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(SendResult sendResult)</span> &#123;<br>                    System.out.println(sendResult);<br>                    &#125;<br><br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onException</span><span class="hljs-params">(Throwable e)</span> &#123;<br>                    e.printStackTrace();<br>                    &#125;<br>                &#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-comment">// end-for</span><br>        <span class="hljs-comment">// sleep一会儿</span><br>        <span class="hljs-comment">// 由于采用的是异步发送，所以若这里不sleep，</span><br>        <span class="hljs-comment">// 则消息还未发送就会将producer给关闭，报错</span><br>        TimeUnit.SECONDS.sleep( <span class="hljs-number">3</span> );<br>        producer.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="定义单向消息发送生产者"><a href="#定义单向消息发送生产者" class="headerlink" title="定义单向消息发送生产者"></a>定义单向消息发送生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnewayProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        producer.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span> ; i++) &#123;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;single&quot;</span>, <span class="hljs-string">&quot;someTag&quot;</span>, body);<br>            <span class="hljs-comment">// 单向发送</span><br>            producer.sendOneway(msg);<br>        &#125;<br>        producer.shutdown();<br>        System.out.println(<span class="hljs-string">&quot;producer shutdown&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="定义消息消费者"><a href="#定义消息消费者" class="headerlink" title="定义消息消费者"></a>定义消息消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeConsumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-comment">// 定义一个pull消费者</span><br>        <span class="hljs-comment">// DefaultLitePullConsumer consumer = new</span><br>        DefaultLitePullConsumer(<span class="hljs-string">&quot;cg&quot;</span>);<br>        <span class="hljs-comment">// 定义一个push消费者</span><br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;cg&quot;</span>);<br>        <span class="hljs-comment">// 指定nameServer</span><br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        <span class="hljs-comment">// 指定从第一条消息开始消费</span><br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);<br>        <span class="hljs-comment">// 指定消费topic与tag</span><br>        consumer.subscribe(<span class="hljs-string">&quot;someTopic&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">// 指定采用“广播模式”进行消费，默认为“集群模式”</span><br>        <span class="hljs-comment">// consumer.setMessageModel(MessageModel.BROADCASTING);</span><br>        <span class="hljs-comment">// 注册消息监听器</span><br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-comment">// 一旦broker中有了其订阅的消息就会触发该方法的执行，</span><br>            <span class="hljs-comment">// 其返回值为当前consumer消费的状态</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs,ConsumeConcurrentlyContext context)</span> &#123;<br>                <span class="hljs-comment">// 逐条消费消息</span><br>                <span class="hljs-keyword">for</span> (MessageExt msg : msgs) &#123;<br>                    System.out.println(msg);<br>                &#125;<br>                <span class="hljs-comment">// 返回消费状态：消费成功</span><br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 开启消费者消费</span><br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;Consumer Started&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二、顺序消息"><a href="#二、顺序消息" class="headerlink" title="二、顺序消息"></a>二、顺序消息</h3><h4 id="1-什么是顺序消息"><a href="#1-什么是顺序消息" class="headerlink" title="1 什么是顺序消息"></a>1 什么是顺序消息</h4><p>顺序消息指的是，严格按照消息的<code>发送顺序</code>进行<code>消费</code>的消息(FIFO)。</p><p>默认情况下生产者会把消息以Round Robin轮询方式发送到不同的Queue分区队列；而消费消息时会从多个Queue上拉取消息，这种情况下的发送和消费是不能保证顺序的。如果将消息仅发送到同一个Queue中，消费时也只从这个Queue上拉取消息，就严格保证了消息的顺序性。</p><h4 id="2-为什么需要顺序消息"><a href="#2-为什么需要顺序消息" class="headerlink" title="2 为什么需要顺序消息"></a>2 为什么需要顺序消息</h4><p>例如，现在有TOPIC <code>ORDER_STATUS</code>(订单状态)，其下有 4 个Queue队列，该Topic中的不同消息用于描述当前订单的不同状态。假设订单有状态：未支付、已支付、发货中、发货成功、发货失败。</p><p>根据以上订单状态，生产者从时序上可以生成如下几个消息：</p><p>&#96;订单T0000001:未支付 –&gt; 订单T0000001:已支付 –&gt; 订单T0000001:发货中 –&gt; 订单T0000001:发货失败</p><p>消息发送到MQ中之后，Queue的选择如果采用轮询策略，消息在MQ的存储可能如下：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220420101245355.png" alt="image-20220420101245355"></p><p>这种情况下，我们希望Consumer消费消息的顺序和我们发送是一致的，然而上述MQ的投递和消费方式，我们无法保证顺序是正确的。对于顺序异常的消息，Consumer即使设置有一定的状态容错，也不能完全处理好这么多种随机出现组合情况。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220420101325242.png" alt="image-20220420101325242"></p><p>基于上述的情况，可以设计如下方案：对于相同订单号的消息，通过一定的策略，将其放置在一个Queue中，然后消费者再采用一定的策略（例如，一个线程独立处理一个queue，保证处理消息的顺序性），能够保证消费的顺序性。</p><h4 id="3-有序性分类"><a href="#3-有序性分类" class="headerlink" title="3 有序性分类"></a>3 有序性分类</h4><p>根据有序范围的不同，RocketMQ可以严格地保证两种消息的有序性：分区有序与全局有序。</p><h5 id="全局有序"><a href="#全局有序" class="headerlink" title="全局有序"></a>全局有序</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220420101431654.png" alt="image-20220420101431654"></p><p>当发送和消费参与的Queue只有一个时所保证的有序是整个Topic中消息的顺序， 称为<code>全局有序</code>。</p><blockquote><p>在创建Topic时指定Queue的数量。有三种指定方式：</p><ol><li>在代码中创建Producer时，可以指定其自动创建的Topic的Queue数量</li><li>在RocketMQ可视化控制台中手动创建Topic时指定Queue数量</li><li>使用mqadmin命令手动创建Topic时指定Queue数量</li></ol></blockquote><h5 id="分区有序"><a href="#分区有序" class="headerlink" title="分区有序"></a>分区有序</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/image-20220420101447216.png" alt="image-20220420101447216"></p><p>如果有多个Queue参与，其仅可保证在该Queue分区队列上的消息顺序，则称为<code>分区有序</code>。</p><blockquote><p>如何实现Queue的选择？在定义Producer时我们可以指定消息队列选择器，而这个选择器是我们自己实现了MessageQueueSelector接口定义的。</p><p>在定义选择器的选择算法时，一般需要使用选择key。这个选择key可以是消息key也可以是其它数据。但无论谁做选择key，都不能重复，都是唯一的。</p><p>一般性的选择算法是，让选择key（或其hash值）与该Topic所包含的Queue的数量取模，其结果即为选择出的Queue的QueueId。</p><p>取模算法存在一个问题：不同选择key与Queue数量取模结果可能会是相同的，即不同选择key的消息可能会出现在相同的Queue，即同一个Consuemr可能会消费到不同选择key的消息。这个问题如何解决？一般性的作法是，从消息中获取到选择key，对其进行判断。若是当前Consumer需要消费的消息，则直接消费，否则，什么也不做。这种做法要求选择key要能够随着消息一起被Consumer获取到。此时使用消息key作为选择key是比较好的做法。</p><p>以上做法会不会出现如下新的问题呢？不属于那个Consumer的消息被拉取走了，那么应该消费该消息的Consumer是否还能再消费该消息呢？同一个Queue中的消息不可能被同一个Group中的不同Consumer同时消费。所以，消费现一个Queue的不同选择key的消息的Consumer一定属于不同的Group。而不同的Group中的Consumer间的消费是相互隔离的，互不影响的。</p></blockquote><h4 id="4-代码举例"><a href="#4-代码举例" class="headerlink" title="4 代码举例"></a>4 代码举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderedProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        producer.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">100</span> ; i++) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TopicA&quot;</span>, <span class="hljs-string">&quot;TagA&quot;</span>, body);<br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageQueueSelector</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> MessageQueue <span class="hljs-title function_">select</span><span class="hljs-params">(List&lt;MessageQueue&gt; mqs,Message msg, Object arg)</span> &#123;<br>                        <span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> (Integer) arg;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> id % mqs.size();<br>                        <span class="hljs-keyword">return</span> mqs.get(index);<br>                    &#125;<br>                &#125;, orderId);<br>            System.out.println(sendResult);<br>        &#125;<br>        producer.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="三、延时消息"><a href="#三、延时消息" class="headerlink" title="三、延时消息"></a>三、延时消息</h3><h4 id="1-什么是延时消息"><a href="#1-什么是延时消息" class="headerlink" title="1 什么是延时消息"></a>1 什么是延时消息</h4><p>当消息写入到Broker后，在指定的时长后才可被消费处理的消息，称为延时消息。</p><p>采用RocketMQ的延时消息可以实现<code>定时任务</code>的功能，而无需使用定时器。典型的应用场景是，电商交易中超时未支付关闭订单的场景， 12306 平台订票超时未支付取消订票的场景。</p><blockquote><p>在电商平台中，订单创建时会发送一条延迟消息。这条消息将会在 30 分钟后投递给后台业务系统（Consumer），后台业务系统收到该消息后会判断对应的订单是否已经完成支付。如果未完成，则取消订单，将商品再次放回到库存；如果完成支付，则忽略。</p><p>在 12306 平台中，车票预订成功后就会发送一条延迟消息。这条消息将会在 45 分钟后投递给后台业务系统（Consumer），后台业务系统收到该消息后会判断对应的订单是否已经完成支付。如果未完成，则取消预订，将车票再次放回到票池；如果完成支付，则忽略。</p></blockquote><h4 id="2-延时等级"><a href="#2-延时等级" class="headerlink" title="2 延时等级"></a>2 延时等级</h4><p>延时消息的延迟时长<code>不支持随意时长</code>的延迟，是通过特定的延迟等级来指定的。延时等级定义在RocketMQ服务端的MessageStoreConfig类中的如下变量中：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208153410.png" alt="输入图片说明"></p><p>即，若指定的延时等级为 3 ，则表示延迟时长为10s，即延迟等级是从 1 开始计数的。</p><p>当然，如果需要自定义的延时等级，可以通过在broker加载的配置中新增如下配置（例如下面增加了 1天这个等级1d）。配置文件在RocketMQ安装目录下的conf目录中。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">messageDelayLevel</span> = <span class="hljs-number">1</span>s <span class="hljs-number">5</span>s <span class="hljs-number">10</span>s <span class="hljs-number">30</span>s <span class="hljs-number">1</span>m <span class="hljs-number">2</span>m <span class="hljs-number">3</span>m <span class="hljs-number">4</span>m <span class="hljs-number">5</span>m <span class="hljs-number">6</span>m <span class="hljs-number">7</span>m <span class="hljs-number">8</span>m <span class="hljs-number">9</span>m <span class="hljs-number">10</span>m <span class="hljs-number">20</span>m <span class="hljs-number">30</span>m <span class="hljs-number">1</span>h <span class="hljs-number">2</span>h <span class="hljs-number">1</span>d<br></code></pre></td></tr></table></figure><h4 id="3-延时消息实现原理"><a href="#3-延时消息实现原理" class="headerlink" title="3 延时消息实现原理"></a>3 延时消息实现原理</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208153523.png" alt="输入图片说明"></p><h5 id="具体实现方案："><a href="#具体实现方案：" class="headerlink" title="具体实现方案："></a>具体实现方案：</h5><h6 id="修改消息"><a href="#修改消息" class="headerlink" title="修改消息"></a>修改消息</h6><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208153545.png" alt="输入图片说明"></p><p>Producer将消息发送到Broker后，Broker会首先将消息写入到commitlog文件，然后需要将其分发到相应的consumequeue。不过，在分发之前，系统会先判断消息中是否带有延时等级。若没有，则直接正常分发；若有则需要经历一个复杂的过程：</p><ul><li>修改消息的Topic为SCHEDULE_TOPIC_XXXX</li><li>根据延时等级，在consumequeue目录中SCHEDULE_TOPIC_XXXX主题下创建出相应的queueId目录与consumequeue文件（如果没有这些目录与文件的话）。</li></ul><blockquote><p>延迟等级delayLevel与queueId的对应关系为queueId &#x3D; delayLevel -1<br>需要注意，在创建queueId目录时，并不是一次性地将所有延迟等级对应的目录全部创建完毕，而是用到哪个延迟等级创建哪个目录</p></blockquote><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208153635.png" alt="输入图片说明"></p><ul><li>修改消息索引单元内容。索引单元中的Message Tag HashCode部分原本存放的是消息的Tag的Hash值。现修改为消息的<code>投递时间</code>。投递时间是指该消息被重新修改为原Topic后再次被写入到commitlog中的时间。<code>投递时间 = 消息存储时间 + 延时等级时间</code>。消息存储时间指的是消息被发送到Broker时的时间戳。</li><li>将消息索引写入到SCHEDULE_TOPIC_XXXX主题下相应的consumequeue中</li></ul><blockquote><p>SCHEDULE_TOPIC_XXXX目录中各个延时等级Queue中的消息是如何排序的？</p><p>是按照消息投递时间排序的。一个Broker中同一等级的所有延时消息会被写入到consumequeue目录中SCHEDULE_TOPIC_XXXX目录下相同Queue中。即一个Queue中消息投递时间的延迟等级时间是相同的。那么投递时间就取决于于<code>消息存储时间</code>了。即按照消息被发送到Broker的时间进行排序的。</p></blockquote><h6 id="投递延时消息"><a href="#投递延时消息" class="headerlink" title="投递延时消息"></a>投递延时消息</h6><p>Broker内部有一个延迟消息服务类ScheuleMessageService，其会消费SCHEDULE_TOPIC_XXXX中的消息，即按照每条消息的投递时间，将延时消息投递到目标Topic中。不过，在投递之前会从commitlog中将原来写入的消息再次读出，并将其原来的延时等级设置为 0 ，即原消息变为了一条不延迟的普通消息。然后再次将消息投递到目标Topic中。</p><blockquote><p>ScheuleMessageService在Broker启动时，会创建并启动一个定时器TImer，用于执行相应的定时任务。系统会根据延时等级的个数，定义相应数量的TimerTask，每个TimerTask负责一个延迟等级消息的消费与投递。每个TimerTask都会检 测相应Queue队列的第一条消息是否到期。若第一条消息未到期，则后面的所有消息更不会到期（消息是按照投递时间排序的）；若第一条消息到期了，则将该消息投递到目标Topic，即消费该消息。</p></blockquote><h6 id="将消息重新写入commitlog"><a href="#将消息重新写入commitlog" class="headerlink" title="将消息重新写入commitlog"></a>将消息重新写入commitlog</h6><p>延迟消息服务类ScheuleMessageService将延迟消息再次发送给了commitlog，并再次形成新的消息索引条目，分发到相应Queue。</p><blockquote><p>这其实就是一次普通消息发送。只不过这次的消息Producer是延迟消息服务类ScheuleMessageService。</p></blockquote><h4 id="4-代码举例-1"><a href="#4-代码举例-1" class="headerlink" title="4 代码举例"></a>4 代码举例</h4><p>定义DelayProducer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        producer.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span> ; i++) &#123;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TopicB&quot;</span>, <span class="hljs-string">&quot;someTag&quot;</span>, body);<br>            <span class="hljs-comment">// 指定消息延迟等级为 3 级，即延迟10s</span><br>            <span class="hljs-comment">// msg.setDelayTimeLevel(3);</span><br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg);<br>            <span class="hljs-comment">// 输出消息被发送的时间</span><br>            System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>            System.out.println(<span class="hljs-string">&quot; ,&quot;</span> + sendResult);<br>        &#125;<br>        producer.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义OtherConsumer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherConsumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;cg&quot;</span>);<br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET );<br>        consumer.subscribe(<span class="hljs-string">&quot;TopicB&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs,ConsumeConcurrentlyContext context)</span> &#123;<br>            <span class="hljs-keyword">for</span> (MessageExt msg : msgs) &#123;<br>                    <span class="hljs-comment">// 输出消息被消费的时间</span><br>                    System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>                    System.out.println(<span class="hljs-string">&quot; ,&quot;</span> + msg);<br>                &#125;<br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;Consumer Started&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="四、事务消息"><a href="#四、事务消息" class="headerlink" title="四、事务消息"></a>四、事务消息</h3><h4 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1 问题引入"></a>1 问题引入</h4><p>这里的一个需求场景是：工行用户A向建行用户B转账 1 万元。</p><p>我们可以使用同步消息来处理该需求场景：</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208154429.png" alt="输入图片说明"></p><ul><li><ol><li>工行系统发送一个给B增款 1 万元的同步消息M给Broker</li></ol></li><li><ol><li>消息被Broker成功接收后，向工行系统发送成功ACK</li></ol></li><li><ol><li>工行系统收到成功ACK后从用户A中扣款 1 万元</li></ol></li><li><ol><li>建行系统从Broker中获取到消息M</li></ol></li><li><ol><li>建行系统消费消息M，即向用户B中增加 1 万元</li></ol></li></ul><blockquote><p>这其中是有问题的：若第 3 步中的扣款操作失败，但消息已经成功发送到了Broker。对于MQ来说，只要消息写入成功，那么这个消息就可以被消费。此时建行系统中用户B增加了 1 万元。出现了数据不一致问题。</p></blockquote><h4 id="2-解决思路"><a href="#2-解决思路" class="headerlink" title="2 解决思路"></a>2 解决思路</h4><p>解决思路是，让第 1 、 2 、 3 步具有原子性，要么全部成功，要么全部失败。即消息发送成功后，必须要保证扣款成功。如果扣款失败，则回滚发送成功的消息。而该思路即使用<code>事务消息</code>。这里要使用<code>分布式事务</code>解决方案。</p><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208154545.png" alt="输入图片说明"></p><h5 id="使用事务消息来处理该需求场景："><a href="#使用事务消息来处理该需求场景：" class="headerlink" title="使用事务消息来处理该需求场景："></a>使用事务消息来处理该需求场景：</h5><ol><li><p>事务管理器TM向事务协调器TC发起指令，开启全局事务</p></li><li><p>工行系统发一个给B增款 1 万元的事务消息M给TC</p></li><li><p>TC会向Broker发送半事务消息prepareHalf，将消息M预提交到Broker。此时的建行系统是看不到Broker中的消息M的</p></li><li><p>Broker会将预提交执行结果Report给TC。</p></li><li><p>如果预提交失败，则TC会向TM上报预提交失败的响应，全局事务结束；如果预提交成功，TC会调用工行系统的回调操作，去完成工行用户A的预扣款 1 万元的操作</p></li><li><p>工行系统会向TC发送预扣款执行结果，即本地事务的执行状态</p></li><li><p>TC收到预扣款执行结果后，会将结果上报给TM。</p><blockquote><p>预扣款执行结果存在三种可能性：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 描述本地事务执行状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">LocalTransactionState</span> &#123;<br>    COMMIT_MESSAGE,  <span class="hljs-comment">// 本地事务执行成功</span><br>    ROLLBACK_MESSAGE,  <span class="hljs-comment">// 本地事务执行失败</span><br>    UNKNOW,  <span class="hljs-comment">// 不确定，表示需要进行回查以确定本地事务的执行结果</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>TM会根据上报结果向TC发出不同的确认指令</p><ul><li>若预扣款成功（本地事务状态为COMMIT_MESSAGE），则TM向TC发送Global Commit指令</li><li>若预扣款失败（本地事务状态为ROLLBACK_MESSAGE），则TM向TC发送Global Rollback指令</li><li>若现未知状态（本地事务状态为UNKNOW），则会触发工行系统的本地事务状态<code>回查操作</code>。回查操作会将回查结果，即COMMIT_MESSAGE或ROLLBACK_MESSAGE Report给TC。TC将结果上报给TM，TM会再向TC发送最终确认指令Global Commit或Global Rollback</li></ul></li><li><p>TC在接收到指令后会向Broker与工行系统发出确认指令</p><ul><li>TC接收的若是Global Commit指令，则向Broker与工行系统发送Branch Commit指令。此时Broker中的消息M才可被建行系统看到；此时的工行用户A中的扣款操作才真正被确认</li><li>TC接收到的若是Global Rollback指令，则向Broker与工行系统发送Branch Rollback指令。此时Broker中的消息M将被撤销；工行用户A中的扣款操作将被回滚</li></ul></li></ol><blockquote><p>以上方案就是为了确保<code>消息投递</code>与<code>扣款操作</code>能够在一个事务中，要成功都成功，有一个失败，则全部回滚。</p><p>以上方案并不是一个典型的XA模式。因为XA模式中的分支事务是异步的，而事务消息方案中的消息预提交与预扣款操作间是同步的。</p></blockquote><h4 id="3-基础"><a href="#3-基础" class="headerlink" title="3 基础"></a>3 基础</h4><h5 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h5><p>对于分布式事务，通俗地说就是，一次操作由若干分支操作组成，这些分支操作分属不同应用，分布在不同服务器上。分布式事务需要保证这些分支操作要么全部成功，要么全部失败。分布式事务与普通事务一样，就是为了保证操作结果的一致性。</p><h5 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h5><p>RocketMQ提供了类似X&#x2F;Open XA的分布式事务功能，通过事务消息能达到分布式事务的最终一致。XA是一种分布式事务解决方案，一种分布式事务处理模式。</p><h5 id="半事务消息"><a href="#半事务消息" class="headerlink" title="半事务消息"></a>半事务消息</h5><p>暂不能投递的消息，发送方已经成功地将消息发送到了Broker，但是Broker未收到最终确认指令，此时该消息被标记成“暂不能投递”状态，即不能被消费者看到。处于该种状态下的消息即半事务消息。</p><h5 id="本地事务状态"><a href="#本地事务状态" class="headerlink" title="本地事务状态"></a>本地事务状态</h5><p>Producer<code>回调操作</code>执行的结果为本地事务状态，其会发送给TC，而TC会再发送给TM。TM会根据TC发送来的本地事务状态来决定全局事务确认指令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 描述本地事务执行状态</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">LocalTransactionState</span> &#123;<br>    COMMIT_MESSAGE,  <span class="hljs-comment">// 本地事务执行成功</span><br>    ROLLBACK_MESSAGE,  <span class="hljs-comment">// 本地事务执行失败</span><br>    UNKNOW,  <span class="hljs-comment">// 不确定，表示需要进行回查以确定本地事务的执行结果</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="消息回查"><a href="#消息回查" class="headerlink" title="消息回查"></a>消息回查</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208155046.png" alt="输入图片说明"></p><p>消息回查，即重新查询本地事务的执行状态。本例就是重新到DB中查看预扣款操作是否执行成功。</p><blockquote><p>注意，消息回查不是重新执行回调操作。回调操作是进行预扣款操作，而消息回查则是查看预扣款操作执行的结果。</p><p>引发消息回查的原因最常见的有两个：<br>1)回调操作返回UNKNWON<br>2)TC没有接收到TM的最终全局事务确认指令</p></blockquote><h5 id="RocketMQ中的消息回查设置"><a href="#RocketMQ中的消息回查设置" class="headerlink" title="RocketMQ中的消息回查设置"></a>RocketMQ中的消息回查设置</h5><p>关于消息回查，有三个常见的属性设置。它们都在broker加载的配置文件中设置，例如：</p><ul><li>transactionTimeout&#x3D;20，指定TM在 20 秒内应将最终确认状态发送给TC，否则引发消息回查。默认为 60 秒</li><li>transactionCheckMax&#x3D;5，指定最多回查 5 次，超过后将丢弃消息并记录错误日志。默认 15 次。</li><li>transactionCheckInterval&#x3D;10，指定设置的多次消息回查的时间间隔为 10 秒。默认为 60 秒。</li></ul><h4 id="4-XA模式三剑客"><a href="#4-XA模式三剑客" class="headerlink" title="4 XA模式三剑客"></a>4 XA模式三剑客</h4><h5 id="XA协议"><a href="#XA协议" class="headerlink" title="XA协议"></a>XA协议</h5><p>XA（Unix Transaction）是一种分布式事务解决方案，一种分布式事务处理模式，是基于XA协议的。<br>XA协议由Tuxedo（Transaction for Unix has been Extended for Distributed Operation，分布式操作扩展之后的Unix事务系统）首先提出的，并交给X&#x2F;Open组织，作为资源管理器与事务管理器的接口标准。</p><p><code>XA模式中有三个重要组件：TC、TM、RM。</code></p><h5 id="TC"><a href="#TC" class="headerlink" title="TC"></a>TC</h5><p>Transaction Coordinator，事务协调者。维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><p><code>RocketMQ中Broker充当着TC。</code></p><h5 id="TM"><a href="#TM" class="headerlink" title="TM"></a>TM</h5><p>Transaction Manager，事务管理器。定义全局事务的范围：开始全局事务、提交或回滚全局事务。它实际是全局事务的发起者。</p><p><code>RocketMQ中事务消息的Producer充当着TM。</code></p><h5 id="RM"><a href="#RM" class="headerlink" title="RM"></a>RM</h5><p>Resource Manager，资源管理器。管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p><p><code>RocketMQ中事务消息的Producer及Broker均是RM。</code></p><h4 id="5-XA模式架构"><a href="#5-XA模式架构" class="headerlink" title="5 XA模式架构"></a>5 XA模式架构</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208155359.png" alt="输入图片说明"></p><p>XA模式是一个典型的2PC，其执行原理如下：</p><ol><li>TM向TC发起指令，开启一个全局事务。</li><li>根据业务要求，各个RM会逐个向TC注册分支事务，然后TC会逐个向RM发出预执行指令。</li><li>各个RM在接收到指令后会在进行本地事务预执行。</li><li>RM将预执行结果Report给TC。当然，这个结果可能是成功，也可能是失败。</li><li>TC在接收到各个RM的Report后会将汇总结果上报给TM，根据汇总结果TM会向TC发出确认指令。<ul><li>若所有结果都是成功响应，则向TC发送Global Commit指令。</li><li>只要有结果是失败响应，则向TC发送Global Rollback指令。</li></ul></li><li>TC在接收到指令后再次向RM发送确认指令。</li></ol><blockquote><p>事务消息方案并不是一个典型的XA模式。因为XA模式中的分支事务是异步的，而事务消息方案中的消息预提交与预扣款操作间是同步的。</p></blockquote><h4 id="6-注意"><a href="#6-注意" class="headerlink" title="6 注意"></a>6 注意</h4><ul><li>事务消息不支持延时消息</li><li>对于事务消息要做好幂等性检查，因为事务消息可能不止一次被消费（因为存在回滚后再提交的情况）</li></ul><h4 id="7-代码举例"><a href="#7-代码举例" class="headerlink" title="7 代码举例"></a>7 代码举例</h4><h5 id="定义事务监听器"><a href="#定义事务监听器" class="headerlink" title="定义事务监听器"></a>定义事务监听器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ICBCTransactionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TransactionListener</span> &#123;<br>    <span class="hljs-comment">// 回调操作方法</span><br>    <span class="hljs-comment">// 消息预提交成功就会触发该方法的执行，用于完成本地事务</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">executeLocalTransaction</span><span class="hljs-params">(Message msg,Object arg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;预提交消息成功：&quot;</span> + msg);<br>        <span class="hljs-comment">// 假设接收到TAGA的消息就表示扣款操作成功，TAGB的消息表示扣款失败，</span><br>        <span class="hljs-comment">// TAGC表示扣款结果不清楚，需要执行消息回查</span><br>        <span class="hljs-keyword">if</span> (StringUtils.equals(<span class="hljs-string">&quot;TAGA&quot;</span>, msg.getTags())) &#123;<br>            <span class="hljs-keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.equals(<span class="hljs-string">&quot;TAGB&quot;</span>, msg.getTags())) &#123;<br>            <span class="hljs-keyword">return</span> LocalTransactionState.ROLLBACK_MESSAGE;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (StringUtils.equals(<span class="hljs-string">&quot;TAGC&quot;</span>, msg.getTags())) &#123;<br>            <span class="hljs-keyword">return</span> LocalTransactionState.UNKNOW;<br>        &#125;<br>            <span class="hljs-keyword">return</span> LocalTransactionState.UNKNOW;<br>    &#125;<br><br>    <span class="hljs-comment">// 消息回查方法</span><br>    <span class="hljs-comment">// 引发消息回查的原因最常见的有两个：</span><br>    <span class="hljs-comment">// 1)回调操作返回UNKNWON</span><br>    <span class="hljs-comment">// 2)TC没有接收到TM的最终全局事务确认指令</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> LocalTransactionState <span class="hljs-title function_">checkLocalTransaction</span><span class="hljs-params">(MessageExt msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行消息回查&quot;</span> + msg.getTags());<br>        <span class="hljs-keyword">return</span> LocalTransactionState.COMMIT_MESSAGE;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="定义事务消息生产者"><a href="#定义事务消息生产者" class="headerlink" title="定义事务消息生产者"></a>定义事务消息生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TransactionMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionMQProducer</span>(<span class="hljs-string">&quot;tpg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 定义一个线程池</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> corePoolSize 线程池中核心线程数量</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> maximumPoolSize 线程池中最多线程数</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> keepAliveTime 这是一个时间。当线程池中线程数量大于核心线程数量是，多余空闲线程的存活时长</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> unit 时间单位</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> workQueue 临时存放任务的队列，其参数就是队列的长度</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> threadFactory 线程工厂</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>( <span class="hljs-number">2</span> , <span class="hljs-number">5</span> ,<span class="hljs-number">100</span> , TimeUnit.SECONDS,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;( <span class="hljs-number">2000</span> ), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadFactory</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable r)</span> &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>                thread.setName(<span class="hljs-string">&quot;client-transaction-msg-check-thread&quot;</span>);<br>                <span class="hljs-keyword">return</span> thread;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 为生产者指定一个线程池</span><br>        producer.setExecutorService(executorService);<br>        <span class="hljs-comment">// 为生产者添加事务监听器</span><br>        producer.setTransactionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ICBCTransactionListener</span>());<br>        producer.start();<br>        String[] tags = &#123;<span class="hljs-string">&quot;TAGA&quot;</span>,<span class="hljs-string">&quot;TAGB&quot;</span>,<span class="hljs-string">&quot;TAGC&quot;</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">3</span> ; i++) &#123;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TTopic&quot;</span>, tags[i], body);<br>            <span class="hljs-comment">// 发送事务消息</span><br>            <span class="hljs-comment">// 第二个参数用于指定在执行本地事务时要使用的业务参数</span><br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span>producer.sendMessageInTransaction(msg,<span class="hljs-literal">null</span>);<br>            System.out.println(<span class="hljs-string">&quot;发送结果为：&quot;</span> +sendResult.getSendStatus());<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="定义消费者"><a href="#定义消费者" class="headerlink" title="定义消费者"></a>定义消费者</h5><p>直接使用普通消息的SomeConsumer作为消费者即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeConsumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-comment">// DefaultLitePullConsumer consumer = new DefaultLitePullConsumer(&quot;cg&quot;);</span><br>        <span class="hljs-comment">// 定义一个push消费者</span><br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;cg&quot;</span>);<br>        <span class="hljs-comment">// 指定nameServer</span><br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        <span class="hljs-comment">// 指定从第一条消息开始消费</span><br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);<br>        <span class="hljs-comment">// 指定消费topic与tag</span><br>        consumer.subscribe(<span class="hljs-string">&quot;TTopic&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">// 指定采用“广播模式”进行消费，默认为“集群模式”</span><br>        <span class="hljs-comment">// consumer.setMessageModel(MessageModel.BROADCASTING);</span><br><br>        <span class="hljs-comment">// 注册消息监听器</span><br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-comment">// 一旦broker中有了其订阅的消息就会触发该方法的执行，</span><br>            <span class="hljs-comment">// 其返回值为当前consumer消费的状态</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs,ConsumeConcurrentlyContext context)</span> &#123;<br>                <span class="hljs-comment">// 逐条消费消息</span><br>                <span class="hljs-keyword">for</span> (MessageExt msg : msgs) &#123;<br>                    System.out.println(msg);<br>                &#125;<br>            <span class="hljs-comment">// 返回消费状态：消费成功</span><br>            <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 开启消费者消费</span><br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;Consumer Started&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、批量消息"><a href="#五、批量消息" class="headerlink" title="五、批量消息"></a>五、批量消息</h3><h4 id="1-批量发送消息"><a href="#1-批量发送消息" class="headerlink" title="1 批量发送消息"></a>1 批量发送消息</h4><h5 id="发送限制"><a href="#发送限制" class="headerlink" title="发送限制"></a>发送限制</h5><p>生产者进行消息发送时可以一次发送多条消息，这可以大大提升Producer的发送效率。不过需要注意以下几点：</p><ul><li>批量发送的消息必须具有相同的Topic</li><li>批量发送的消息必须具有相同的刷盘策略</li><li>批量发送的消息不能是延时消息与事务消息</li></ul><h5 id="批量发送大小"><a href="#批量发送大小" class="headerlink" title="批量发送大小"></a>批量发送大小</h5><p>默认情况下，一批发送的消息总大小不能超过4MB字节。如果想超出该值，有两种解决方案：</p><ul><li>方案一：将批量消息进行拆分，拆分为若干不大于4M的消息集合分多次批量发送</li><li>方案二：在Producer端与Broker端修改属性</li></ul><p>** Producer端需要在发送之前设置Producer的maxMessageSize属性</p><p>** Broker端需要修改其加载的配置文件中的maxMessageSize属性</p><h5 id="生产者发送的消息大小"><a href="#生产者发送的消息大小" class="headerlink" title="生产者发送的消息大小"></a>生产者发送的消息大小</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208160513.png" alt="输入图片说明"></p><p>生产者通过send()方法发送的Message，并不是直接将Message序列化后发送到网络上的，而是通过这个Message生成了一个字符串发送出去的。这个字符串由四部分构成：Topic、消息Body、消息日志（占 20 字节），及用于描述消息的一堆属性key-value。这些属性中包含例如生产者地址、生产时间、要发送的QueueId等。最终写入到Broker中消息单元中的数据都是来自于这些属性。</p><h4 id="2-批量消费消息"><a href="#2-批量消费消息" class="headerlink" title="2 批量消费消息"></a>2 批量消费消息</h4><h5 id="修改批量属性"><a href="#修改批量属性" class="headerlink" title="修改批量属性"></a>修改批量属性</h5><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208160544.png" alt="输入图片说明"></p><p>Consumer的MessageListenerConcurrently监听接口的consumeMessage()方法的第一个参数为消息列表，但默认情况下每次只能消费一条消息。若要使其一次可以消费多条消息，则可以通过修改Consumer的consumeMessageBatchMaxSize属性来指定。不过，该值不能超过 32 。因为默认情况下消费者每次可以拉取的消息最多是 32 条。若要修改一次拉取的最大值，则可通过修改Consumer的pullBatchSize属性来指定。</p><h5 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h5><p>Consumer的pullBatchSize属性与consumeMessageBatchMaxSize属性是否设置的越大越好？当然不是。</p><ul><li>pullBatchSize值设置的越大，Consumer每拉取一次需要的时间就会越长，且在网络上传输出现问题的可能性就越高。若在拉取过程中若出现了问题，那么本批次所有消息都需要全部重新拉取。</li><li>consumeMessageBatchMaxSize值设置的越大，Consumer的消息并发消费能力越低，且这批被消费的消息具有相同的消费结果。因为consumeMessageBatchMaxSize指定的一批消息只会使用一个线程进行处理，且在处理过程中只要有一个消息处理异常，则这批消息需要全部重新再次消费处理。</li></ul><h4 id="3-代码举例"><a href="#3-代码举例" class="headerlink" title="3 代码举例"></a>3 代码举例</h4><p>该批量发送的需求是，不修改最大发送4M的默认值，但要防止发送的批量消息超出4M的限制。</p><h5 id="定义消息列表分割器"><a href="#定义消息列表分割器" class="headerlink" title="定义消息列表分割器"></a>定义消息列表分割器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">// 消息列表分割器：其只会处理每条消息的大小不超4M的情况。</span><br>    <span class="hljs-comment">// 若存在某条消息，其本身大小大于4M，这个分割器无法处理，</span><br>    <span class="hljs-comment">// 其直接将这条消息构成一个子列表返回。并没有再进行分割</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListSplitter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;List&lt;Message&gt;&gt; &#123;<br>    <span class="hljs-comment">// 指定极限值为4M</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIZE_LIMIT</span> <span class="hljs-operator">=</span>  <span class="hljs-number">4</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> ;<br>    <span class="hljs-comment">// 存放所有要发送的消息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Message&gt; messages;<br>    <span class="hljs-comment">// 要进行批量发送消息的小集合起始索引</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> currIndex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MessageListSplitter</span><span class="hljs-params">(List&lt;Message&gt; messages)</span> &#123;<br>        <span class="hljs-built_in">this</span>.messages = messages;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 判断当前开始遍历的消息索引要小于消息总数</span><br>    <span class="hljs-keyword">return</span> currIndex &lt; messages.size();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Message&gt; <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextIndex</span> <span class="hljs-operator">=</span> currIndex;<br>        <span class="hljs-comment">// 记录当前要发送的这一小批次消息列表的大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span> (; nextIndex &lt; messages.size(); nextIndex++) &#123;<br>            <span class="hljs-comment">// 获取当前遍历的消息</span><br>            <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> messages.get(nextIndex);<br>            <span class="hljs-comment">// 统计当前遍历的message的大小</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmpSize</span> <span class="hljs-operator">=</span> message.getTopic().length() + message.getBody().length;<br>            Map&lt;String, String&gt; properties = message.getProperties();<br>            <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry :properties.entrySet()) &#123;<br>                tmpSize += entry.getKey().length() +<br>                entry.getValue().length();<br>            &#125;<br>            tmpSize = tmpSize + <span class="hljs-number">20</span> ;<br>            <span class="hljs-comment">// 判断当前消息本身是否大于4M</span><br>            <span class="hljs-keyword">if</span> (tmpSize &gt; SIZE_LIMIT) &#123;<br>                <span class="hljs-keyword">if</span> (nextIndex - currIndex == <span class="hljs-number">0</span> ) &#123;<br>                    nextIndex++;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (tmpSize + totalSize &gt; SIZE_LIMIT) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                totalSize += tmpSize;<br>            &#125;<br><br>        &#125; <span class="hljs-comment">// end-for</span><br>        <span class="hljs-comment">// 获取当前messages列表的子集合[currIndex, nextIndex)</span><br>        List&lt;Message&gt; subList = messages.subList(currIndex, nextIndex);<br>        <span class="hljs-comment">// 下次遍历的开始索引</span><br>        currIndex = nextIndex;<br>        <span class="hljs-keyword">return</span> subList;<br>    &#125;<br>&#125;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h5 id="定义批量消息生产者"><a href="#定义批量消息生产者" class="headerlink" title="定义批量消息生产者"></a>定义批量消息生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        <span class="hljs-comment">// 指定要发送的消息的最大大小，默认是4M</span><br>        <span class="hljs-comment">// 不过，仅修改该属性是不行的，还需要同时修改broker加载的配置文件中的</span><br>        <span class="hljs-comment">// maxMessageSize属性</span><br>        <span class="hljs-comment">// producer.setMaxMessageSize(8 * 1024 * 1024);</span><br>        producer.start();<br><br>        <span class="hljs-comment">// 定义要发送的消息集合</span><br>        List&lt;Message&gt; messages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">100</span> ; i++) &#123;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;someTopic&quot;</span>, <span class="hljs-string">&quot;someTag&quot;</span>, body);<br>            messages.add(msg);<br>        &#125;<br><br>        <span class="hljs-comment">// 定义消息列表分割器，将消息列表分割为多个不超出4M大小的小列表</span><br>        <span class="hljs-type">MessageListSplitter</span> <span class="hljs-variable">splitter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListSplitter</span>(messages);<br>        <span class="hljs-keyword">while</span> (splitter.hasNext()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                List&lt;Message&gt; listItem = splitter.next();<br>                producer.send(listItem);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        producer.shutdown();<br>    &#125;<br>&#125;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h5 id="定义批量消息消费者"><a href="#定义批量消息消费者" class="headerlink" title="定义批量消息消费者"></a>定义批量消息消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchConsumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;cg&quot;</span>);<br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);<br>        consumer.subscribe(<span class="hljs-string">&quot;someTopicA&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>        <span class="hljs-comment">// 指定每次可以消费 10 条消息，默认为 1</span><br>        consumer.setConsumeMessageBatchMaxSize( <span class="hljs-number">10</span> );<br>        <span class="hljs-comment">// 指定每次可以从Broker拉取 40 条消息，默认为 32</span><br>        consumer.setPullBatchSize( <span class="hljs-number">40</span> );<br><br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs,ConsumeConcurrentlyContext context)</span> &#123;<br>                <span class="hljs-keyword">for</span> (MessageExt msg : msgs) &#123;<br>                    System.out.println(msg);<br>                &#125;<br>                <span class="hljs-comment">// 消费成功的返回结果</span><br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>                <span class="hljs-comment">// 消费异常时的返回结果</span><br>                <span class="hljs-comment">// return ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br>            &#125;<br>        &#125;);<br><br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;Consumer Started&quot;</span>);<br>    &#125;<br>&#125;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h3 id="六、消息过滤"><a href="#六、消息过滤" class="headerlink" title="六、消息过滤"></a>六、消息过滤</h3><p>消息者在进行消息订阅时，除了可以指定要订阅消息的Topic外，还可以对指定Topic中的消息根据指定条件进行过滤，即可以订阅比Topic更加细粒度的消息类型。</p><p>对于指定Topic消息的过滤有两种过滤方式：Tag过滤与SQL过滤。</p><h4 id="1-Tag过滤"><a href="#1-Tag过滤" class="headerlink" title="1 Tag过滤"></a>1 Tag过滤</h4><p>通过consumer的subscribe()方法指定要订阅消息的Tag。如果订阅多个Tag的消息，Tag间使用或运算符(双竖线||)连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;CID_EXAMPLE&quot;</span>);<br>consumer.subscribe(<span class="hljs-string">&quot;TOPIC&quot;</span>, <span class="hljs-string">&quot;TAGA || TAGB || TAGC&quot;</span>);Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h4 id="2-SQL过滤"><a href="#2-SQL过滤" class="headerlink" title="2 SQL过滤"></a>2 SQL过滤</h4><p>SQL过滤是一种通过特定表达式对事先埋入到消息中的<code>用户属性</code>进行筛选过滤的方式。通过SQL过滤，可以实现对消息的复杂过滤。不过，只有使用<code>PUSH模式</code>的消费者才能使用SQL过滤。</p><p>SQL过滤表达式中支持多种常量类型与运算符。</p><p>支持的常量类型：</p><ul><li>数值：比如： 123 ，3.1415</li><li>字符：必须用单引号包裹起来，比如：’abc’</li><li>布尔：TRUE 或 FALSE</li><li>NULL：特殊的常量，表示空</li></ul><p>支持的运算符有：</p><ul><li>数值比较：&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;，BETWEEN，&#x3D;</li><li>字符比较：&#x3D;，&lt;&gt;，IN</li><li>逻辑运算 ：AND，OR，NOT</li><li>NULL判断：IS NULL 或者 IS NOT NULL</li></ul><p>默认情况下Broker没有开启消息的SQL过滤功能，需要在Broker加载的配置文件中添加如下属性，以开启该功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">enablePropertyFilter = trueCopy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><p>在启动Broker时需要指定这个修改过的配置文件。例如对于单机Broker的启动，其修改的配置文件是conf&#x2F;broker.conf，启动时使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh bin/mqbroker -n localhost:9876 -c conf/broker.conf &amp;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h4 id="3-代码举例-1"><a href="#3-代码举例-1" class="headerlink" title="3 代码举例"></a>3 代码举例</h4><p>定义Tag过滤Producer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterByTagProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        producer.start();<br>        String[] tags = &#123;<span class="hljs-string">&quot;myTagA&quot;</span>,<span class="hljs-string">&quot;myTagB&quot;</span>,<span class="hljs-string">&quot;myTagC&quot;</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span> ; i++) &#123;<br>            <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> tags[i%tags.length];<br>            <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>,tag,body);<br>            <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg);<br>            System.out.println(sendResult);<br>        &#125;<br>        producer.shutdown();<br>    &#125;<br>&#125;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><p>定义Tag过滤Consumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterByTagConsumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);<br><br>        consumer.subscribe(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;myTagA || myTagB&quot;</span>);<br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs,ConsumeConcurrentlyContext context)</span> &#123;<br>                <span class="hljs-keyword">for</span> (MessageExt me:msgs)&#123;<br>                    System.out.println(me);<br>                &#125;<br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;Consumer Started&quot;</span>);<br>    &#125;<br>&#125;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><p>定义SQL过滤Producer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterBySQLProducer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        producer.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10</span> ; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">byte</span>[] body = (<span class="hljs-string">&quot;Hi,&quot;</span> + i).getBytes();<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;myTopic&quot;</span>, <span class="hljs-string">&quot;myTag&quot;</span>, body);<br>                msg.putUserProperty(<span class="hljs-string">&quot;age&quot;</span>, i + <span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg);<br>                System.out.println(sendResult);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        producer.shutdown();<br>    &#125;<br>&#125;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><p>定义SQL过滤Consumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterBySQLConsumer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);<br>        consumer.subscribe(<span class="hljs-string">&quot;myTopic&quot;</span>, MessageSelector.bySql(<span class="hljs-string">&quot;age between 0 and 6&quot;</span>));<br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;<br>                <span class="hljs-keyword">for</span> (MessageExt me:msgs)&#123;<br>                    System.out.println(me);<br>                &#125;<br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br>        consumer.start();<br>        System.out.println(<span class="hljs-string">&quot;Consumer Started&quot;</span>);<br>    &#125;<br>&#125;Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h3 id="七、消息发送重试机制"><a href="#七、消息发送重试机制" class="headerlink" title="七、消息发送重试机制"></a>七、消息发送重试机制</h3><h4 id="1-说明"><a href="#1-说明" class="headerlink" title="1 说明"></a>1 说明</h4><p>Producer对发送失败的消息进行重新发送的机制，称为消息发送重试机制，也称为消息重投机制。</p><h5 id="对于消息重投，需要注意以下几点："><a href="#对于消息重投，需要注意以下几点：" class="headerlink" title="对于消息重投，需要注意以下几点："></a>对于消息重投，需要注意以下几点：</h5><ul><li>生产者在发送消息时，若采用同步或异步发送方式，发送失败会重试，但oneway消息发送方式发送失败是没有重试机制的</li><li>只有普通消息具有发送重试机制，顺序消息是没有的</li><li>消息重投机制可以保证消息尽可能发送成功、不丢失，但可能会造成消息重复。消息重复在RocketMQ中是无法避免的问题</li><li>消息重复在一般情况下不会发生，当出现消息量大、网络抖动，消息重复就会成为大概率事件</li><li>producer主动重发、consumer负载变化（发生Rebalance，不会导致消息重复，但可能出现重复消费）也会导致重复消息</li><li>消息重复无法避免，但要避免消息的重复消费。</li><li>避免消息重复消费的解决方案是，为消息添加唯一标识（例如消息key），使消费者对消息进行消费判断来避免重复消费</li><li>消息发送重试有三种策略可以选择：同步发送失败策略、异步发送失败策略、消息刷盘失败策略</li></ul><h4 id="2-同步发送失败策略"><a href="#2-同步发送失败策略" class="headerlink" title="2 同步发送失败策略"></a>2 同步发送失败策略</h4><p>对于普通消息，消息发送默认采用round-robin策略来选择所发送到的队列。如果发送失败，默认重试 2次。但在重试时是不会选择上次发送失败的Broker，而是选择其它Broker。当然，若只有一个Broker其也只能发送到该Broker，但其会尽量发送到该Broker上的其它Queue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个producer，参数为Producer Group名称</span><br><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br><span class="hljs-comment">// 指定nameServer地址</span><br>producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br><span class="hljs-comment">// 设置同步发送失败时重试发送的次数，默认为 2 次</span><br>producer.setRetryTimesWhenSendFailed( <span class="hljs-number">3</span> );<br><span class="hljs-comment">// 设置发送超时时限为5s，默认3s</span><br>producer.setSendMsgTimeout( <span class="hljs-number">5000</span> );Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><p>同时，Broker还具有<code>失败隔离</code>功能，使Producer尽量选择未发生过发送失败的Broker作为目标Broker。其可以保证其它消息尽量不发送到问题Broker，为了提升消息发送效率，降低消息发送耗时。</p><blockquote><p>思考：让我们自己实现<code>失败隔离</code>功能，如何来做？</p><p>1 ）方案一：Producer中维护某JUC的Map集合，其key是发生失败的时间戳，value为Broker实例。Producer中还维护着一个Set集合，其中存放着所有未发生发送异常的Broker实例。选择目标Broker是从该Set集合中选择的。再定义一个定时任务，定期从Map集合中将长期未发生发送异常的Broker清理出去，并添加到Set集合。</p><p>2 ）方案二：为Producer中的Broker实例添加一个标识，例如是一个AtomicBoolean属性。只要该Broker上发生过发送异常，就将其置为true。选择目标Broker就是选择该属性值为false的Broker。再定义一个定时任务，定期将Broker的该属性置为false。</p><p>3 ）方案三：为Producer中的Broker实例添加一个标识，例如是一个AtomicLong属性。只要该Broker上发生过发送异常，就使其值增一。选择目标Broker就是选择该属性值最小的Broker。若该值相同，采用轮询方式选择。</p></blockquote><p>如果超过重试次数，则抛出异常，由Producer去保证消息不丢。当然当生产者出现RemotingException、MQClientException和MQBrokerException时，Producer会自动重投消息。</p><h4 id="3-异步发送失败策略"><a href="#3-异步发送失败策略" class="headerlink" title="3 异步发送失败策略"></a>3 异步发送失败策略</h4><p>异步发送失败重试时，异步重试不会选择其他broker，仅在同一个broker上做重试，所以该策略无法保证消息不丢。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;pg&quot;</span>);<br>producer.setNamesrvAddr(<span class="hljs-string">&quot;rocketmqOS:9876&quot;</span>);<br><span class="hljs-comment">// 指定异步发送失败后不进行重试发送</span><br>producer.setRetryTimesWhenSendAsyncFailed( <span class="hljs-number">0</span> );Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><h4 id="4-消息刷盘失败策略"><a href="#4-消息刷盘失败策略" class="headerlink" title="4 消息刷盘失败策略"></a>4 消息刷盘失败策略</h4><p>消息刷盘超时（Master或Slave）或slave不可用（slave在做数据同步时向master返回状态不是SEND_OK）时，默认是不会将消息尝试发送到其他Broker的。不过，对于重要消息可以通过在Broker的配置文件设置retryAnotherBrokerWhenNotStoreOK属性为true来开启。</p><h3 id="八、消息消费重试机制"><a href="#八、消息消费重试机制" class="headerlink" title="八、消息消费重试机制"></a>八、消息消费重试机制</h3><h4 id="1-顺序消息的消费重试"><a href="#1-顺序消息的消费重试" class="headerlink" title="1 顺序消息的消费重试"></a>1 顺序消息的消费重试</h4><p>对于顺序消息，当Consumer消费消息失败后，为了保证消息的顺序性，其会自动不断地进行消息重试，直到消费成功。消费重试默认间隔时间为 1000 毫秒。重试期间应用会出现消息消费被阻塞的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;cg&quot;</span>);<br><span class="hljs-comment">// 顺序消息消费失败的消费重试时间间隔，单位毫秒，默认为 1000 ，其取值范围为[10,30000]</span><br>consumer.setSuspendCurrentQueueTimeMillis( <span class="hljs-number">100</span> );Copy to clipboardErrorCopied<br></code></pre></td></tr></table></figure><blockquote><p>由于对顺序消息的重试是无休止的，不间断的，直至消费成功，所以，对于顺序消息的消费，务必要保证应用能够及时监控并处理消费失败的情况，避免消费被永久性阻塞。</p><p>注意，顺序消息没有发送失败重试机制，但具有消费失败重试机制</p></blockquote><h4 id="2-无序消息的消费重试"><a href="#2-无序消息的消费重试" class="headerlink" title="2 无序消息的消费重试"></a>2 无序消息的消费重试</h4><p>对于无序消息（普通消息、延时消息、事务消息），当Consumer消费消息失败时，可以通过设置返回状态达到消息重试的效果。不过需要注意，无序消息的重试<code>只对集群消费方式生效</code>，广播消费方式不提供失败重试特性。即对于广播消费，消费失败后，失败消息不再重试，继续消费后续消息。</p><h4 id="3-消费重试次数与间隔"><a href="#3-消费重试次数与间隔" class="headerlink" title="3 消费重试次数与间隔"></a>3 消费重试次数与间隔</h4><p>对于<code>无序消息集群</code>消费下的重试消费，每条消息默认最多重试 16 次，但每次重试的间隔时间是不同的，会逐渐变长。每次重试的间隔时间如下表。</p><table><thead><tr><th>重试次数</th><th>与上次重试的间隔时间</th><th>重试次数</th><th>与上次重试的间隔时间</th></tr></thead><tbody><tr><td>1</td><td>10秒</td><td>9</td><td>7分钟</td></tr><tr><td>2</td><td>30</td><td>10</td><td>8 分钟</td></tr><tr><td>3</td><td>1分钟</td><td>11</td><td>9 分钟</td></tr><tr><td>4</td><td>2分钟</td><td>12</td><td>10分钟</td></tr><tr><td>5</td><td>3分钟</td><td>13</td><td>20分钟</td></tr><tr><td>6</td><td>4分钟</td><td>14</td><td>30分钟</td></tr><tr><td>7</td><td>5分钟</td><td>15</td><td>1小时</td></tr><tr><td>8</td><td>6分钟</td><td>16</td><td>2 小时</td></tr></tbody></table><blockquote><p>若一条消息在一直消费失败的前提下，将会在正常消费后的第 <code>4 小时 46 分</code>后进行第 16 次重试。<br>若仍然失败，则将消息投递到<code>死信队列</code></p><p>修改消费重试次数</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">DefaultMQPushConsumer consumer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DefaultMQPushConsumer(<span class="hljs-string">&quot;cg&quot;</span>)</span>;<br><span class="hljs-comment">// 修改消费重试次数</span><br>consumer.set<span class="hljs-constructor">MaxReconsumeTimes( 10 )</span>;Copy <span class="hljs-keyword">to</span> clipboardErrorCopied<br></code></pre></td></tr></table></figure><blockquote><p>对于修改过的重试次数，将按照以下策略执行：<br>1)若修改值小于 16 ，则按照指定间隔进行重试<br>2)若修改值大于 16 ，则超过 16 次的重试时间间隔均为 2 小时</p><p>对于Consumer Group，若仅修改了一个Consumer的消费重试次数，则会应用到该Group中所有其它Consumer实例。若出现多个Consumer均做了修改的情况，则采用覆盖方式生效。即最后被修改的值会覆盖前面设置的值。</p></blockquote><h4 id="4-重试队列-1"><a href="#4-重试队列-1" class="headerlink" title="4 重试队列"></a>4 重试队列</h4><p>对于需要重试消费的消息，并不是Consumer在等待了指定时长后再次去拉取原来的消息进行消费，而是将这些需要重试消费的消息放入到了一个特殊Topic的队列中，而后进行再次消费的。这个特殊的队列就是重试队列。</p><p>当出现需要进行重试消费的消息时，Broker会为每个消费组都设置一个Topic名称为<code>%RETRY%consumerGroup@consumerGroup</code>的重试队列。</p><blockquote><p>1 ）这个重试队列是针对消息才组的，而不是针对每个Topic设置的（一个Topic的消息可以让多个消费者组进行消费，所以会为这些消费者组各创建一个重试队列）<br>2 ）只有当出现需要进行重试消费的消息时，才会为该消费者组创建重试队列</p></blockquote><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208163646.png" alt="输入图片说明"></p><blockquote><p>注意，消费重试的时间间隔与<code>延时消费</code>的<code>延时等级</code>十分相似，除了没有延时等级的前两个时间外，其它的时间都是相同的</p></blockquote><p>Broker对于重试消息的处理是通过<code>延时消息</code>实现的。先将消息保存到SCHEDULE_TOPIC_XXXX延迟队列中，延迟时间到后，会将消息投递到%RETRY%consumerGroup@consumerGroup重试队列中。</p><h4 id="5-消费重试配置方式"><a href="#5-消费重试配置方式" class="headerlink" title="5 消费重试配置方式"></a>5 消费重试配置方式</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208163740.png" alt="输入图片说明"></p><p>集群消费方式下，消息消费失败后若希望消费重试，则需要在消息监听器接口的实现中明确进行如下三种方式之一的配置：</p><ul><li>方式 1 ：返回ConsumeConcurrentlyStatus.RECONSUME_LATER（推荐）</li><li>方式 2 ：返回Null</li><li>方式 3 ：抛出异常</li></ul><h4 id="6-消费不重试配置方式"><a href="#6-消费不重试配置方式" class="headerlink" title="6 消费不重试配置方式"></a>6 消费不重试配置方式</h4><p><img src="https://assoz.coding.net/p/study-blog/d/study-imgs/git/raw/main/imgs/QQ%E6%88%AA%E5%9B%BE20220208163826.png" alt="输入图片说明"></p><p>集群消费方式下，消息消费失败后若不希望消费重试，则在捕获到异常后同样也返回与消费成功后的相同的结果，即ConsumeConcurrentlyStatus.CONSUME_SUCCESS，则不进行消费重试。</p><h3 id="九、死信队列"><a href="#九、死信队列" class="headerlink" title="九、死信队列"></a>九、死信队列</h3><h4 id="1-什么是死信队列"><a href="#1-什么是死信队列" class="headerlink" title="1 什么是死信队列"></a>1 什么是死信队列</h4><p>当一条消息初次消费失败，消息队列会自动进行消费重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中。这个队列就是死信队列（Dead-Letter Queue，DLQ），而其中的消息 则称为死信消息（Dead-Letter Message，DLM）。</p><blockquote><p>死信队列是用于处理无法被正常消费的消息的。</p></blockquote><h4 id="2-死信队列的特征"><a href="#2-死信队列的特征" class="headerlink" title="2 死信队列的特征"></a>2 死信队列的特征</h4><h5 id="死信队列具有如下特征："><a href="#死信队列具有如下特征：" class="headerlink" title="死信队列具有如下特征："></a>死信队列具有如下特征：</h5><ul><li>死信队列中的消息不会再被消费者正常消费，即DLQ对于消费者是不可见的</li><li>死信存储有效期与正常消息相同，均为 3 天（commitlog文件的过期时间）， 3 天后会被自动删除</li><li>死信队列就是一个特殊的Topic，名称为%DLQ%consumerGroup@consumerGroup，即每个消费者组都有一个死信队列</li><li>如果一个消费者组未产生死信消息，则不会为其创建相应的死信队列</li></ul><h4 id="3-死信消息的处理"><a href="#3-死信消息的处理" class="headerlink" title="3 死信消息的处理"></a>3 死信消息的处理</h4><p>实际上，当一条消息进入死信队列，就意味着系统中某些地方出现了问题，从而导致消费者无法正常消费该消息，比如代码中原本就存在Bug。因此，对于死信消息，通常需要开发人员进行特殊处理。最关键的步骤是要排查可疑因素，解决代码中可能存在的Bug，然后再将原来的死信消息再次进行投递消费。</p>    <style>.markmap-container{display:flex;justify-content:center;margin:0 auto;width:90%;height:500px}.markmap-container svg{width:100%;height:100%}@media(max-width:768px){.markmap-container{height:400px}}</style>    <script src="https://cdn.jsdelivr.net/npm/d3@6"></script>    <script src="https://cdn.jsdelivr.net/npm/markmap-view"></script>    <script> document.querySelectorAll('.markmap-container>svg').forEach(mindmap => markmap.Markmap.create(mindmap, null, JSON.parse(mindmap.getAttribute('data'))))</script>  ]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
